<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从 Git 仓库中克隆出指定 tag 处的指定文件</title>
    <link href="/posts/befa4b6e.html"/>
    <url>/posts/befa4b6e.html</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>项目中的一个模块从源码打包成了动态库 <code>pod</code>，这个模块迭代了十来年，打包出来的 Framework 对应的 <code>dSYM</code> 压缩后的体积也达到了 150MB。为方便管理，我们将 <code>dSYM</code> 和动态库放到同一个 git 仓库中，并通过 <code>git-lfs</code> 来管理体积大的二进制文件和 <code>dSYM</code> 文件。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>日常开发时，Framework 的调用方通过 <code>pod &#39;xxxx&#39;</code> 引入此动态库，要尽量节省每次 <code>pod update</code> 的耗时，同时也希望在 AdHoc 打包内测时，能快速获取到此 <code>dSYM</code> 以便能上传到 firebase 解析后续可能发生在动态库中的闪退信息。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>一开始我们模仿 <a href="https://github.com/firebase/firebase-ios-sdk/blob/master/FirebaseCrashlytics.podspec"><code>FirebaseCrashlytics.podspec</code></a> 的写法，使用 <code>preserve_paths</code> 夹带私货，让 <code>dSYM</code> 跟随 Framework 一起在 <code>pod update</code> 时被下载，同时又不被集成到 Xcode 里面。<code>FirebaseCrashlytics</code> 自家的用来上传符号文件的程序 <code>upload-symbols</code> 就是这样做的。但我们的 <code>dSYM</code> 太大了，下载比较耗时。</p><p>后来了解到 GitLab 有一种大文件独立下载的特性，具体来说就是允许单独下载特定分支（或 tag）特定路径的文件，而不用全盘 clone 到本地。所以我们在动态库的 <code>.podspec</code> 中排除了 <code>dSYM</code> 的引入，让调用方只关注 Framework 本身，然后在打包脚本中应用 GitLab 此特性先下载到 <code>dSYM</code> 然后再上传，这样下载的耗时只发生在打包过程中。完整处理代码：<br><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta"># </span><span class="language-bash">输入：</span> <br><span class="hljs-meta"># </span><span class="language-bash">   <span class="hljs-variable">$1</span> 动态库仓库的一个 tag</span><br><span class="hljs-meta"># </span><span class="language-bash">处理： 存放于本地的该 tag 对应的 dsym 文件。并根据语言环境上传到 firebase</span><br><br>FASTLINE_ROOT=$(pwd)<br>TEMPDIR=$(mktemp -d)<br>cd $&#123;TEMPDIR&#125;<br><br>echo &quot;要拉取的 dsym 的 tag:$1&quot;<br><br>git clone --filter=blob:none --sparse git@git.xxx.com:xxx/dynamic.git<br>cd dynamic<br>git sparse-checkout init --cone<br>git fetch origin tag $1 --no-tags<br>git checkout $1<br>git sparse-checkout add path/to/dSYM.zip<br><br>DSYM_FILE_PATH=&quot;$&#123;TEMPDIR&#125;/dynamic/path/to/dSYM.zip&quot;<br><br>UPLOAD_BIN_PATH=&quot;$&#123;FASTLINE_ROOT&#125;/../Pods/FirebaseCrashlytics/upload-symbols&quot;<br>PLIST_PATH=&quot;$&#123;FASTLINE_ROOT&#125;/../GoogleService/GoogleService-Info.plist&quot;<br><br>UPLOAD_CMD=&quot;$UPLOAD_BIN_PATH -gsp $PLIST_PATH -p ios $DSYM_FILE_PATH&quot;<br>echo &quot;exec cmd : $&#123;UPLOAD_CMD&#125;&quot;<br>eval $&#123;UPLOAD_CMD&#125;<br></code></pre></td></tr></table></figure></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://docs.gitlab.com/ee/topics/git/partial_clone.html">Partial clone</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向学习笔记 - 部分场景的 ARM64 汇编指令</title>
    <link href="/posts/9d246b3e.html"/>
    <url>/posts/9d246b3e.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文将对高级语言中常见的基础语句块进行汇编代码调试，如全局变量、局部变量、<code>if</code> / <code>for</code> / <code>while</code> 语句、<code>switch</code>、指针类型等，以加深印象和理解，方便在查看二进制反汇编代码时能快速识别并准确地“翻译”为高级语言伪代码。</p></blockquote><h1 id="全局变量-amp-局部变量"><a href="#全局变量-amp-局部变量" class="headerlink" title="全局变量 &amp; 局部变量"></a>全局变量 &amp; 局部变量</h1><p>下面代码中，全局变量和局部变量是如何取值并参与运算的呢？<br><figure class="highlight objc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">int</span> globalVal = <span class="hljs-number">0xabcdef</span>;<br><span class="hljs-keyword">int</span> sumV(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b) &#123;<br>    <span class="hljs-keyword">int</span> tempG = globalVal;<br>    <span class="hljs-built_in">NSArray</span> *arr = [<span class="hljs-built_in">NSArray</span> new];<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0x11</span>;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">0x14</span>;<br>    <span class="hljs-keyword">return</span> a + b + c + tempG;<br>&#125;<br></code></pre></td></tr></table></figure><br>在 <code>main</code> 中调用 <code>int res = sumV(0x1, 0x2);</code>，在 <code>sumV</code> 首行添加断点，设置 Xode 展示汇编指令，以默认的 Debug 优化级别运行，如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs armasm">    <span class="hljs-number">0x100dc206c</span> &lt;+<span class="hljs-number">0</span>&gt;:   <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x40</span>    <span class="hljs-comment">; =0x40 </span><br>    <span class="hljs-number">0x100dc2070</span> &lt;+<span class="hljs-number">4</span>&gt;:   stp    x29, x30, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x30</span>]<br>    <span class="hljs-number">0x100dc2074</span> &lt;+<span class="hljs-number">8</span>&gt;:   <span class="hljs-keyword">add</span>    x29, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x30</span>   <span class="hljs-comment">; =0x30 </span><br>    <span class="hljs-number">0x100dc2078</span> &lt;+<span class="hljs-number">12</span>&gt;:  stur   w0, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x100dc207c</span> &lt;+<span class="hljs-number">16</span>&gt;:  stur   w1, [x29, #-<span class="hljs-number">0x8</span>]<br>    <span class="hljs-number">0x100dc2080</span> &lt;+<span class="hljs-number">20</span>&gt;:  <span class="hljs-keyword">adrp</span>   x8, <span class="hljs-number">3</span><br>    <span class="hljs-number">0x100dc2084</span> &lt;+<span class="hljs-number">24</span>&gt;:  <span class="hljs-keyword">add</span>    x8, x8, <span class="hljs-number">#0x6a0</span>   <span class="hljs-comment">; =0x6a0 </span><br>-&gt;  <span class="hljs-number">0x100dc2088</span> &lt;+<span class="hljs-number">28</span>&gt;:  <span class="hljs-keyword">ldr</span>    w9, [x8]<br>    <span class="hljs-number">0x100dc208c</span> &lt;+<span class="hljs-number">32</span>&gt;:  stur   w9, [x29, #-<span class="hljs-number">0xc</span>]<br>    <span class="hljs-number">0x100dc2090</span> &lt;+<span class="hljs-number">36</span>&gt;:  <span class="hljs-keyword">adrp</span>   x8, <span class="hljs-number">3</span><br>    <span class="hljs-number">0x100dc2094</span> &lt;+<span class="hljs-number">40</span>&gt;:  <span class="hljs-keyword">add</span>    x8, x8, <span class="hljs-number">#0x4c8</span>   <span class="hljs-comment">; =0x4c8 </span><br>    <span class="hljs-number">0x100dc2098</span> &lt;+<span class="hljs-number">44</span>&gt;:  <span class="hljs-keyword">ldr</span>    x0, [x8]<br>    <span class="hljs-number">0x100dc209c</span> &lt;+<span class="hljs-number">48</span>&gt;:  <span class="hljs-keyword">adrp</span>   x8, <span class="hljs-number">3</span><br>    <span class="hljs-number">0x100dc20a0</span> &lt;+<span class="hljs-number">52</span>&gt;:  <span class="hljs-keyword">add</span>    x8, x8, <span class="hljs-number">#0x4a8</span>   <span class="hljs-comment">; =0x4a8 </span><br>    <span class="hljs-number">0x100dc20a4</span> &lt;+<span class="hljs-number">56</span>&gt;:  <span class="hljs-keyword">ldr</span>    x1, [x8]<br>    <span class="hljs-number">0x100dc20a8</span> &lt;+<span class="hljs-number">60</span>&gt;:  <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x100dc24f4</span>  <span class="hljs-comment">;  objc_msgSend</span><br>    <span class="hljs-number">0x100dc20ac</span> &lt;+<span class="hljs-number">64</span>&gt;:  <span class="hljs-keyword">add</span>    x8, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x18</span>    <span class="hljs-comment">; =0x18 </span><br>    <span class="hljs-number">0x100dc20b0</span> &lt;+<span class="hljs-number">68</span>&gt;:  <span class="hljs-keyword">str</span>    x0, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x18</span>]<br>    <span class="hljs-number">0x100dc20b4</span> &lt;+<span class="hljs-number">72</span>&gt;:  <span class="hljs-keyword">mov</span>    w9, <span class="hljs-number">#0x11</span><br>    <span class="hljs-number">0x100dc20b8</span> &lt;+<span class="hljs-number">76</span>&gt;:  <span class="hljs-keyword">str</span>    w9, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x14</span>]<br>    <span class="hljs-number">0x100dc20bc</span> &lt;+<span class="hljs-number">80</span>&gt;:  <span class="hljs-keyword">mov</span>    w9, <span class="hljs-number">#0x14</span><br>    <span class="hljs-number">0x100dc20c0</span> &lt;+<span class="hljs-number">84</span>&gt;:  <span class="hljs-keyword">str</span>    w9, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>]<br>    <span class="hljs-number">0x100dc20c4</span> &lt;+<span class="hljs-number">88</span>&gt;:  ldur   w9, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x100dc20c8</span> &lt;+<span class="hljs-number">92</span>&gt;:  ldur   w10, [x29, #-<span class="hljs-number">0x8</span>]<br>    <span class="hljs-number">0x100dc20cc</span> &lt;+<span class="hljs-number">96</span>&gt;:  <span class="hljs-keyword">add</span>    w9, w9, w10<br>    <span class="hljs-number">0x100dc20d0</span> &lt;+<span class="hljs-number">100</span>&gt;: <span class="hljs-keyword">ldr</span>    w10, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x14</span>]<br>    <span class="hljs-number">0x100dc20d4</span> &lt;+<span class="hljs-number">104</span>&gt;: <span class="hljs-keyword">add</span>    w9, w9, w10<br>    <span class="hljs-number">0x100dc20d8</span> &lt;+<span class="hljs-number">108</span>&gt;: ldur   w10, [x29, #-<span class="hljs-number">0xc</span>]<br>    <span class="hljs-number">0x100dc20dc</span> &lt;+<span class="hljs-number">112</span>&gt;: <span class="hljs-keyword">add</span>    w0, w9, w10<br>    <span class="hljs-number">0x100dc20e0</span> &lt;+<span class="hljs-number">116</span>&gt;: <span class="hljs-keyword">str</span>    w0, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0xc</span>]<br>    <span class="hljs-number">0x100dc20e4</span> &lt;+<span class="hljs-number">120</span>&gt;: <span class="hljs-keyword">mov</span>    x0, x8<br>    <span class="hljs-number">0x100dc20e8</span> &lt;+<span class="hljs-number">124</span>&gt;: <span class="hljs-keyword">mov</span>    x8, <span class="hljs-number">#0x0</span><br>    <span class="hljs-number">0x100dc20ec</span> &lt;+<span class="hljs-number">128</span>&gt;: <span class="hljs-keyword">mov</span>    x1, x8<br>    <span class="hljs-number">0x100dc20f0</span> &lt;+<span class="hljs-number">132</span>&gt;: <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x100dc2524</span>  <span class="hljs-comment">;  objc_storeStrong</span><br>    <span class="hljs-number">0x100dc20f4</span> &lt;+<span class="hljs-number">136</span>&gt;: <span class="hljs-keyword">ldr</span>    w0, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0xc</span>]<br>    <span class="hljs-number">0x100dc20f8</span> &lt;+<span class="hljs-number">140</span>&gt;: ldp    x29, x30, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x30</span>]<br>    <span class="hljs-number">0x100dc20fc</span> &lt;+<span class="hljs-number">144</span>&gt;: <span class="hljs-keyword">add</span>    <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x40</span>    <span class="hljs-comment">; =0x40 </span><br>    <span class="hljs-number">0x100dc2100</span> &lt;+<span class="hljs-number">148</span>&gt;: ret    <br></code></pre></td></tr></table></figure><ol><li>前三行开辟栈空间 -&gt; 保存上一个函数栈底信息和自己的返回地址 -&gt; 保存自己的栈底地址</li><li>第 4 行的 <code>stur</code> 等同于 <code>str</code>，但操作数为负数，结果是将两个形参放到栈底开始的位置</li><li><code>adrp   x8, 3</code>：<code>adrp</code> 以页为单位的大范围的地址读取指令。将 3 左移 12 位得到的数与清空了低 12 位的 pc 寄存器的值相加，结果放入 x8 中，这是某个 Page 的起始地址，配合接下来的偏移操作 <code>add    x8, x8, #0x6a0</code>，x8 中存放的是一个特定的地址。如果基址偏移为 <code>0x100dbc000</code>，可以计算出来 x8 中的地址在二进制中的偏移为：<code>0x100dc2000 + (3 &lt;&lt; 12) + 0x6a0 - 0x100dbc000 = 0x00000000000096a0</code>，如下图，高 8 位即为 <code>globalVal</code> 的值：<img src="9d246b3e/1.png" alt=""> 接下来将它存到了栈底偏移 <code>0xc</code> 处</li><li>第 16 行是一个 <code>objc_msgSend</code> 调用，上面分别通过 <code>adrp</code> 指令准备了参数 x0 和 x1，同上，计算可知它们的值分别来自于二进制文件偏移量 <code>0x00000000000094c8</code> 和 <code>0x00000000000094a8</code> 处，根据 <code>objc_msgSend</code> 调用规则，x0、x1 分别是 <code>NSArray.class</code> 和 <code>new</code>，接下来将返回值存到了栈顶偏移 <code>0x18</code> 处:<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="9d246b3e/2.png" alt=""></div><div class="group-image-wrap"><img src="9d246b3e/3.png" alt=""></div></div></div></li><li>接下来是两个基本类型的临时变量，是立即数通过寄存器中转存到了栈空间中，等到需要做加法运算时，再取到寄存器中做运算</li><li>最后 4 行将返回值存入 x0 ，恢复主调函数调用环境退栈并 <code>ret</code></li><li>在函数即将退栈时，第 34 行以 x8 和 <code>nil</code> 为形参调用了 <code>objc_storeStrong</code>，x8 是 <code>arr</code> 变量的指针，目的是在离开作用域时对指针置空，引用计数 -1，以期待下一个 RunLoop 时实例对象的内存能被 AutoReleasePool 自动释放。<code>objc_storeStrong</code> 的实现： <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">void</span> objc_storeStrong(<span class="hljs-keyword">id</span> *location, <span class="hljs-keyword">id</span> obj)<br>&#123;<br>    <span class="hljs-keyword">id</span> prev = *location;<br>    <span class="hljs-keyword">if</span> (obj == prev) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    objc_retain(obj);<br>    *location = obj;<br>    objc_release(prev);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>全局变量存放于数据区，和代码区距离较远，使用 <code>adrp</code> 来加载</li><li>局部变量如果是基本类型，将会以立即数的形式加载；如果是对象类型，将加载指向堆区的指针</li><li>由于 <code>NASrray</code> 来自于动态库，其地址（或者说偏移值）在二进制 rebase 阶段才会被决定，所以上图中只能展示为 <code>0x0</code></li></ul><h1 id="条件、循环语句"><a href="#条件、循环语句" class="headerlink" title="条件、循环语句"></a>条件、循环语句</h1><p><code>for</code>、<code>if</code>、<code>while</code>、<code>do-while</code> 语句的汇编相差不大。参考以下代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">looptest</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0xab</span>;i &lt; <span class="hljs-number">0xffff</span>;i ++) &#123;<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0xad</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;enough!\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">0xff</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Go on\n&quot;</span>);<br>        i ++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>按上述方法编译成汇编得到：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs armasm">    <span class="hljs-number">0x1008e6064</span> &lt;+<span class="hljs-number">0</span>&gt;:   <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x20</span>    <span class="hljs-comment">; =0x20 </span><br>    <span class="hljs-number">0x1008e6068</span> &lt;+<span class="hljs-number">4</span>&gt;:   stp    x29, x30, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>]<br>    <span class="hljs-number">0x1008e606c</span> &lt;+<span class="hljs-number">8</span>&gt;:   <span class="hljs-keyword">add</span>    x29, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>   <span class="hljs-comment">; =0x10 </span><br>    <span class="hljs-number">0x1008e6070</span> &lt;+<span class="hljs-number">12</span>&gt;:  <span class="hljs-keyword">mov</span>    w8, <span class="hljs-number">#0xab</span><br>    <span class="hljs-number">0x1008e6074</span> &lt;+<span class="hljs-number">16</span>&gt;:  stur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x1008e6078</span> &lt;+<span class="hljs-number">20</span>&gt;:  ldur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x1008e607c</span> &lt;+<span class="hljs-number">24</span>&gt;:  <span class="hljs-keyword">mov</span>    w9, <span class="hljs-number">#0xffff</span><br>    <span class="hljs-number">0x1008e6080</span> &lt;+<span class="hljs-number">28</span>&gt;:  <span class="hljs-keyword">cmp</span>    w8, w9<br>    <span class="hljs-number">0x1008e6084</span> &lt;+<span class="hljs-number">32</span>&gt;:  b.ge   <span class="hljs-number">0x1008e60b4</span>  <span class="hljs-comment">; &lt;+80&gt; at main.m:29:12</span><br>    <span class="hljs-number">0x1008e6088</span> &lt;+<span class="hljs-number">36</span>&gt;:  ldur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x1008e608c</span> &lt;+<span class="hljs-number">40</span>&gt;:  <span class="hljs-keyword">cmp</span>    w8, <span class="hljs-number">#0xad</span>    <span class="hljs-comment">; =0xad </span><br>    <span class="hljs-number">0x1008e6090</span> &lt;+<span class="hljs-number">44</span>&gt;:  b.le   <span class="hljs-number">0x1008e60a4</span>  <span class="hljs-comment">; &lt;+64&gt; at main.m:23:31</span><br>    <span class="hljs-number">0x1008e6094</span> &lt;+<span class="hljs-number">48</span>&gt;:  <span class="hljs-keyword">adrp</span>   x0, <span class="hljs-number">0</span><br>    <span class="hljs-number">0x1008e6098</span> &lt;+<span class="hljs-number">52</span>&gt;:  <span class="hljs-keyword">add</span>    x0, x0, <span class="hljs-number">#0x66a</span>   <span class="hljs-comment">; =0x66a </span><br>-&gt;  <span class="hljs-number">0x1008e609c</span> &lt;+<span class="hljs-number">56</span>&gt;:  <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x1008e6514</span>  <span class="hljs-comment">; symbol stub for: printf</span><br>    <span class="hljs-number">0x1008e60a0</span> &lt;+<span class="hljs-number">60</span>&gt;:  <span class="hljs-keyword">b</span>      <span class="hljs-number">0x1008e60b4</span>  <span class="hljs-comment">; &lt;+80&gt; at main.m:29:12</span><br>    <span class="hljs-number">0x1008e60a4</span> &lt;+<span class="hljs-number">64</span>&gt;:  ldur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x1008e60a8</span> &lt;+<span class="hljs-number">68</span>&gt;:  <span class="hljs-keyword">add</span>    w8, w8, <span class="hljs-number">#0x1</span> <span class="hljs-comment">; =0x1 </span><br>    <span class="hljs-number">0x1008e60ac</span> &lt;+<span class="hljs-number">72</span>&gt;:  stur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x1008e60b0</span> &lt;+<span class="hljs-number">76</span>&gt;:  <span class="hljs-keyword">b</span>      <span class="hljs-number">0x1008e6078</span>  <span class="hljs-comment">; &lt;+20&gt; at main.m:23:18</span><br>    <span class="hljs-number">0x1008e60b4</span> &lt;+<span class="hljs-number">80</span>&gt;:  ldur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x1008e60b8</span> &lt;+<span class="hljs-number">84</span>&gt;:  <span class="hljs-keyword">cmp</span>    w8, <span class="hljs-number">#0xff</span>    <span class="hljs-comment">; =0xff </span><br>    <span class="hljs-number">0x1008e60bc</span> &lt;+<span class="hljs-number">88</span>&gt;:  b.ge   <span class="hljs-number">0x1008e60dc</span>  <span class="hljs-comment">; &lt;+120&gt; at main.m:33:1</span><br>    <span class="hljs-number">0x1008e60c0</span> &lt;+<span class="hljs-number">92</span>&gt;:  <span class="hljs-keyword">adrp</span>   x0, <span class="hljs-number">0</span><br>    <span class="hljs-number">0x1008e60c4</span> &lt;+<span class="hljs-number">96</span>&gt;:  <span class="hljs-keyword">add</span>    x0, x0, <span class="hljs-number">#0x673</span>   <span class="hljs-comment">; =0x673 </span><br>    <span class="hljs-number">0x1008e60c8</span> &lt;+<span class="hljs-number">100</span>&gt;: <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x1008e6514</span>  <span class="hljs-comment">; symbol stub for: printf</span><br>    <span class="hljs-number">0x1008e60cc</span> &lt;+<span class="hljs-number">104</span>&gt;: ldur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x1008e60d0</span> &lt;+<span class="hljs-number">108</span>&gt;: <span class="hljs-keyword">add</span>    w8, w8, <span class="hljs-number">#0x1</span> <span class="hljs-comment">; =0x1 </span><br>    <span class="hljs-number">0x1008e60d4</span> &lt;+<span class="hljs-number">112</span>&gt;: stur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x1008e60d8</span> &lt;+<span class="hljs-number">116</span>&gt;: <span class="hljs-keyword">b</span>      <span class="hljs-number">0x1008e60b4</span>  <span class="hljs-comment">; &lt;+80&gt; at main.m:29:12</span><br>    <span class="hljs-number">0x1008e60dc</span> &lt;+<span class="hljs-number">120</span>&gt;: ldp    x29, x30, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>]<br>    <span class="hljs-number">0x1008e60e0</span> &lt;+<span class="hljs-number">124</span>&gt;: <span class="hljs-keyword">add</span>    <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x20</span>    <span class="hljs-comment">; =0x20 </span><br>    <span class="hljs-number">0x1008e60e4</span> &lt;+<span class="hljs-number">128</span>&gt;: ret    <br></code></pre></td></tr></table></figure></p><ol><li><code>cmp    label1, label2</code> 实际是执行 label1 和 label2 相减的操作，其结果会影响 cpsr 寄存器，后续的 <code>b.ge</code> 和 <code>b.le</code> 根据 cpsr 寄存器的标记为决定是否跳转到指定地址执行：<ol><li><code>b.ge label</code>: 结果是大于等于时跳转到 label 执行</li><li><code>b.le label</code>: 结果是小于等于时跳转到 lebal 执行</li></ol></li><li><code>break</code> 语句编译为了一个无条件跳转指令<code>b label</code>，跳转到循环体的外面第一行指令处</li></ol><h1 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h1><p>从 C 的角度来看，<code>switch</code> 和 <code>if-else</code> 是可以等价变换的，但是在汇编底层角度它们有什么不同呢？</p><h2 id="case-分支小于-4-个"><a href="#case-分支小于-4-个" class="headerlink" title="case  分支小于 4 个"></a>case  分支小于 4 个</h2><p>将下面两个函数编译成汇编代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">switchTest</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (a) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;miss matched&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">ifelseTest</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-number">7</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="9d246b3e/4.png" alt=""></div><div class="group-image-wrap"><img src="9d246b3e/5.png" alt=""></div></div></div></p><p>可以看到它们几乎没有区别，都是通过 <code>cmp</code> 和 <code>b</code> 语句来控制流程走向。</p><h2 id="case-分支跨度过大"><a href="#case-分支跨度过大" class="headerlink" title="case  分支跨度过大"></a>case  分支跨度过大</h2><p>再来看看 switch case 超过 4 个，但 case 最小值和最大值超过 50 的情况：<br><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="9d246b3e/6.png" alt=""></div><div class="group-image-wrap"><img src="9d246b3e/7.png" alt=""></div></div></div><br>汇编层面同样是通过 <code>cmp</code> 和 <code>b</code> 语句来进行控制的</p><h2 id="正常情况的-switch"><a href="#正常情况的-switch" class="headerlink" title="正常情况的 switch"></a>正常情况的 switch</h2><p>case 分支多于 4 个且最大值和最小值差值不超过 50 时：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">switchTest</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (a) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;12&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;8&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;miss matched&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>形参传入 10 ，Xcode 运行后的汇编代码：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs armasm">    <span class="hljs-number">0x100b01f94</span> &lt;+<span class="hljs-number">0</span>&gt;:   <span class="hljs-keyword">sub</span>    <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x20</span>    <span class="hljs-comment">; =0x20 </span><br>    <span class="hljs-number">0x100b01f98</span> &lt;+<span class="hljs-number">4</span>&gt;:   stp    x29, x30, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>]<br>    <span class="hljs-number">0x100b01f9c</span> &lt;+<span class="hljs-number">8</span>&gt;:   <span class="hljs-keyword">add</span>    x29, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>   <span class="hljs-comment">; =0x10 </span><br>    <span class="hljs-number">0x100b01fa0</span> &lt;+<span class="hljs-number">12</span>&gt;:  stur   w0, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x100b01fa4</span> &lt;+<span class="hljs-number">16</span>&gt;:  ldur   w8, [x29, #-<span class="hljs-number">0x4</span>]<br>    <span class="hljs-number">0x100b01fa8</span> &lt;+<span class="hljs-number">20</span>&gt;:  <span class="hljs-keyword">subs</span>   w8, w8, <span class="hljs-number">#0x2</span> <span class="hljs-comment">; =0x2 </span><br>    <span class="hljs-number">0x100b01fac</span> &lt;+<span class="hljs-number">24</span>&gt;:  <span class="hljs-keyword">mov</span>    x9, x8<br>    <span class="hljs-number">0x100b01fb0</span> &lt;+<span class="hljs-number">28</span>&gt;:  <span class="hljs-keyword">ubfx</span>   x9, x9, <span class="hljs-number">#0</span>, <span class="hljs-number">#32</span><br>-&gt;  <span class="hljs-number">0x100b01fb4</span> &lt;+<span class="hljs-number">32</span>&gt;:  <span class="hljs-keyword">cmp</span>    x9, <span class="hljs-number">#0xa</span> <span class="hljs-comment">; =0xa </span><br>    <span class="hljs-number">0x100b01fb8</span> &lt;+<span class="hljs-number">36</span>&gt;:  <span class="hljs-keyword">str</span>    x9, [<span class="hljs-built_in">sp</span>]<br>    <span class="hljs-number">0x100b01fbc</span> &lt;+<span class="hljs-number">40</span>&gt;:  b.hi   <span class="hljs-number">0x100b02028</span>  <span class="hljs-comment">; &lt;+148&gt; at main.m</span><br>    <span class="hljs-number">0x100b01fc0</span> &lt;+<span class="hljs-number">44</span>&gt;:  <span class="hljs-keyword">adrp</span>   x8, <span class="hljs-number">1</span><br>    <span class="hljs-number">0x100b01fc4</span> &lt;+<span class="hljs-number">48</span>&gt;:  <span class="hljs-keyword">add</span>    x8, x8, <span class="hljs-number">#0x40</span>    <span class="hljs-comment">; =0x40 </span><br>    <span class="hljs-number">0x100b01fc8</span> &lt;+<span class="hljs-number">52</span>&gt;:  <span class="hljs-keyword">ldr</span>    x11, [<span class="hljs-built_in">sp</span>]<br>    <span class="hljs-number">0x100b01fcc</span> &lt;+<span class="hljs-number">56</span>&gt;:  ldrsw  x10, [x8, x11, <span class="hljs-keyword">lsl</span> <span class="hljs-number">#2</span>]<br>    <span class="hljs-number">0x100b01fd0</span> &lt;+<span class="hljs-number">60</span>&gt;:  <span class="hljs-keyword">add</span>    x9, x8, x10<br>    <span class="hljs-number">0x100b01fd4</span> &lt;+<span class="hljs-number">64</span>&gt;:  <span class="hljs-keyword">br</span>     x9<br>    <span class="hljs-number">0x100b01fd8</span> &lt;+<span class="hljs-number">68</span>&gt;:  <span class="hljs-keyword">adrp</span>   x0, <span class="hljs-number">1</span><br>    <span class="hljs-number">0x100b01fdc</span> &lt;+<span class="hljs-number">72</span>&gt;:  <span class="hljs-keyword">add</span>    x0, x0, <span class="hljs-number">#0x662</span>   <span class="hljs-comment">; =0x662 </span><br>    <span class="hljs-number">0x100b01fe0</span> &lt;+<span class="hljs-number">76</span>&gt;:  <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x100b0250c</span>  <span class="hljs-comment">; symbol stub for: printf</span><br>    <span class="hljs-number">0x100b01fe4</span> &lt;+<span class="hljs-number">80</span>&gt;:  <span class="hljs-keyword">b</span>      <span class="hljs-number">0x100b02034</span>  <span class="hljs-comment">; &lt;+160&gt; at main.m:56:1</span><br>    <span class="hljs-number">0x100b01fe8</span> &lt;+<span class="hljs-number">84</span>&gt;:  <span class="hljs-keyword">adrp</span>   x0, <span class="hljs-number">1</span><br>    <span class="hljs-number">0x100b01fec</span> &lt;+<span class="hljs-number">88</span>&gt;:  <span class="hljs-keyword">add</span>    x0, x0, <span class="hljs-number">#0x664</span>   <span class="hljs-comment">; =0x664 </span><br>    <span class="hljs-number">0x100b01ff0</span> &lt;+<span class="hljs-number">92</span>&gt;:  <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x100b0250c</span>  <span class="hljs-comment">; symbol stub for: printf</span><br>    <span class="hljs-number">0x100b01ff4</span> &lt;+<span class="hljs-number">96</span>&gt;:  <span class="hljs-keyword">b</span>      <span class="hljs-number">0x100b02034</span>  <span class="hljs-comment">; &lt;+160&gt; at main.m:56:1</span><br>    <span class="hljs-number">0x100b01ff8</span> &lt;+<span class="hljs-number">100</span>&gt;: <span class="hljs-keyword">adrp</span>   x0, <span class="hljs-number">1</span><br>    <span class="hljs-number">0x100b01ffc</span> &lt;+<span class="hljs-number">104</span>&gt;: <span class="hljs-keyword">add</span>    x0, x0, <span class="hljs-number">#0x666</span>   <span class="hljs-comment">; =0x666 </span><br>    <span class="hljs-number">0x100b02000</span> &lt;+<span class="hljs-number">108</span>&gt;: <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x100b0250c</span>  <span class="hljs-comment">; symbol stub for: printf</span><br>    <span class="hljs-number">0x100b02004</span> &lt;+<span class="hljs-number">112</span>&gt;: <span class="hljs-keyword">b</span>      <span class="hljs-number">0x100b02034</span>  <span class="hljs-comment">; &lt;+160&gt; at main.m:56:1</span><br>    <span class="hljs-number">0x100b02008</span> &lt;+<span class="hljs-number">116</span>&gt;: <span class="hljs-keyword">adrp</span>   x0, <span class="hljs-number">0</span><br>    <span class="hljs-number">0x100b0200c</span> &lt;+<span class="hljs-number">120</span>&gt;: <span class="hljs-keyword">add</span>    x0, x0, <span class="hljs-number">#0x669</span>   <span class="hljs-comment">; =0x669 </span><br>    <span class="hljs-number">0x100b02010</span> &lt;+<span class="hljs-number">124</span>&gt;: <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x100b0250c</span>  <span class="hljs-comment">; symbol stub for: printf</span><br>    <span class="hljs-number">0x100b02014</span> &lt;+<span class="hljs-number">128</span>&gt;: <span class="hljs-keyword">b</span>      <span class="hljs-number">0x100b02034</span>  <span class="hljs-comment">; &lt;+160&gt; at main.m:56:1</span><br>    <span class="hljs-number">0x100b02018</span> &lt;+<span class="hljs-number">132</span>&gt;: <span class="hljs-keyword">adrp</span>   x0, <span class="hljs-number">0</span><br>    <span class="hljs-number">0x100b0201c</span> &lt;+<span class="hljs-number">136</span>&gt;: <span class="hljs-keyword">add</span>    x0, x0, <span class="hljs-number">#0x66b</span>   <span class="hljs-comment">; =0x66b </span><br>    <span class="hljs-number">0x100b02020</span> &lt;+<span class="hljs-number">140</span>&gt;: <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x100b0250c</span>  <span class="hljs-comment">; symbol stub for: printf</span><br>    <span class="hljs-number">0x100b02024</span> &lt;+<span class="hljs-number">144</span>&gt;: <span class="hljs-keyword">b</span>      <span class="hljs-number">0x100b02034</span>  <span class="hljs-comment">; &lt;+160&gt; at main.m:56:1</span><br>    <span class="hljs-number">0x100b02028</span> &lt;+<span class="hljs-number">148</span>&gt;: <span class="hljs-keyword">adrp</span>   x0, <span class="hljs-number">0</span><br>    <span class="hljs-number">0x100b0202c</span> &lt;+<span class="hljs-number">152</span>&gt;: <span class="hljs-keyword">add</span>    x0, x0, <span class="hljs-number">#0x66d</span>   <span class="hljs-comment">; =0x66d </span><br>    <span class="hljs-number">0x100b02030</span> &lt;+<span class="hljs-number">156</span>&gt;: <span class="hljs-keyword">bl</span>     <span class="hljs-number">0x100b0250c</span>  <span class="hljs-comment">; symbol stub for: printf</span><br>    <span class="hljs-number">0x100b02034</span> &lt;+<span class="hljs-number">160</span>&gt;: ldp    x29, x30, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span>]<br>    <span class="hljs-number">0x100b02038</span> &lt;+<span class="hljs-number">164</span>&gt;: <span class="hljs-keyword">add</span>    <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x20</span>    <span class="hljs-comment">; =0x20 </span><br>    <span class="hljs-number">0x100b0203c</span> &lt;+<span class="hljs-number">168</span>&gt;: ret     <br></code></pre></td></tr></table></figure></p><ol><li>第 6-7 行表示让 w8 和 <code>0x2</code> 相减，结果存入 w8 并影响 cpsr 寄存器。w8 保存的是形参 10，与 case 最小值 2 相减，结果存入 x9。计这个差值为 D1</li><li>第 8 - 11 行，首先通过 <code>ubfx   x9, x9, #0, #32</code> 清空 x9 高 32 位，只保留低 32 位的值，这里即是 D1，让 D1 与case 的最大最小差值（此处为 <code>0xa</code>，计这个差值为 D2）比较，如果最终无符号大于，表明 D1 跨越的范围大于 case 的最大最小值，说明不可能匹配成功，直接跳转到 default 分支或 switch 语句块的下一行执行，此处形参传入的是 10，在 case 最大值和最小值之间，所以会进入 switch 特有的查表跳转流程</li><li>第 12 - 17 行，先通过 page 偏移找到一个地址存入 x8，然后将之前存到栈区的只保留低 32 位的值放入 x11，后面的 <code>ldrsw  x10, [x8, x11, lsl #2]</code> 表示将 x11 左移两位，再加上 x8，把结果作为地址寻址，将得到的值存入 x10，执行完毕后，x10 的值为 <code>0xffffffffffffffe8</code>，看起来像是一个负数，去掉最高位逐位取反后加 1，为 -24。x8 保存的是一个起始地址，把偏移量了 -24 后的地址放入 x9 中，接下来 <code>br</code> 语句以 x9 里面的值作为地址跳转。相比较 <code>if-else</code> ，这里只需要这一次跳转即可，无需逐个比较 case 的值</li><li>传入的 value 经过 x8 加上一个偏移量后，就可以得到真正要执行的地址。偏移量是传入的 value 决定的，那么 x8 处是什么呢？查看 <code>0x0000000100b02040</code> 处的内存数据，可以看到类似的负数有 11 个， case 最大值和最小值之差 10，再加上一个 default case 刚好就是 11。这个偏移值数组需要占用内存空间，case 分支差值跨越越大耗费的内存空间也大，编译器会决定 switch 编译后的汇编指令是查表跳转还是 <code>if-else</code> 形式的逐个 <code>cmp</code>+<code>b</code>，<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm">(lldb) x/<span class="hljs-number">16</span> <span class="hljs-number">0x0000000100b02040</span><br><span class="hljs-number">0x100b02040</span>: <span class="hljs-number">0xffffff98</span> <span class="hljs-number">0xffffffe8</span> <span class="hljs-number">0xffffffa8</span> <span class="hljs-number">0xffffffe8</span><br><span class="hljs-number">0x100b02050</span>: <span class="hljs-number">0xffffffe8</span> <span class="hljs-number">0xffffffc8</span> <span class="hljs-number">0xffffffd8</span> <span class="hljs-number">0xffffffe8</span><br><span class="hljs-number">0x100b02060</span>: <span class="hljs-number">0xffffffe8</span> <span class="hljs-number">0xffffffe8</span> <span class="hljs-number">0xffffffb8</span> <span class="hljs-number">0xd10083ff</span><br><span class="hljs-number">0x100b02070</span>: <span class="hljs-number">0xa9017bfd</span> <span class="hljs-number">0x910043fd</span> <span class="hljs-number">0xb81fc3a0</span> <span class="hljs-number">0xb85fc3a8</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>case 分支少于 4 个时，<code>switch</code> 的效率和 <code>if-else</code> 语句一样</li><li>case 分支多余 4 个且分支最大值和最小值差值合理（ arm64 时是少于等于 50 个，可能和具体的架构与编译器版本、代码优化级别有关）时，会有一个内存表来辅助计算跳转到分支的地址，得到地址后直接跳转，不在逐个比较，效率最高</li><li>case 分支最大值和最小值差值太大时，<code>switch</code> 会退化成 <code>if-else</code> 语句</li><li>对效率要求敏感的代码，可将代码结构优化成符合 <code>switch</code> 的要求，提高代码执行效率</li></ul><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>Objective-C 里面少不了和各种各样的指针打交道，如果从底层汇编角度来看，指针到底代表什么呢？对指针类型做偏移操作，偏移值如何计算？</p><p>在 Objective-C 中，对象是指一块能存储数据并具有某种类型的内存空间，一个对象 a 它有值和地址 &amp;a，运行程序时，计算机会为该对象分配存储空间，存储该对象的值，我们通过该对象的地址，来访问存储空间中的值。指针 p 也是对象，它同样有地址 &amp;p 和存储的值 p，只不过，p 存储的数据类型是数据的地址。如果我们要以 p 中存储的数据为地址，来访问对象的值，则要在 p 前加解引用操作符 <code>*</code>，即 <code>*p</code>。</p><h2 id="指针偏移"><a href="#指针偏移" class="headerlink" title="指针偏移"></a>指针偏移</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> *a;<br>a = (<span class="hljs-type">int</span> *)<span class="hljs-number">100</span>;<br>a = a + <span class="hljs-number">3</span>; <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">👆 指针的加减和它指向的数据的宽度有关，加上 3 个 4 字节后，a 的值为 112</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> *b;<br>b = (<span class="hljs-type">int</span> *)<span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> x = b - a;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">👆  a 和 b 之间间隔 88 字节，转换成 int 宽度为单位后 x 的值为 22</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">int</span> p[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> val = *p + <span class="hljs-number">3</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val = %d&quot;</span>,val);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">👆 数组连续存放，p 的宽度为 4，偏移 3 个宽度后的值为 4</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> **a;  <br>a = (<span class="hljs-type">int</span> **)<span class="hljs-number">100</span>;<br>a = a + <span class="hljs-number">3</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">👆 a 是指针类型了，宽度为 8，所以加 3 后，a 的值为 124</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">char</span> ** p1;<br>p1 = (<span class="hljs-type">char</span> **)<span class="hljs-number">100</span>;<br><span class="hljs-type">char</span> c = *(p1 + <span class="hljs-number">2</span>) + <span class="hljs-number">2</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">👆 p1 是 char ** 类型，是指针，宽度为 8，(p1 + 2) 后，p1 为 116。</span><br><span class="hljs-comment">*(p1 + 2) 解引用，得到指向 char 类型的指针，宽度为 1，p1 为 118。</span><br><span class="hljs-comment">这里的解引用可能会 crash，因为 p1 指向的区域并不合法</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">int</span> p1[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,<br>    &#123;<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;&#125;;<br><span class="hljs-type">int</span> **pp = p1;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">👆 pp 可以看做存放了三个元素的数组，数组中的每个元素是一维数组（指针）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> *temp1 = pp + <span class="hljs-number">2</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">👆 pp 指向指针，宽度为 8，加 2 后相当于偏移了两个指针的宽度，</span><br><span class="hljs-comment">指向了 &#123;9,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125; 这一行首位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> *temp2 = *pp + <span class="hljs-number">2</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">👆 *pp 解引用后，得到指向了指针（数组）类型，加 2，相当于偏移了两个 int 宽度，</span><br><span class="hljs-comment">指向了二维数组第一行的 3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>底层</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向学习笔记 - ARM64 汇编入门</title>
    <link href="/posts/8f23431c.html"/>
    <url>/posts/8f23431c.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>开个坑，记录一下系统性地学习 iOS 逆向的过程，从汇编入门开始。在这之前对汇编基础和逆向有一些了解，所以文章只当做查缺补漏，记录本人认为有意思的点——虽然这个“缺”和“漏”有点大😁</p><p>以下汇编笔记基于 ARM64 整理，可能不完全适用于基于其他架构</p></blockquote><p>我们写的文本代码，被编译器和链接器按照一定的格式转变成二进制字节流文件，在被操作系统加载执行时，文件又以一条条机器码的形式被映射到内存中，这些机器码有的可能只是一个数据集，也有的可能是一条汇编指令。对于 CPU 来说这些都不重要，它只关心往数据的读和写</p><h1 id="CPU-和总线"><a href="#CPU-和总线" class="headerlink" title="CPU 和总线"></a>CPU 和总线</h1><p>CPU 上密密麻麻的针脚就是和总线相连的，总线是若干“根”导线的集合，按照功能可以分为地址总线、数据总线和控制总线。计算机（广义的）系统里面的组件由总线连接</p><ul><li><p>地址总线</p><p>  内存是按照存储单元划分的，每一个存储单元的大小为 1 B，并且都有编号，即地址，CPU 可以通过地址信息实现对存储单元的定位（寻址），完成内存的读和写操作，这个寻址过程是通过地址总线完成的。如果某一个 CPU 架构有 10 根地址总线，那么它可以寻址的范围为 $2^{10}$ ，可以说这个 CPU 的地址总线的宽度为 10。寻址过程可以类比为 10 个手指头按在键盘上的情形，规定每个指头按下去为 1，抬起为 0，某一次“打字”指头定位到不同的键帽时，就是一次寻址</p><p>  ARM64 环境下，实例对象有一个用来指向类对象的指针 <code>isa</code> ，它的值仅有 33 个 bit 用来保存真正的地址，说明 AMR64 的寻找宽度被 iOS 限制为了 33 ，<del>这种模式所能支持的最大内存容量为：$2^{33}$ = $2^{23}$K = $2^{13}$M = $2^3$ G = 8G，目前 iPhone 12 Pro 的最大内存达到了 6GB，随着内存越做越大的趋势，未来 iPhone 的内存要突破 8GB 的限制，<code>isa</code> 的这套策略是不是要修改呢？</del><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="这里把 CPU 寻找理想化了。33 位的寻找，在 CPU 视角，最大可以查找 $2^{33}$ 个内存单元，每一次查找的对象都是一个字节，所以可以查找的最大内存地址是 $2^{33}$ = 8G Byte，但 CPU 寻址讲究内存对齐，按照 8 Byte 对齐的话，真实可支持的内存空间就是 8*8GB。所以 isa 的这一套还是很稳。">[1]</span></a></sup></p></li><li><p>数据总线</p><p>  CPU 与内存或其他可读写组件之前的数据传送是通过数据总线完成的，数据总线的宽度决定了 CPU 的数据吞吐效率，8 根数据总线一次可以传送 8 位二进制数据，即一个字节</p></li><li><p>控制总线</p><p>  CPU 对外部组件的控制是通过控制总线来完成的，控制总线的宽度决定了 CPU 对系统中其他组件的控制能力</p></li></ul><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>寄存器是 CPU 内部可以高速读写的部件，ARM64 CPU 中一共有 34 个，包括 31 个通用寄存器和 3 个程序状态辅助寄存器。对于通用寄存器，如果使用 <code>x0 - x30</code> 即表示访问一个 64 位数，如果使用 <code>w0 - w30</code> 即表示访问这些寄存器的低 32 位。另外还有三个特殊的寄存器：</p><ul><li><code>SP</code>：表示栈顶指针寄存器，里面的值始终指向当前栈帧的顶部</li><li><code>PC</code>：程序计数器，它总是指向要执行的下一条指令。它指向哪里，哪里就会被执行。一段机器码一旦被送入 PC 寄存器，就会被当做汇编指令执行。在 ARM64 中不允许直接更改 PC 寄存器的值</li><li><code>CPSR</code>：程序状态寄存器(current program status register)，包含条件标志位、中断禁止位、当前处理器模式标志和其他的一些控制状态位</li></ul><h1 id="初始汇编"><a href="#初始汇编" class="headerlink" title="初始汇编"></a>初始汇编</h1><h3 id="Xcode-汇编环境"><a href="#Xcode-汇编环境" class="headerlink" title="Xcode 汇编环境"></a>Xcode 汇编环境</h3><p>根据 Xcode 默认模板创建一个 iOS App 工程，在 <code>-[ViewController viewDidLoad]</code> 添加断点，设置 <code>Always Show Disassembly</code>，勾选 <code>All Variables,Registers,Globals and Statics</code>，在 ARM64 真机上运行起来后，进入断点：<br><img src="8f23431c/1.png" alt=""></p><ol><li>左侧的箭头 <code>-&gt;</code> 表示即将执行的指令所在地址，也是 pc 的值</li><li>后面一列十六进制数表示编译生成后的二进制代码段映射到虚拟内存后的地址。地址值 = __PAGEZERO.size + ASLR + File.offset</li><li>右边的尖括号 &lt;+$2^{x}$&gt; 表示指令的偏移值，数值表示十进制，字节为单位，可以发现 ARM64 的一条指令大小为 4B</li><li>最后面的就是汇编指令了，从机器码根据一定的规则翻译而来，翻译规则可以查询 ARM 手册</li><li>Debug Area 勾选了 <code>All Variables,Registers,Globals and Statics</code>，所以可以看到寄存器的值。展开 <code>General Purpose Registers</code> 发现 pc 寄存器的值就是箭头指向的值</li></ol><h3 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h3><p>下面将编写一个小程序，通过函数嵌套调用来演示 lr 和 pc 如何相互配合实现栈平衡。在这之前先回顾一下关键的指令和相关寄存器。</p><ul><li>基础指令：<code>str</code>/<code>stp</code>/<code>ldr</code>/<code>ldp</code>，用于寄存器和内存之间的值传递<ul><li><code>str    x8, [x9]</code>：中括号表示寻址，<code>str</code> 表示将寄存器数据放入到内存，这句话的意思是把 x8 中的数据存到 x9 所表示的内存地址中</li><li><code>stp    x29, x30, [sp, #0x50]</code>：<code>stp</code> 同 <code>str</code> ，但是可以同时操作两个寄存器，这句话表示把 x29 和 x30 的值，依次存入 sp 指向的位置，然后执行 sp = sp + #0x50。按照 iOS 中栈生长方向，x29 在高地址， x30 在低地址</li><li><code>ldr    x1, [x8]</code>：将内存数据放入寄存器</li><li><code>ldp    x29, x30, [sp, #0x10]</code>：同<code>ldr</code>，但是可以同时操作两个寄存器，表示从 sp 的位置，依次读取两个 8 字节数据，存入 x29 和 x30</li><li><code>ret</code>：return 指令，当前子程序结束后，返回到调用所在行的下一行，其实就是返回到 lr 寄存器记录的地址</li><li><code>bl label</code>：跳转到 label 处执行，同时将下一个指令存入 lr </li><li><code>mov x1, x2</code>：将 x2 的值赋值给 x1，用于寄存器之前传值</li></ul></li><li>关键寄存器 lr：也叫 x30，约定让它来存放函数跳转前的下一条指令的地址，以便在子函数执行完毕后能回到调用它的地方</li></ul><p>汇编程序：有两个函数，函数 A 接收两个形参，调用函数 B 完成相减计算，在 A 中对 B 返回的结果乘以 2 ，最后将结果回传给 A 的调用者。</p><ol><li>在 Xcode 工程添加 asm.s 文件，写入以下内容<figure class="highlight armasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">.text</span><br><span class="hljs-symbol">.global</span> _A, _B<br><br><span class="hljs-symbol">_A:</span><br>    <span class="hljs-keyword">sub</span> <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span><br>    <span class="hljs-keyword">str</span> x30, [<span class="hljs-built_in">sp</span>]<br>    <span class="hljs-keyword">bl</span> _B<br>    <span class="hljs-keyword">mov</span> x1, <span class="hljs-number">#0x02</span><br>    <span class="hljs-keyword">mul</span> x0, x0, x1<br>    <span class="hljs-keyword">ldr</span> x30, [<span class="hljs-built_in">sp</span>]<br>    <span class="hljs-keyword">add</span> <span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#0x10</span><br>    ret<br><span class="hljs-symbol">_B:</span><br>    <span class="hljs-keyword">add</span> x0, x1, x0<br>    ret<br></code></pre></td></tr></table></figure></li><li>在 <code>ViewController.m</code> 中添加如下代码。执行后发现能得到预期结果<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">int</span> B(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b);<br><span class="hljs-keyword">int</span> A(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b);<br>- (<span class="hljs-keyword">void</span>)viewDidLoad <br>&#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br>    <span class="hljs-keyword">int</span> a = A(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;结果:%@&quot;</span>,@(a));<br>    <span class="hljs-comment">// 输出： 结果:10</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>在 <code>int a = A(2,3);</code> 添加断点，运行后如下图，注意 <code>bl</code> 的下一条指令地址为<code>0x102719d84</code>，理论上，此处 <code>bl</code> 语句执行后，lr 寄存器的值就会被设置成 <code>0x102719d84</code><br><img src="8f23431c/2.png" alt=""></li><li>按住 Control 键，进入 A 函数，发现 lr 寄存器被正确设置了，这是编译器保证的。现在完全进入了自定义的程序流程，需要自己去关注这些寄存器的变化了。lr 寄存器只有一个，现在 A 中预期需要 <code>bl _B</code>，lr 将被默认设置为<code>0x102719df0</code>，如果不对原 lr 寄存器的值进行保护，那么 B 执行完毕后，lr 寄存器保存的仍然是<code>0x102719df0</code>，A 执行到<code>ret</code> 语句时，会跳转到 lr 处，这样将导致 A 中出现死循环。所以子程序 A 一开始，需要开辟一个栈空间，用来保存它自己的返回地址。<br><img src="8f23431c/3.png" alt=""></li><li><code>sub sp, sp, #0x10</code> 表示开辟一个 16 字节大小的栈空间（对栈的操作是以 16 字节对齐的），然后 sp 指向栈顶。iOS 的栈空间是从高地址向低地址生长，所以减操作即表示扩大栈空间。<code>str    x30, [sp]</code>表示将 x30 的值存入 sp 指向的空间，sp 指向了栈顶，所以 x30 的存储在 [sp - 0x10, sp] 范围内，即往高地址写</li><li>保护好了 x30 就可以跳转到 B 了，跳转后，lr 被赋值为<code>0x102719df0</code>。A 被调用时两个形参分别放到了 x0 和 x1 中，跳转到 B 后，可以直接对 x0 和 x1 做加法操作，将结果存到 x0 用作返回值，接下来执行<code>ret</code>，跳转到<code>0x102719df0</code>返回到 A<br><img src="8f23431c/4.png" alt=""><br><img src="8f23431c/5.png" alt=""></li><li><code>mov    x1, #0x2</code>将一个立即数 0x2 存入 x1 中，后面的 <code>mul</code> 表示乘法，并将结果放入了 x0 中</li><li>现在返回值已经放到了 x0，是时候返回到调用 A 的地方了。<code>ldr    x30, [sp]</code>表示从 sp 指向的地方读取数据存入 x30，此处将原先保存的回调地址给回了 x30。此处肯定是往高地址读，因为低地址不属于当前的栈帧，不能随便读</li><li><code>add    sp, sp, #0x10</code>退栈，还回刚刚申请的 16 个字节空间，此时 lr 的寄存器应该是<code>0x102719d84</code>，执行<code>ret</code>后，就可以返回到调用 A 的地方了<br><img src="8f23431c/6.png" alt=""></li><li>开辟栈空间存入 lr、fp 和取出 lr、fp 归还栈空间这两步操作非常套路化，所以有了简化指令，就是在 Xcode 高级语言编译成的汇编代码的界面可以看到的 <code>stp    x29, x30, [sp, #0x40]</code> 和 <code>ldp    x29, x30, [sp, #0x40]</code></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ol><li>之前在看反汇编代码时，看到形如 <code>stp    x29, x30, [sp, #0x40]</code> 和 <code>ldp    x29, x30, [sp, #0x40]</code> 这类指令时非常困惑，而且非常有规律，分别出现在一个子程序的开始和结尾处，自己也查找了一些大佬的博客，有说到是对栈帧进行保护，不过总感觉都说得比较抽象，不在自己的认知范围内，也可能是大佬觉得这是很显而易见的事情懒得多费口舌吧。。。总之还是得自己动手去调试一遍调用流程，才能有更深入的理解</li><li>上述汇编程序，和实现了同样功能的高级语言反汇编出来的有些不一样，这中间涉及到编译器优化，但具体原则不是很清楚</li><li>从理论上说，内存空间是连续的，一个栈结构需要一个 top 指针（sp），当然也需要一个 bottom 指针（fp），而且随着嵌套的深入，每个栈帧都有自己的栈空间，或大或小，必然要知道一个栈帧的实际空间大小。不过目前还没有遇到什么场景要依据 fp 才能进行的，所以对于为什么要保护 fp 理解得还不是很深</li><li>学习汇编还是需要多看代码，尤其是需要对照高级语言来看编译生成的汇编代码</li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这里把 CPU 寻找理想化了。33 位的寻找，在 CPU 视角，最大可以查找 $2^{33}$ 个内存单元，每一次查找的对象都是一个字节，所以可以查找的最大内存地址是 $2^{33}$ = 8G Byte，但 CPU 寻址讲究内存对齐，按照 8 Byte 对齐的话，真实可支持的内存空间就是 8*8GB。所以 <code>isa</code> 的这一套还是很稳。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>底层</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法 - 下三角填充（ Swift 学习 &amp; 过渡设计）</title>
    <link href="/posts/f369e18d.html"/>
    <url>/posts/f369e18d.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近在学习 Swift，正好拿算法入手，以期在实际编码过程中，能有更多的对 Swift 编程思想的体会。另外，这个月快过完了，又得交公粮了，就用“下三角矩阵填充的 Swift 实现”对付一下吧🥴</p></blockquote><p>矩阵下三角填充，在矩阵中按照自然数递增填充数，使得矩阵中下三角被填满。如图<br><img src="f369e18d/1.png" alt="原理图"><br>下三角填充算不上什么难的算法，但本着学习 Swift 的目的，所以下面过渡设计了一番，实现了通用的任意方向的三角的填充算法。</p><ul><li><p>定义矩阵和坐标，新增根据填充方向获取下一个待填充点坐标的函数</p><figure class="highlight swift"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">typealias</span> <span class="hljs-type">Matrix</span> <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]]<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Coordinate</span> &#123;<br>    <span class="hljs-keyword">var</span> x:<span class="hljs-type">Int</span>!, y:<span class="hljs-type">Int</span>!<br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">x</span>:<span class="hljs-type">Int</span>, <span class="hljs-params">y</span>:<span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.x <span class="hljs-operator">=</span> x; <span class="hljs-keyword">self</span>.y <span class="hljs-operator">=</span> y<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">direction</span>:<span class="hljs-type">Direction</span>) -&gt; <span class="hljs-type">Coordinate</span> &#123;<br>        <span class="hljs-keyword">switch</span> direction &#123;<br>            <span class="hljs-keyword">case</span> .up:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.x<span class="hljs-operator">-</span><span class="hljs-number">1</span>, y: <span class="hljs-keyword">self</span>.y)<br>            <span class="hljs-keyword">case</span> .down_left:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.x <span class="hljs-operator">+</span> <span class="hljs-number">1</span>, y: <span class="hljs-keyword">self</span>.y <span class="hljs-operator">-</span> <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">case</span> .right:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.x, y: <span class="hljs-keyword">self</span>.y <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">case</span> .down:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.x <span class="hljs-operator">+</span> <span class="hljs-number">1</span>, y: <span class="hljs-keyword">self</span>.y)<br>            <span class="hljs-keyword">case</span> .down_right:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.x <span class="hljs-operator">+</span> <span class="hljs-number">1</span>, y: <span class="hljs-keyword">self</span>.y <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">case</span> .left:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.x, y: <span class="hljs-keyword">self</span>.y <span class="hljs-operator">-</span> <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">case</span> .up_left:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.x <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, y: <span class="hljs-keyword">self</span>.y <span class="hljs-operator">-</span> <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">case</span> .up_right:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.x <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, y: <span class="hljs-keyword">self</span>.y <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义矩阵填充时的开始位置，和根据位置翻译成具体坐标的函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">Matrix</span> &#123;<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">InitPosition</span> &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-type">UpLeft</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-type">UpRight</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-type">DownLeft</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-type">DownRight</span><br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">translateCoor</span>(<span class="hljs-params">from</span> <span class="hljs-params">position</span>:<span class="hljs-type">InitPosition</span>) -&gt; <span class="hljs-type">Coordinate</span> &#123;<br>        <span class="hljs-keyword">switch</span> position &#123;<br>            <span class="hljs-keyword">case</span> .<span class="hljs-type">UpLeft</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">case</span> .<span class="hljs-type">UpRight</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-number">0</span>, y: <span class="hljs-keyword">self</span>[<span class="hljs-number">0</span>].count <span class="hljs-operator">-</span> <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">case</span> .<span class="hljs-type">DownLeft</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, y: <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">case</span> .<span class="hljs-type">DownRight</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-type">Coordinate</span>(x: <span class="hljs-keyword">self</span>.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, y: <span class="hljs-keyword">self</span>[<span class="hljs-number">0</span>].count <span class="hljs-operator">-</span> <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">valueTest</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">coordinate</span>:<span class="hljs-type">Coordinate</span>) <span class="hljs-keyword">throws</span> &#123;<br>        <span class="hljs-keyword">guard</span> coordinate.y <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">self</span>.count <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-type">MatrixError</span>.<span class="hljs-type">UpperOutRangeY</span><br>        &#125;<br>        <span class="hljs-keyword">guard</span> coordinate.y <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-type">MatrixError</span>.<span class="hljs-type">FloorOutRangeY</span><br>        &#125;<br>        <span class="hljs-keyword">guard</span> coordinate.x <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">self</span>[<span class="hljs-number">0</span>].count <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-type">MatrixError</span>.<span class="hljs-type">UpperOutRangeX</span><br>        &#125;<br>        <span class="hljs-keyword">guard</span> coordinate.x <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-type">MatrixError</span>.<span class="hljs-type">FloorOutRangeX</span><br>        &#125;<br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">self</span>[coordinate.x][coordinate.y] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-type">MatrixError</span>.<span class="hljs-type">InvalidItemValue</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>面向错误（异常）编程，定义通用的错误枚举<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">MatrixError</span>: <span class="hljs-title class_">Error</span> &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">TooShortLength</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">InvalidItemValue</span><br>    <br>    <span class="hljs-keyword">case</span> <span class="hljs-type">UpperOutRangeY</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">UpperOutRangeX</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">FloorOutRangeY</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">FloorOutRangeX</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>定义填充方向。根据初始规定的填充方向和填充起始坐标，决定需要转向时，应该是朝哪个方向转向<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Direction</span> &#123;<br>    <span class="hljs-keyword">case</span> up<br>    <span class="hljs-keyword">case</span> down<br>    <span class="hljs-keyword">case</span> down_left<br>    <span class="hljs-keyword">case</span> up_left<br>    <span class="hljs-keyword">case</span> right<br>    <span class="hljs-keyword">case</span> left<br>    <span class="hljs-keyword">case</span> down_right<br>    <span class="hljs-keyword">case</span> up_right<br>    <br>    <span class="hljs-keyword">mutating</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">initDirection</span>: <span class="hljs-type">Direction</span>, <span class="hljs-params">initPosition</span>: <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>) &#123;<br>        <span class="hljs-keyword">switch</span> (initDirection, initPosition) &#123;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.up, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">DownLeft</span>):<br>                <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>                <span class="hljs-keyword">case</span> .up: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down_right;<span class="hljs-keyword">case</span> .down_right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .left;<span class="hljs-keyword">case</span> .left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up<br>                    <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>                &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.up, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">DownRight</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .up: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down_left;<span class="hljs-keyword">case</span> .down_left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .right;<span class="hljs-keyword">case</span> .right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.down, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">UpRight</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .down: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .left;<span class="hljs-keyword">case</span> .left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up_right;<span class="hljs-keyword">case</span> .up_right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.down, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">UpLeft</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .down: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .right;<span class="hljs-keyword">case</span> .right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up_left;<span class="hljs-keyword">case</span> .up_left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.left, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">UpRight</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down_right;<span class="hljs-keyword">case</span> .down_right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up;<span class="hljs-keyword">case</span> .up: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .left<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.left, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">DownRight</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up;<span class="hljs-keyword">case</span> .up: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down_right;<span class="hljs-keyword">case</span> .down_right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .left<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.right, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">DownLeft</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up;<span class="hljs-keyword">case</span> .up: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down_left;<span class="hljs-keyword">case</span> .down_left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .right<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.right, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">UpLeft</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down_left;<span class="hljs-keyword">case</span> .down_left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up;<span class="hljs-keyword">case</span> .up: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .right<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.up_left, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">DownRight</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .up_left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down;<span class="hljs-keyword">case</span> .down: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .right;<span class="hljs-keyword">case</span> .right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up_left<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.up_right, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">DownLeft</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .up_right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down;<span class="hljs-keyword">case</span> .down: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .left;<span class="hljs-keyword">case</span> .left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up_right<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.down_right, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">UpLeft</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .down_right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .left;<span class="hljs-keyword">case</span> .left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up;<span class="hljs-keyword">case</span> .up: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down_right<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">case</span> (<span class="hljs-type">Direction</span>.down_left, <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>.<span class="hljs-type">UpRight</span>):<br>            <span class="hljs-keyword">switch</span> <span class="hljs-keyword">self</span> &#123;<br>            <span class="hljs-keyword">case</span> .down_left: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .right;<span class="hljs-keyword">case</span> .right: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .up;<span class="hljs-keyword">case</span> .up: <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> .down_left<br>                <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span><br>            &#125;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>定义 <code>TriangleMatrix</code> 对象<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TriangleMatrix</span> &#123;<br>    <span class="hljs-keyword">var</span> matrix:<span class="hljs-type">Matrix</span>!<br>    <span class="hljs-keyword">var</span> length:<span class="hljs-type">Int</span>!<br>    <span class="hljs-keyword">var</span> initPosition: <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span>?<br>    <span class="hljs-keyword">var</span> initDirection: <span class="hljs-type">Direction</span>?<br>    <span class="hljs-comment">// 记录最大值，决定递归的停止条件</span><br>    <span class="hljs-keyword">var</span> maxVal:<span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">get</span> &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">self</span>.length <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<span class="hljs-operator">*</span><span class="hljs-keyword">self</span>.length <span class="hljs-operator">/</span> <span class="hljs-number">2</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">self</span>.startValue <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> startValue:<span class="hljs-type">Int</span>!<br>    <span class="hljs-comment">// 初始化方法，需要每个维度的长度，和起始填充数的值</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">length</span>: <span class="hljs-type">Int</span>, <span class="hljs-params">startValue</span>:<span class="hljs-type">Int</span>) <span class="hljs-keyword">throws</span> &#123;<br>        <span class="hljs-keyword">guard</span> length <span class="hljs-operator">&gt;=</span> <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-type">MatrixError</span>.<span class="hljs-type">TooShortLength</span><br>        &#125;<br>        <span class="hljs-keyword">self</span>.startValue <span class="hljs-operator">=</span> startValue<br>        <span class="hljs-keyword">self</span>.length <span class="hljs-operator">=</span> length<br>        <span class="hljs-keyword">self</span>.matrix <span class="hljs-operator">=</span> <span class="hljs-type">TriangleMatrix</span>.dim(length, <span class="hljs-type">TriangleMatrix</span>.dim(length, <span class="hljs-number">0</span>))<br>    &#125;<br>    <span class="hljs-comment">// 重置，方便进行下一次填充</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">refresh</span>() &#123;<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> <span class="hljs-keyword">self</span>.matrix.count &#123;<br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> <span class="hljs-keyword">self</span>.matrix[x].count &#123;<br>                <span class="hljs-keyword">self</span>.matrix[x][y] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">self</span>.startValue <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">print</span>() &#123;<br>        <span class="hljs-keyword">for</span> array <span class="hljs-keyword">in</span> matrix &#123;<br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> array &#123;<br>                <span class="hljs-keyword">let</span> str <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%4d&quot;</span>, item)<br>                <span class="hljs-type">Swift</span>.print(str, terminator:<span class="hljs-string">&quot;&quot;</span>)<br>            &#125;<br>            <span class="hljs-type">Swift</span>.print(<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>, terminator:<span class="hljs-string">&quot;&quot;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 快捷生成多维数组的方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">dim</span>&lt;<span class="hljs-type">T</span>&gt;(<span class="hljs-keyword">_</span> <span class="hljs-params">count</span>:<span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">value</span>:<span class="hljs-type">T</span>) -&gt; [<span class="hljs-type">T</span>] &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-type">T</span>](repeating: value, count: count)<br>    &#125;<br>    <span class="hljs-comment">// 递归填充，面向异常编程</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">input</span>(<span class="hljs-params">start</span>:<span class="hljs-keyword">inout</span> <span class="hljs-type">Coordinate</span>, <span class="hljs-params">value</span>:<span class="hljs-keyword">inout</span> <span class="hljs-type">Int</span>, <span class="hljs-params">direction</span>:<span class="hljs-keyword">inout</span> <span class="hljs-type">Direction</span>) &#123;<br>        <span class="hljs-comment">// 尝试计算下一个位置，根据位置是否合法判断是否需要转向</span><br>        <span class="hljs-keyword">var</span> newCoordinate <span class="hljs-operator">=</span> start.next(direction: direction)<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">try</span> <span class="hljs-keyword">self</span>.matrix.valueTest(newCoordinate)<br>        &#125; <span class="hljs-keyword">catch</span> <span class="hljs-keyword">is</span> <span class="hljs-type">MatrixError</span> &#123;<br>            direction.next(initDirection: <span class="hljs-keyword">self</span>.initDirection<span class="hljs-operator">!</span>, initPosition: <span class="hljs-keyword">self</span>.initPosition<span class="hljs-operator">!</span>)<br>            newCoordinate <span class="hljs-operator">=</span> start.next(direction: direction)<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-type">Swift</span>.print(error)<br>        &#125;<br>        <br>        <span class="hljs-keyword">self</span>.matrix[start.x][start.y] <span class="hljs-operator">=</span> value<br>        <span class="hljs-keyword">if</span> value <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">self</span>.maxVal &#123;<br>            value <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            input(start: <span class="hljs-operator">&amp;</span>newCoordinate, value: <span class="hljs-operator">&amp;</span>value, direction: <span class="hljs-operator">&amp;</span>direction)<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 对外接口</span><br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">doInput</span>(<span class="hljs-params">direction</span>: <span class="hljs-type">Direction</span> <span class="hljs-operator">=</span> .right,<br>                 <span class="hljs-params">startPosition</span>: <span class="hljs-type">Matrix</span>.<span class="hljs-type">InitPosition</span> <span class="hljs-operator">=</span> .<span class="hljs-type">UpLeft</span>)&#123;<br>        <span class="hljs-keyword">var</span> startVal <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.startValue<span class="hljs-operator">!</span><br>        <br>        <span class="hljs-keyword">self</span>.initPosition <span class="hljs-operator">=</span> startPosition<br>        <span class="hljs-keyword">self</span>.initDirection <span class="hljs-operator">=</span> direction<br>        <span class="hljs-keyword">var</span> startCoor <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.matrix.translateCoor(from: startPosition)<br>        <span class="hljs-keyword">var</span> startDirect <span class="hljs-operator">=</span> direction<br>        <br>        input(start: <span class="hljs-operator">&amp;</span>startCoor, value: <span class="hljs-operator">&amp;</span>startVal, direction: <span class="hljs-operator">&amp;</span>startDirect)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>测试代码<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> matrix <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">TriangleMatrix</span>(length: <span class="hljs-number">10</span>, startValue: <span class="hljs-number">1</span>)<br>matrix.doInput()<br>matrix.print()<br><br>matrix.refresh()<br>matrix.doInput(direction: .up_left, startPosition: .<span class="hljs-type">DownRight</span>)<br>matrix.print()<br><br>matrix.refresh()<br>matrix.doInput(direction: .left, startPosition: .<span class="hljs-type">UpRight</span>)<br>matrix.print()<br><br>matrix.refresh()<br>matrix.doInput(direction: .down_left, startPosition: .<span class="hljs-type">UpRight</span>)<br>matrix.print()<br></code></pre></td></tr></table></figure></li><li>输出结果<br><img src="f369e18d/2.png" alt="输出"></li></ul><hr><p>后记：初识 Swift 时，诟病于她一页代码半页关键字，一旦开始去了解和学习这门语言时，那是“真香”！，不同于 OC，很多既有的编程模式在 Swift 中都可以用很少的代码去表达出来，让开发者有更多精力专注于具体业务而不是语言本身。在函数式语言中，Swift 和 Python 在提倡的简单、精练的理念上有很多共同点，对于我这样有一些 Python 基础的人，用起 Swift 有种相见恨晚的感觉。后面的 Swift 学习曲线可能比较陡峭，但就像瑞士军刀相比于普通小刀，虽然看起来更复杂了，但是可以做到的事情也增多了，期待！</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>Swift</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>Swift</tag>
      
      <tag>Swift 学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法 - 双链表 - LRU</title>
    <link href="/posts/a22b8e96.html"/>
    <url>/posts/a22b8e96.html</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://navimark.github.io/posts/f96c4030.html">上篇文章</a>中复习了双链表的基本操作，接下来使用双链表实现 LRU 算法</p></blockquote><p>LRU(Least Recently Used)：最近最少使用，优先淘汰最长时间未被使用的数据，是页面置换算法的一种，广泛地应用于计算机领域的各种基础组件中，如 iOS 中的内存管理和 <code>NSCache</code> 组件。</p><ul><li>实现的要点：</li></ul><ol><li>标记出最近使用和最久没有使用的数据。我们可以将最近使用的数据移动到链表头部，最久没有使用过的就会自动沉淀到链表尾部</li><li>快速访问位于链表中间的数据。要求能够快速访问到该数据前面的数据，如在链表中间位置删除数据，使用双链表能保证这种操作的时间复杂度为 O(1)</li><li>快速存取目标数据。使用哈希表来存放具体的数据，在删除、插入时维护链表和哈希表的数据一致性</li></ol><ul><li>节点的定义：<figure class="highlight swift"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCacheNode</span> &#123;<br>    <span class="hljs-keyword">var</span> time: <span class="hljs-type">TimeInterval</span>!<br>    <span class="hljs-keyword">var</span> next: <span class="hljs-type">LRUCacheNode</span>!<br>    <span class="hljs-keyword">var</span> previous: <span class="hljs-type">LRUCacheNode</span>!<br>    <span class="hljs-comment">// key 是沟通哈希表和双链表的桥梁</span><br>    <span class="hljs-keyword">var</span> key: <span class="hljs-type">String</span>!<br>    <span class="hljs-comment">// value 存放缓存的目标数据</span><br>    <span class="hljs-keyword">var</span> value: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span><br>    <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">key</span>:<span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">value</span>:<span class="hljs-keyword">Any</span>) &#123;<br>        <span class="hljs-keyword">self</span>.key <span class="hljs-operator">=</span> key<br>        <span class="hljs-keyword">self</span>.value <span class="hljs-operator">=</span> value<br>        <span class="hljs-keyword">self</span>.time <span class="hljs-operator">=</span> <span class="hljs-type">CACurrentMediaTime</span>()<br>        <span class="hljs-keyword">self</span>.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">self</span>.previous <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> description: <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.debugDesc()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>LRU 缓存容器：<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">LRUError</span>:<span class="hljs-title class_">Error</span> &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">NullParamOccur</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">ValueNotExist</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br>    <span class="hljs-keyword">let</span> maxCapacity:<span class="hljs-type">Int</span>!<br>    <span class="hljs-keyword">fileprivate</span> <span class="hljs-keyword">var</span> curCapacity:<span class="hljs-type">Int</span>!<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> container: <span class="hljs-type">Dictionary</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">LRUCacheNode</span>&gt;!<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> headNode: <span class="hljs-type">LRUCacheNode</span>!<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> tailNode: <span class="hljs-type">LRUCacheNode</span>!<br>    <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">maxCapacity</span>:<span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.maxCapacity <span class="hljs-operator">=</span> maxCapacity<br>        <span class="hljs-keyword">self</span>.curCapacity <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">self</span>.container <span class="hljs-operator">=</span> <span class="hljs-type">Dictionary</span>()<br>        <span class="hljs-keyword">self</span>.headNode <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">self</span>.tailNode <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> description: <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">var</span> work <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headNode<br>        <span class="hljs-keyword">while</span> work <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-type">Swift</span>.print(work<span class="hljs-operator">?</span>.debugDesc() <span class="hljs-keyword">as</span> <span class="hljs-keyword">Any</span>)<br>            work <span class="hljs-operator">=</span> work<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>(describing: <span class="hljs-keyword">self</span>.container)<br>    &#125;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">print</span>() &#123;<br>        <span class="hljs-type">Swift</span>.print(<span class="hljs-keyword">self</span>.description <span class="hljs-operator">+</span> <br>        <span class="hljs-string">&quot;<span class="hljs-subst">\n</span>capacity:<span class="hljs-subst">\(String(describing: <span class="hljs-keyword">self</span>.curCapacity))</span>&quot;</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>常用操作<ol><li>裁剪，发生在每次新数据被添加时 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">trim</span>()&#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.maxCapacity <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">self</span>.curCapacity &#123;<br>        <span class="hljs-keyword">self</span>.removeAtTail()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>按 <code>key</code> 移除数据，发生在数据被访问时，一旦数据被访问(如查询、添加、修改)，先删除，然后插入到头部 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">removeNode</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">node</span>:<span class="hljs-type">LRUCacheNode</span>?) <span class="hljs-keyword">throws</span>&#123;<br>    <span class="hljs-keyword">guard</span> node <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-type">LRUError</span>.<span class="hljs-type">NullParamOccur</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> node <span class="hljs-operator">===</span> <span class="hljs-keyword">self</span>.headNode &#123;<br>        <span class="hljs-keyword">self</span>.removeAtHead()<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> node <span class="hljs-operator">===</span> <span class="hljs-keyword">self</span>.tailNode &#123;<br>        <span class="hljs-keyword">self</span>.removeAtTail()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">self</span>.removeInMid(with: node<span class="hljs-operator">!</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">removeAtHead</span>() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.headNode <span class="hljs-operator">===</span> <span class="hljs-keyword">self</span>.tailNode &#123;<br>        <span class="hljs-keyword">self</span>.removeAll()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">self</span>.container[<span class="hljs-keyword">self</span>.headNode.key] <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">self</span>.headNode <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headNode.next<br>        <span class="hljs-keyword">self</span>.headNode.previous <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">self</span>.curCapacity <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">removeInMid</span>(<span class="hljs-params">with</span> <span class="hljs-params">node</span>:<span class="hljs-type">LRUCacheNode</span>) &#123;<br>    node.next.previous <span class="hljs-operator">=</span> node.previous<br>    node.previous.next <span class="hljs-operator">=</span> node.next<br>    <span class="hljs-keyword">self</span>.curCapacity <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">self</span>.container[node.key] <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">removeAtTail</span>() &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.headNode <span class="hljs-operator">===</span> <span class="hljs-keyword">self</span>.tailNode &#123;<br>        <span class="hljs-keyword">self</span>.removeAll()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">self</span>.container[<span class="hljs-keyword">self</span>.tailNode.key] <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">self</span>.tailNode <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.tailNode.previous<br>        <span class="hljs-keyword">self</span>.tailNode.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">self</span>.curCapacity <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>头部插入，发生在数据被访问时，一旦数据被访问(如查询、添加、修改)，先删除，然后插入到头部 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">insertAtHead</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">node</span>:<span class="hljs-type">LRUCacheNode</span>) &#123;<br>    <span class="hljs-keyword">self</span>.container[node.key] <span class="hljs-operator">=</span> node<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.headNode <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">self</span>.headNode <span class="hljs-operator">=</span> node<br>        <span class="hljs-keyword">self</span>.tailNode <span class="hljs-operator">=</span> node<br>        <span class="hljs-keyword">self</span>.curCapacity <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    node.next <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headNode<br>    <span class="hljs-keyword">self</span>.headNode<span class="hljs-operator">?</span>.previous <span class="hljs-operator">=</span> node<br>    <span class="hljs-keyword">self</span>.headNode <span class="hljs-operator">=</span> node<br>    node.previous <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">self</span>.curCapacity <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>移动到头部 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">private</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">bring2Head</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">node</span>:<span class="hljs-type">LRUCacheNode</span>) <span class="hljs-keyword">throws</span> &#123;<br>    <span class="hljs-keyword">if</span> node <span class="hljs-operator">===</span> <span class="hljs-keyword">self</span>.headNode &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">try</span> <span class="hljs-keyword">self</span>.removeNode(node)<br>    <span class="hljs-keyword">self</span>.insertAtHead(node)<br>&#125;<br></code></pre></td></tr></table></figure></li><li>新增和修改，当 <code>key</code> 相同，而 <code>value</code> 不同时将进行修改操作 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">value</span> <span class="hljs-params">val</span>: <span class="hljs-keyword">Any</span><span class="hljs-operator">?</span>, <span class="hljs-params">key</span>:<span class="hljs-type">String</span>) &#123;<br>    <span class="hljs-keyword">if</span> val <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">try</span> <span class="hljs-keyword">self</span>.remove(key: key)<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-type">Swift</span>.print(<span class="hljs-string">&quot;remove.error<span class="hljs-subst">\(error)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">let</span> oldNode <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.container[key]<br>    <span class="hljs-keyword">if</span> oldNode <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>        oldNode<span class="hljs-operator">!</span>.time <span class="hljs-operator">=</span> <span class="hljs-type">CACurrentMediaTime</span>()<br>        oldNode<span class="hljs-operator">!</span>.value <span class="hljs-operator">=</span> val<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">try</span> <span class="hljs-keyword">self</span>.bring2Head(oldNode<span class="hljs-operator">!</span>)<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-type">Swift</span>.print(<span class="hljs-string">&quot;remove.error<span class="hljs-subst">\(error)</span>&quot;</span>)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> <span class="hljs-type">LRUCacheNode</span>(key, val<span class="hljs-operator">!</span>)<br>        <span class="hljs-keyword">self</span>.container[key] <span class="hljs-operator">=</span> node<br>        <span class="hljs-keyword">self</span>.insertAtHead(node)<br>        <span class="hljs-keyword">self</span>.trim()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>删除 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">key</span>:<span class="hljs-type">String</span>) <span class="hljs-keyword">throws</span> &#123;<br>    <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.container[key]<br>    <span class="hljs-keyword">try</span> <span class="hljs-keyword">self</span>.removeNode(node)<br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">removeAll</span>() &#123;<br>    <span class="hljs-keyword">self</span>.headNode <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">self</span>.tailNode <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">self</span>.curCapacity <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">self</span>.container.removeAll()<br>&#125;<br></code></pre></td></tr></table></figure></li><li>查询 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">isContain</span>(<span class="hljs-params">key</span>:<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Bool</span> &#123;<br>    <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.container[key]<br>    <span class="hljs-keyword">if</span> node <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>        node<span class="hljs-operator">!</span>.time <span class="hljs-operator">=</span> <span class="hljs-type">CACurrentMediaTime</span>()<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">try</span> <span class="hljs-keyword">self</span>.bring2Head(node<span class="hljs-operator">!</span>)<br>        &#125; <span class="hljs-keyword">catch</span> &#123;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">for</span> <span class="hljs-params">key</span>:<span class="hljs-type">String</span>) <span class="hljs-keyword">throws</span> -&gt; <span class="hljs-keyword">Any</span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.isContain(key: key) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.container[key]<span class="hljs-operator">!</span>.value<span class="hljs-operator">!</span><br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-type">LRUError</span>.<span class="hljs-type">ValueNotExist</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li>验证代码<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">let</span> lruCache <span class="hljs-operator">=</span> <span class="hljs-type">LRUCache</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> <span class="hljs-number">6</span> &#123;<br>    lruCache.add(value: <span class="hljs-type">Int</span>(i), key: <span class="hljs-type">String</span>(describing:i <span class="hljs-operator">*</span> <span class="hljs-number">100</span>))<br>&#125;<br>lruCache.print()<br><br><span class="hljs-keyword">_</span> <span class="hljs-operator">=</span> lruCache.isContain(key: <span class="hljs-type">String</span>(describing: <span class="hljs-number">200</span>))<br><span class="hljs-keyword">_</span> <span class="hljs-operator">=</span> lruCache.isContain(key: <span class="hljs-type">String</span>(describing: <span class="hljs-number">300</span>))<br><span class="hljs-keyword">_</span> <span class="hljs-operator">=</span> lruCache.isContain(key: <span class="hljs-type">String</span>(describing: <span class="hljs-number">300</span>))<br>lruCache.print()<br><br>lruCache.add(value: <span class="hljs-type">Int</span>(<span class="hljs-number">8</span>), key: <span class="hljs-type">String</span>(describing: <span class="hljs-number">900</span>))<br>lruCache.add(value: <span class="hljs-type">Int</span>(<span class="hljs-number">9</span>), key: <span class="hljs-type">String</span>(describing: <span class="hljs-number">900</span>))<br>lruCache.print()<br><span class="hljs-comment">/*输出如下:</span><br><span class="hljs-comment">Optional(&quot;key:500,value:5 (0x10050f770)&quot;)</span><br><span class="hljs-comment">Optional(&quot;key:400,value:4 (0x10050f450)&quot;)</span><br><span class="hljs-comment">Optional(&quot;key:300,value:3 (0x10050f890)&quot;)</span><br><span class="hljs-comment">Optional([&quot;400&quot;: DataStructureDemo.LRUCacheNode, </span><br><span class="hljs-comment">    &quot;500&quot;: DataStructureDemo.LRUCacheNode, </span><br><span class="hljs-comment">    &quot;300&quot;: DataStructureDemo.LRUCacheNode])</span><br><span class="hljs-comment">capacity:Optional(3)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Optional(&quot;key:300,value:3 (0x10050f890)&quot;)</span><br><span class="hljs-comment">Optional(&quot;key:500,value:5 (0x10050f770)&quot;)</span><br><span class="hljs-comment">Optional(&quot;key:400,value:4 (0x10050f450)&quot;)</span><br><span class="hljs-comment">Optional([&quot;400&quot;: DataStructureDemo.LRUCacheNode, </span><br><span class="hljs-comment">    &quot;500&quot;: DataStructureDemo.LRUCacheNode, </span><br><span class="hljs-comment">    &quot;300&quot;: DataStructureDemo.LRUCacheNode])</span><br><span class="hljs-comment">capacity:Optional(3)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Optional(&quot;key:900,value:9 (0x1012498c0)&quot;)</span><br><span class="hljs-comment">Optional(&quot;key:300,value:3 (0x10050f890)&quot;)</span><br><span class="hljs-comment">Optional(&quot;key:500,value:5 (0x10050f770)&quot;)</span><br><span class="hljs-comment">Optional([&quot;900&quot;: DataStructureDemo.LRUCacheNode, </span><br><span class="hljs-comment">    &quot;500&quot;: DataStructureDemo.LRUCacheNode, </span><br><span class="hljs-comment">    &quot;300&quot;: DataStructureDemo.LRUCacheNode])</span><br><span class="hljs-comment">capacity:Optional(3)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>双链表</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法 - 双链表 - 大整数相加</title>
    <link href="/posts/f96c4030.html"/>
    <url>/posts/f96c4030.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>工作中虽然主打 Objc，但是接触 Swift 后就很难回去，在用 Swift 写过一些 Demo 程序时，她的优雅和简练以及它所反映的编程思想深深地让人迷恋。本系列文章会用 Swift 实现一些常见算法，以期待能够在实战中持续学习 Swift 并对基础数据结构算法做整理和回顾。</p></blockquote><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>双链表是在单链表的基础上，扩展了一个前向指针，使得双链表可以在两个方向自由地移动。下面将定义一个存放单个数字的链表，用来展示大整数加法和 LRU 算法。</p><ol><li><p>每一个节点除了包含数据空间，还必须包含前向和后向的指针。定义节点：</p><figure class="highlight swift"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DigitNode</span> &#123;<br>    <span class="hljs-keyword">var</span> val: <span class="hljs-type">Int</span>!<br>    <span class="hljs-keyword">var</span> next: <span class="hljs-type">DigitNode</span>?<br>    <span class="hljs-keyword">var</span> previous: <span class="hljs-type">DigitNode</span>?<br>    <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.val <span class="hljs-operator">=</span> val<br>        <span class="hljs-keyword">self</span>.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">self</span>.previous <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义双链表，为了方便，新增加了存放节点个数信息的属性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DigitList</span> &#123;<br>    <span class="hljs-keyword">var</span> digitList: <span class="hljs-type">DigitNode</span>?<br>    <br>    <span class="hljs-keyword">var</span> headerDigit: <span class="hljs-type">DigitNode</span>?<br>    <span class="hljs-keyword">var</span> tailDigit: <span class="hljs-type">DigitNode</span>?<br>    <br>    <span class="hljs-keyword">var</span> nodesCnt: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <br>    <span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">numStr</span>:<span class="hljs-type">String</span>) <span class="hljs-keyword">throws</span> &#123;<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> numStr &#123;<br>            <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> digit <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(<span class="hljs-type">String</span>(s)) <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-type">BigNumberError</span>.<span class="hljs-type">InvalidDigit</span><br>            &#125;<br>            <br>            <span class="hljs-keyword">let</span> digitNode <span class="hljs-operator">=</span> <span class="hljs-type">DigitNode</span>(digit)<br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.headerDigit <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-keyword">self</span>.headerDigit <span class="hljs-operator">=</span> digitNode<br>            &#125;<br>            <br>            <span class="hljs-keyword">self</span>.tailDigit<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> digitNode<br>            digitNode.previous <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.tailDigit<br>            <br>            <span class="hljs-keyword">self</span>.tailDigit <span class="hljs-operator">=</span> digitNode<br>            <span class="hljs-keyword">self</span>.nodesCnt <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">BigNumberError</span>: <span class="hljs-title class_">Error</span> &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">InvalidDigit</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><div class="note note-warning">            <p>组建链表时，时刻注意前向和后向指针的指向，不至于出现野指针、循环指向问题</p>          </div><h3 id="非负大整数相加"><a href="#非负大整数相加" class="headerlink" title="非负大整数相加"></a>非负大整数相加</h3><p>“大整数”使用链表存放，整数相加时，使用竖式计算，从右往左逐位相加，封 10 进一。代码如下：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">DigitList</span> &#123;<br>    <span class="hljs-comment">// 插入时注意，先准备外围环境(node)，然后再去动 list，最后打扫环境</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">insertHead</span>(<span class="hljs-params">list</span>:<span class="hljs-type">DigitList</span>, <span class="hljs-params">node</span>:<span class="hljs-type">DigitNode</span>)&#123;<br>        node.next <span class="hljs-operator">=</span> list.headerDigit<br>        list.headerDigit<span class="hljs-operator">?</span>.previous <span class="hljs-operator">=</span> node<br>        list.headerDigit <span class="hljs-operator">=</span> node<br>        node.previous <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">func</span> <span class="hljs-title class_">addNode</span>(<span class="hljs-title class_">for</span> <span class="hljs-title class_">list</span>:<span class="hljs-title class_">DigitList</span>, <span class="hljs-title class_">at</span> <span class="hljs-title class_">location</span>:<span class="hljs-title class_">DigitNode</span>, <br>                        <span class="hljs-title class_">with</span> <span class="hljs-title class_">val</span>: <span class="hljs-title class_">Int</span>) &#123;<br>        location.val <span class="hljs-operator">=</span> location.val <span class="hljs-operator">+</span> val<br>        <span class="hljs-keyword">var</span> work <span class="hljs-operator">=</span> location<br>        <span class="hljs-keyword">while</span> work.val <span class="hljs-operator">/</span> <span class="hljs-number">10</span> <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-comment">// 位“溢出”了，将当前位置赋值为个位数值，向高位进 1</span><br>            work.val <span class="hljs-operator">=</span> work.val <span class="hljs-operator">%</span> <span class="hljs-number">10</span><br>            <span class="hljs-keyword">if</span> (work.previous <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span>) &#123;<br>                work.previous<span class="hljs-operator">!</span>.val <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                work <span class="hljs-operator">=</span> work.previous<span class="hljs-operator">!</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 高位“溢出”：新创建一个 node，插到头部</span><br>                <span class="hljs-keyword">let</span> newNode <span class="hljs-operator">=</span> <span class="hljs-type">DigitNode</span>(<span class="hljs-number">1</span>)<br>                <span class="hljs-type">DigitList</span>.insertHead(list: list, node: newNode)<br>                work <span class="hljs-operator">=</span> newNode<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 重载 + 。修改了输入的链表，以得到返回值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">+</span> (<span class="hljs-params">left</span>:<span class="hljs-type">DigitList</span>, <span class="hljs-params">right</span>:<span class="hljs-type">DigitList</span>) <span class="hljs-keyword">throws</span> -&gt; <span class="hljs-type">DigitList</span> &#123;<br>        <span class="hljs-keyword">let</span> longgerList <span class="hljs-operator">=</span> left.nodesCnt <span class="hljs-operator">&gt;</span> right.nodesCnt <span class="hljs-operator">?</span> left : right<br>        <span class="hljs-keyword">let</span> shorterList <span class="hljs-operator">=</span> (longgerList <span class="hljs-operator">===</span> right <span class="hljs-operator">?</span> left : right)<br>        <span class="hljs-keyword">var</span> workS <span class="hljs-operator">=</span> shorterList.tailDigit<br>        <span class="hljs-keyword">var</span> workL <span class="hljs-operator">=</span> longgerList.tailDigit<br>        <br>        <span class="hljs-keyword">while</span> workS <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-type">DigitList</span>.addNode(for: longgerList, at: workL<span class="hljs-operator">!</span>, with: workS<span class="hljs-operator">!</span>.val)<br>            workS <span class="hljs-operator">=</span> workS<span class="hljs-operator">?</span>.previous<br>            workL <span class="hljs-operator">=</span> workL<span class="hljs-operator">?</span>.previous<br>        &#125;<br>        <span class="hljs-keyword">return</span> longgerList<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>为了方便打印，添加如下扩展：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">extension</span> <span class="hljs-title class_">DigitNode</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">debugDesc</span>() -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(<span class="hljs-keyword">self</span>.val<span class="hljs-operator">!</span>)</span>(<span class="hljs-subst">\(<span class="hljs-keyword">self</span>.address())</span>)&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">address</span>() -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>(format: <span class="hljs-string">&quot;%p&quot;</span>, <span class="hljs-built_in">unsafeBitCast</span>(<span class="hljs-keyword">self</span>, to: <span class="hljs-type">Int</span>.<span class="hljs-keyword">self</span>))<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">DigitList</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">verbose</span>:<span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">let</span> desc <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.desc(verbose: verbose)<br>        <span class="hljs-type">Swift</span>.print(desc)<br>        <span class="hljs-type">Swift</span>.print(<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>    &#125;<br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">desc</span>(<span class="hljs-params">verbose</span>:<span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>) -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">var</span> worker <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headerDigit<br>        <span class="hljs-keyword">var</span> result <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> worker <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> verbose &#123;<br>                result <span class="hljs-operator">=</span> result <span class="hljs-operator">+</span> (worker<span class="hljs-operator">!</span>.debugDesc() <span class="hljs-operator">+</span> <span class="hljs-string">&quot; ↔ &quot;</span>)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result <span class="hljs-operator">+=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(worker<span class="hljs-operator">!</span>.val<span class="hljs-operator">!</span>)</span>&quot;</span><br>            &#125;<br>            worker <span class="hljs-operator">=</span> worker<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>验证代码：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">var</span> bigNumber1 <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">DigitList</span>(<span class="hljs-string">&quot;859743092540326504983725381796084325974835743&quot;</span>)<br><span class="hljs-keyword">var</span> bigNumber2 <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> <span class="hljs-type">DigitList</span>(<span class="hljs-string">&quot;999999999999999999999999999999999999999999999&quot;</span>)<br><span class="hljs-keyword">var</span> val1Desc <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(bigNumber1.desc())</span>&quot;</span><br><span class="hljs-keyword">var</span> val2Desc <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(bigNumber2.desc())</span>&quot;</span><br><span class="hljs-keyword">var</span> result <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> bigNumber2 <span class="hljs-operator">+</span> bigNumber1<br><span class="hljs-keyword">var</span> resultDesc <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(result.desc())</span>&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">\(val1Desc)</span> + <span class="hljs-subst">\(val2Desc)</span> = <span class="hljs-subst">\(resultDesc)</span>&quot;</span>)<br><span class="hljs-comment">/* 输出结果：（可使用 python 交互环境验证结果）</span><br><span class="hljs-comment">859743092540326504983725381796084325974835743 + 999999999999999999999999999999999999999999999 = 1859743092540326504983725381796084325974835742</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></p><h3 id="双链表常用操作"><a href="#双链表常用操作" class="headerlink" title="双链表常用操作"></a>双链表常用操作</h3><ul><li>头部插入（如上）</li><li><p>尾部追加</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">appendTail</span>(<span class="hljs-params">with</span> <span class="hljs-params">node</span>:<span class="hljs-type">DigitNode</span>) &#123;<br>    node.previous <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.tailDigit<br>    <span class="hljs-keyword">self</span>.tailDigit<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> node<br>    <span class="hljs-keyword">self</span>.tailDigit <span class="hljs-operator">=</span> node<br>    node.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>中间插入</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 在 node 节点后面插入新节点 newNode</span><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">after</span> <span class="hljs-params">node</span>:<span class="hljs-type">DigitNode</span>?, <span class="hljs-params">with</span> <span class="hljs-params">newNode</span>:<span class="hljs-type">DigitNode</span>)<span class="hljs-keyword">throws</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>    <span class="hljs-keyword">guard</span> node <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-type">BigNumberError</span>.<span class="hljs-type">NullParamOccur</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> work <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headerDigit<br>    <span class="hljs-keyword">while</span> work <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">if</span> work <span class="hljs-operator">===</span> node &#123;<br>            <span class="hljs-comment">// 找到了锚节点，准备插入</span><br>            newNode.next <span class="hljs-operator">=</span> work<span class="hljs-operator">?</span>.next<br>            work<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.previous <span class="hljs-operator">=</span> newNode<br>            work<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> newNode<br>            newNode.previous <span class="hljs-operator">=</span> work<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        work <span class="hljs-operator">=</span> work<span class="hljs-operator">?</span>.next<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>倒置<ol><li>常规方法是使用一个工作指针，指向头部，然后顺次滑向尾部，逐个 node 操作： <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">reverse1</span>() &#123;<br>    <span class="hljs-keyword">var</span> workNode <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headerDigit<span class="hljs-operator">?</span>.next<br>    <span class="hljs-keyword">if</span> workNode<span class="hljs-operator">?</span>.next <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">// 尾部指针直接指向新的头部</span><br>    <span class="hljs-keyword">self</span>.tailDigit <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headerDigit<br>    <span class="hljs-keyword">while</span> workNode <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">let</span> formerNext <span class="hljs-operator">=</span> workNode<span class="hljs-operator">?</span>.next<br>        <br>        workNode<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headerDigit<br>        <span class="hljs-keyword">self</span>.headerDigit<span class="hljs-operator">?</span>.previous <span class="hljs-operator">=</span> workNode<br>        <br>        <span class="hljs-keyword">self</span>.headerDigit <span class="hljs-operator">=</span> workNode<br>        workNode <span class="hljs-operator">=</span> formerNext<br>    &#125;<br>    <br>    <span class="hljs-keyword">self</span>.headerDigit<span class="hljs-operator">?</span>.previous <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">self</span>.tailDigit<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>示例中的链表记录了元素个数，可以使用折半交换的方式倒置，效率比常规方法高 <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">reverse2</span>()&#123;<br>    <span class="hljs-keyword">var</span> tempHeade <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.headerDigit<br>    <span class="hljs-keyword">var</span> tempTail <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.tailDigit<br>    <span class="hljs-keyword">var</span> tempCnt <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> tempCnt <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">self</span>.nodesCnt <span class="hljs-operator">/</span> <span class="hljs-number">2</span> &#123;<br>        <span class="hljs-keyword">let</span> val <span class="hljs-operator">=</span> tempHeade<span class="hljs-operator">?</span>.val<br>        tempHeade<span class="hljs-operator">?</span>.val <span class="hljs-operator">=</span> tempTail<span class="hljs-operator">?</span>.val<br>        tempTail<span class="hljs-operator">?</span>.val <span class="hljs-operator">=</span> val<br>        tempCnt <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        <br>        tempHeade <span class="hljs-operator">=</span> tempHeade<span class="hljs-operator">?</span>.next<br>        tempTail <span class="hljs-operator">=</span> tempTail<span class="hljs-operator">?</span>.previous<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><p><a href="https://navimark.github.io/posts/a22b8e96.html">数据结构与算法 - 双链表（LRU）</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>双链表</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对 OC 神经病院入学考试题目的理解</title>
    <link href="/posts/1103cfe0.html"/>
    <url>/posts/1103cfe0.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是一个老话题，各种文章已经泛滥了，我为什么还要来掺和呢？个人觉得网上的那些解释存在跳跃性，不能和已有的认知联系起来，下面是我探讨这个问题的记录，对我认为比较陌生的地方力求足够详细地解释。如发现错误之处希望得到您能指正！</p></blockquote><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><figure class="highlight objc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs objc"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Sark</span> : <span class="hljs-title">NSObject</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *name;<br>- (<span class="hljs-keyword">void</span>)speak;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">Sark</span></span><br><br>- (<span class="hljs-keyword">void</span>)speak &#123;<br>   <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;my name&#x27;s %@&quot;</span>, <span class="hljs-keyword">self</span>.name);<br>&#125;<br><br><span class="hljs-keyword">@end</span><br><br>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br>    <br>    <span class="hljs-keyword">id</span> cls = [Sark <span class="hljs-keyword">class</span>];<br>    <span class="hljs-keyword">void</span> *obj = &amp;cls;<br>    [(__bridge <span class="hljs-keyword">id</span>)obj speak];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h3><div class="note note-danger">            <p>会运行时会报错吗？</p>          </div><blockquote><p>如果它看起来像鸭子、游泳像鸭子、叫声像鸭子，那么它可能就是只鸭子。</p></blockquote><p>我们知道，实例对象的<code>isa</code>指向类对象的地址。第 17 行中 <code>cls</code> 指向类对象，<code>&amp;cls</code>  就是类对象的地址，即 <code>obj</code> 指向类对象的地址。将 <code>obj</code> 转换成 <code>id</code> 类型后，即是告诉编译器 <code>obj</code> 可以被 Runtime 当做一个实例对象。相对于常规步骤创建的实例对象，<code>obj</code> 的内存区域并不完整，不过 <code>[(__bridge id)obj speak]</code> 真正运行起来时，由于 <code>isa</code> 指向正确，所以并不影响方法查找，<code>speak</code> 方法还是可以被正确响应。</p><p>对象的实质就是指向类对象的地址的变量。</p><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h3><div class="note note-danger">            <p>如果不会运行报错，最终输出结果是什么？</p>          </div><p>第 9 行做输出打印，转换成汇编后<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="通过 Xcode 的 Assembly 可以查看汇编">[1]</span></a></sup>查看 <code>self.name</code> 是调用 <code>_objc_getProperty</code>:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-string">&quot;-[Sark name]&quot;</span>:                         <span class="hljs-comment">; @&quot;\01-[Sark name]&quot;</span><br><span class="hljs-symbol">Lfunc_begin2:</span><br>.loc<span class="hljs-number">1</span> <span class="hljs-number">21</span> <span class="hljs-number">0</span>                  <br>.cfi_startproc<br><span class="hljs-comment">; %bb.0:</span><br><span class="hljs-keyword">sub</span><span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#16</span>             <span class="hljs-comment">; =16</span><br>.cfi_def_cfa_offset <span class="hljs-number">16</span><br><span class="hljs-keyword">str</span>x0, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#8</span>]<br><span class="hljs-keyword">str</span>x1, [<span class="hljs-built_in">sp</span>]<br><span class="hljs-symbol">Ltmp5:</span><br>.loc<span class="hljs-number">1</span> <span class="hljs-number">21</span> <span class="hljs-number">39</span> prologue_end    <br><span class="hljs-keyword">ldr</span>x1, [<span class="hljs-built_in">sp</span>]<br><span class="hljs-keyword">ldr</span>x0, [<span class="hljs-built_in">sp</span>, <span class="hljs-number">#8</span>]<br><span class="hljs-keyword">mov</span>x2, <span class="hljs-number">#8</span><br><span class="hljs-keyword">mov</span>w8, <span class="hljs-number">#0</span><br><span class="hljs-keyword">and</span>w3, w8, <span class="hljs-number">#0x1</span><br><span class="hljs-keyword">add</span><span class="hljs-built_in">sp</span>, <span class="hljs-built_in">sp</span>, <span class="hljs-number">#16</span>             <span class="hljs-comment">; =16</span><br><span class="hljs-keyword">b</span>_objc_getProperty<br></code></pre></td></tr></table></figure><br><code>objc_getProperty</code> 的源码<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="objc 源码可以在 https://opensource.apple.com/source/objc4/ 下载">[2]</span></a></sup>：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">id</span> objc_getProperty(<span class="hljs-keyword">id</span> <span class="hljs-keyword">self</span>, SEL _cmd, ptrdiff_t offset, <span class="hljs-built_in">BOOL</span> atomic) &#123;<br>    <span class="hljs-keyword">if</span> (offset == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> object_getClass(<span class="hljs-keyword">self</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Retain release world</span><br>    <span class="hljs-keyword">id</span> *slot = (<span class="hljs-keyword">id</span>*) ((<span class="hljs-keyword">char</span>*)<span class="hljs-keyword">self</span> + offset);<br>    <span class="hljs-keyword">if</span> (!atomic) <span class="hljs-keyword">return</span> *slot;<br>        <br>    <span class="hljs-comment">// Atomic retain release world</span><br>    spinlock_t&amp; slotlock = PropertyLocks[slot];<br>    slotlock.lock();<br>    <span class="hljs-keyword">id</span> value = objc_retain(*slot);<br>    slotlock.unlock();<br>    <br>    <span class="hljs-keyword">return</span> objc_autoreleaseReturnValue(value);<br>&#125;<br></code></pre></td></tr></table></figure><br>源码的第 7 行表明，是在 <code>self</code> 的基础上偏移 <code>offset</code> 进行取值的。</p><p>在每个 oc 函数调用过程中，<code>self</code> 是一个隐藏参数，是栈空间的一个临时变量，其值在每个栈空间中都不相同，但始终指向对象（也可能是类对象），那么当前的消息接收者（<code>obj</code>）偏移一个字节（指针）长度后指向哪里呢？<code>obj</code> 是栈里面的临时变量，这就需要知道和 <code>objc</code> 相邻的内存单元中存放的是什么。</p><p>oc 函数执行时其实有两个隐藏参数 <code>self</code> 和 <code>_cmd</code> ，函数栈空间是从高地址向低地址生长的。当即将执行 <code>[super viewDidLoad]</code> 时，栈空间中的变量从高至低依次是:<code>self</code>、<code>_cmd</code>(viewDidLoad)。接下来看看 <code>[super viewDidLoad]</code> 是如何调用的。</p><p>将 <code>[super viewDidLoad]</code> 转换成 c++ 代码<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="此处转换命令：xcrun -sdk iphoneos clang -rewrite-objc -fobjc-arc -framework Foundation ViewController.m -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator14.4.sdk">[3]</span></a></sup>后：<code>((void (*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;ViewController&quot;))&#125;, sel_registerName(&quot;viewDidLoad&quot;));</code>，可以简写成 <code>objc_msgSendSuper((__rw_objc_super)&#123;self,class_getSuperclass(objc_getClass(&quot;ViewController&quot;))&#125;, sel_registerName(&quot;viewDidLoad&quot;))</code>，第二个参数为 <code>SEL</code>，第一个参数是结构体变量，该结构体的定义：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">struct</span> __rw_objc_super &#123; <br><span class="hljs-keyword">struct</span> objc_object *object; <br><span class="hljs-keyword">struct</span> objc_object *superClass; <br>__rw_objc_super(<span class="hljs-keyword">struct</span> objc_object *o, <span class="hljs-keyword">struct</span> objc_object *s) : object(o), superClass(s) &#123;&#125; <br>&#125;;<br></code></pre></td></tr></table></figure><br>该结构体有两个成员变量，在上述调用时，<code>object</code> 被赋值为 <code>self</code>，<code>superClass</code> 相当于 <code>class_getSuperclass(self.class)</code>。下面通过示例代码来说明结构体作为栈上的临时变量，成员变量的存放情况：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-comment">// 定义结构体</span><br><span class="hljs-keyword">struct</span> DemoStruct &#123;<br>    <span class="hljs-built_in">NSString</span> *first;<br>    <span class="hljs-built_in">NSString</span> *second;<br>&#125;;<br><br>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br><br>    <span class="hljs-keyword">struct</span> DemoStruct gg = (<span class="hljs-keyword">struct</span> DemoStruct)&#123;<span class="hljs-string">@&quot;abc&quot;</span>,<span class="hljs-string">@&quot;test&quot;</span>&#125;;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;gg:%p&quot;</span>,&amp;gg);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;gg.first:%p&quot;</span>,&amp;(gg.first));<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;gg.second:%p&quot;</span>,&amp;(gg.second));<br>&#125;<br></code></pre></td></tr></table></figure><br>输出：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gg</span>:<span class="hljs-number">0</span>x16fc91b30<br><span class="hljs-attribute">gg</span>.first:<span class="hljs-number">0</span>x16fc91b30<br><span class="hljs-attribute">gg</span>.second:<span class="hljs-number">0</span>x16fc91b38<br></code></pre></td></tr></table></figure><br>可以看出，结构体的第一个成员变量的地址就是该结构体的地址，余下的成员变量向高地址方向依次填充：<br><img src="1103cfe0/1.png" alt=""><br>执行 <code>[super viewDidLoad]</code> 调用时，先构建了一个 <code>objc_super</code> 结构体变量存放于当前栈上，再加上 <code>cls</code> 和 <code>obj</code> 两个临时变量，执行到 <code>[(__bridge id)obj speak]</code> 时，栈空间结构为：<br><img src="1103cfe0/2.png" alt=""><br>当通过 <code>self.name</code> 取值时，即是 <code>obj</code> 指针向高地址方向偏移一个指针的位置取值，取到的就是当前 <code>ViewController</code> 实例对象的地址，打印:<br><code>my name&#39;s &lt;ViewController: 0x14de09020&gt;</code></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这道题目考察的知识点太多，涉及到函数调用传参、隐藏参数、objc 对象的内存布局、栈空间结构等等，看到他人的解释是似懂非懂，仔细一行一行地跟进时，才发现处处是细节魔鬼，当然能相处这样题目的人更牛！</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>通过 Xcode 的 Assembly 可以查看汇编<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>objc 源码可以在 <a href="https://opensource.apple.com/source/objc4/">https://opensource.apple.com/source/objc4/</a> 下载<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>此处转换命令：<code>xcrun -sdk iphoneos clang -rewrite-objc -fobjc-arc -framework Foundation ViewController.m -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator14.4.sdk</code><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>底层</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
      <tag>iOS</tag>
      
      <tag>Runtime</tag>
      
      <tag>Objective-C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Xcode 编译规则提升代码质量</title>
    <link href="/posts/d463489f.html"/>
    <url>/posts/d463489f.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>随着项目的迭代，工程代码量越来越大，如果使用 Xcode 默认的编译警告级别，越来越多的隐患将被隐藏在代码中，这类隐患代码大部分来自旧代码，也有部分来自日常开发的代码，特别是在模块重构时，这些代码大概率会成为 bug 的发源地，也将会是后期优化的绊脚石。</p></blockquote><p>由于 Objective-C 语言的动态性，部分不安全的代码写法在编译时并不会报错(error)，只是会产生警告 (warning)，而后者总会有意无意地总被忽略掉。通过新增加编译检查规则，提升编译器的校验级别，强制对可能存在隐患的代码拒绝编译通过，能尽可能减少人为出错，提升代码质量。</p><h1 id="如何提升校验级别"><a href="#如何提升校验级别" class="headerlink" title="如何提升校验级别"></a>如何提升校验级别</h1><p>Xcode 中允许开发者自行添加编译校验规则，如下图：<br><img src="d463489f/1.jpg" alt=""><br>这些规则可以通过编译日志查询得到：<br><img src="d463489f/2.jpg" alt=""><br>上图中紧接 <code>-W</code> 的字符串都是编译规则，具体含义可以去 <a href="https://clang.llvm.org/docs/DiagnosticsReference.html">Clang 文档</a>上查找。找到需要的校验规则后，比如<code>-Wunreachable-code</code>，将其转换成 error 格式 <code>-Werror=unreachable-code</code>，然后填写到 Targets -&gt; Build Settings -&gt;Apple Clang-Custom Compiler Flags 中即可，再次编译时，原先 <code>unreachable-code</code> 地方的代码就会报错，提醒我们删掉不相关的代码，精简结构。</p><h1 id="实用的校验规则"><a href="#实用的校验规则" class="headerlink" title="实用的校验规则"></a>实用的校验规则</h1><p>我们目前用到的规则有下面几条：</p><ol><li>未用到的变量<ul><li>规则：<code>-Werror=unused-variable</code></li><li>例外：在变量前添加 <code>__unused</code> 修饰</li></ul></li><li><code>switch</code> 中 <code>case</code> 没有完全列举<ul><li>规则：<code>-Werror=switch</code></li><li>例外：使用 <code>default</code> 关键字。其实这里不建议使用 <code>default</code>，如果后期因为业务代码变动 <code>case</code> 有增删改，它不会显示地报错误或者警告，只会默默地“吃掉”这些增删改，非常不便于错误排查。</li></ul></li><li>方法有申明，但是没有实现 <ul><li>规则：<code>-Werror=incomplete-implementation</code></li><li>例外：无例外，不允许出现。曾经碰到到在 <code>.h</code> 里面有申明但是 <code>.m</code> 中忘记写实现的情况，险些酿成大错。</li></ul></li><li>调用未申明的 selector <ul><li>规则：<code>-Werror=undeclared-selector</code></li><li>例外：<figure class="highlight objc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs objc"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> clang diagnostic push</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> clang diagnostic ignored <span class="hljs-string">&quot;-Wundeclared-selector&quot;</span></span><br>    [<span class="hljs-keyword">self</span> performSelector:<span class="hljs-keyword">@selector</span>(testFun)];<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> clang diagnostic pop</span><br></code></pre></td></tr></table></figure></li></ul></li><li>未实现标记为 <code>@required</code> 的协议方法<ul><li>规则：<code>-Werror=protocol</code> </li><li>例外：如果不需要实现，申明改为 <code>@optional</code>；如果是 <code>@required</code> 必须要实现</li></ul></li><li>不同指针类型间赋值(比如 <code>NSNumber *</code> 赋值给 <code>NSString *</code>、<code>NSArray&lt;NSNumber *&gt; *</code> 赋值给 <code>NSArray&lt;NSString *&gt; *</code>) <ul><li>规则：<code>-Werror=incompatible-pointer-types</code></li><li>例外：尽量避免这种情况出现。如果很清楚后果，显示地类型转换</li></ul></li><li>指针隐式赋值给基本类型（如 self 指针赋值给 int 变量） <ul><li>规则：<code>-Werror=int-conversion</code></li><li>例外：尽量避免这种情况出现。如果很清楚后果，显示地类型转换</li></ul></li><li>不同枚举类型之间赋值<ul><li>规则：<code>-Werror=enum-conversion</code></li><li>例外：尽量避免这种情况出现。如果很清楚后果，显示地类型转换</li></ul></li><li>不允许判断语句里面写成 “=”，如 <code>if (a = b) // error</code><ul><li>规则：<code>-Werror=parentheses</code></li><li>例外：多加一层括号，明确表示使用返回值进行判断</li></ul></li></ol><p>目前这些规则，已经帮我们避免了很多隐藏问题，后续会根据实际情况再增加或删除。</p>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OC runtime 中的 load 和 initialize</title>
    <link href="/posts/fc800951.html"/>
    <url>/posts/fc800951.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们的程序编译成二进制后，在启动时需要初始化运行环境，包括类环境的初始化，涉及到类相关方法的加载，其中很重要的两个方法有 <code>+load</code> 和 <code>+initialize</code>，这两个方法都会在初始化的时候被调用，相信大家都不陌生，但是涉及到底层细节时可能就不太熟悉了，比如它们是如何被调用的？为什么会是这样的调用？它们在写业务代码时能用来做什么？本文将通过 <code>runtime</code> 和 <code>dyld</code> 源码来回答这些问题</p></blockquote><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p>遇事不决，官方文档！网上的博客以讹传讹的信息太多，最可靠的资料来源还是得看官方文档。<br>根据文档上的描述，<code>+load</code> 是在 class 或 Category 被添加到 <code>runtime</code> 时调用的，而 <code>+initialize</code> 是在类第一次收到消息时被调用。继续看详情，我们能得到以下印象：</p><ul><li><code>+load</code><ul><li>静态库或动态库中的 load 方法都会被调用，前提是它们实现了 load 方法</li><li>在继承链上依次按照本类、子类、孙子类的顺序调用</li><li>本类上的 load 方法会先于所有分类上的 load 方法调用</li></ul></li><li><code>+initialize</code><ul><li><code>+initialize</code> 方法会在调用第一次该类的方法之前被调用</li><li><code>+initialize</code> 的调用阻塞式的，在 <code>+initialize</code> 方法执行完毕之前，该类的其他任何方法调用都会被阻断（block）</li><li>在继承链上依次按照子类、孙子类的顺序调用</li><li>当继承链上某个类没有 <code>+initialize</code> 的实现，那么其父类的 <code>+initialize</code> 可能会被多次执行</li><li><code>+initialize</code> 在每个类上只会被调用一次</li></ul></li></ul><h1 id="调用时机"><a href="#调用时机" class="headerlink" title="调用时机"></a>调用时机</h1><p>基于 objc4-818.2 可调试源码<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://github.com/LGCooci/objc4_debug/tree/master/objc4-818.2">[1]</span></a></sup>创建一个<a href="https://github.com/Navimark/RuntimeLoadInit">四世同堂工程</a>，添加符号断点 <code>+[KFCRootObject initialize]</code> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="尝试过在 KFCRootObject.m 的 + (void)initialize 处添加断点，但运行时没有进来🤔，知道原因的大佬烦请留言赐教">[2]</span></a></sup>，选中Scheme: KCObjcBuild，<code>KCObjcBuild</code> target 的 <code>main.m</code> 文件中的 main 函数代码为：<br><figure class="highlight objc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">int</span> main(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * argv[]) &#123;<br>    <span class="hljs-keyword">@autoreleasepool</span> &#123;<br>        <span class="hljs-comment">// insert code here...</span><br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Hello, World!&quot;</span>);<br>        <span class="hljs-built_in">NSObject</span> *objc = [KFCRootObject alloc];<br>        <br>        <span class="hljs-built_in">NSObject</span> *objc1 = [KFCRootObject alloc];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>运行后<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="x86_64 架构运行">[3]</span></a></sup>方法调用栈：<br><img src="fc800951/1.png" alt=""><br>下面按照入栈顺序分析</p><h2 id="initialize"><a href="#initialize" class="headerlink" title="initialize"></a><code>initialize</code></h2><ol><li><p><code>main</code></p><p> <img src="fc800951/3.png" alt=""><br> <code>0x0000000100008468</code> 是指向类对象的指针，调用 <code>alloc</code> 时，首先被转换成对 <code>objc_alloc</code> 的调用</p></li><li><p><code>objc_alloc</code> -&gt; <code>callAlloc(objc_class*, bool, bool) [inlined]</code></p><p> 在 <code>objc_alloc</code> 和 <code>callAlloc(objc_class*, bool, bool) [inlined]</code> 中，对形参、调用环境做了一番校验后，最终调用了 <code>((id(*)(id, SEL))objc_msgSend)(cls, @selector(alloc));</code>，接着进入 <code>objc_msgSend</code>  的汇编实现</p></li><li><code>_objc_msgSend_uncached</code> -&gt; <code>lookUpImpOrForward</code> -&gt; <code>realizeAndInitializeIfNeeded_locked(objc_object*, objc_class*, bool)</code><ul><li>当 <code>@selector(alloc)</code> 对应的 IMP 在方法缓存中不存在时，会调用 <code>MethodTableLookup</code> 继续查找，这部分的汇编代码又将流程导向 <code>lookUpImpOrForward</code>，后者预期返回该 IMP。</li><li><code>lookUpImpOrForward</code> 中调用 <code>realizeAndInitializeIfNeeded_locked(inst, cls, behavior &amp; LOOKUP_INITIALIZE)</code> 时，<code>behavior</code> 形参值为 <code>0x1011</code>，包含标记位 <code>LOOKUP_INITIALIZE</code>，即形参 <code>initialize</code> 为 true<br><img src="fc800951/4.png" alt=""></li><li><code>(slowpath(initialize &amp;&amp; !cls-&gt;isInitialized()))</code> 判断当前类是否被初始化过，<code>slowpath(x)</code> 宏定义标记暗示编译器的优化方向，表明 <code>x</code> 较大概率为 <code>false</code>，重点看看<code>!cls-&gt;isInitialized()</code>：<div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="fc800951/5.png" alt=""></div><div class="group-image-wrap"><img src="fc800951/6.png" alt=""></div></div></div></li><li>从字面意思可以看出当前类是否被初始化的信息保存在元类的 <code>class_rw_t</code> 结构的 <code>flags</code> 标记位中，由于 <code>#define RW_INITIALIZED        (1&lt;&lt;29)</code>，所以是否被初始化的信息保存在 <code>flags</code> 的右起第 29 位中</li></ul></li><li><p><code>initializeAndLeaveLocked(objc_class*, objc_object*, mutex_tt&lt;true&gt;&amp;)</code> -&gt; <code>initializeAndMaybeRelock(objc_class*, objc_object*, mutex_tt&lt;true&gt;&amp;, bool)</code> -&gt; <code>initializeNonMetaClass</code></p><p> <code>initializeNonMetaClass</code> 中:</p><ul><li><p>如果发现父类没有调用过初始化方法，将递归调用父类的初始化方法：</p>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objc">supercls = cls-&gt;getSuperclass();<br><span class="hljs-keyword">if</span> (supercls  &amp;&amp;  !supercls-&gt;isInitialized()) &#123;<br>    initializeNonMetaClass(supercls);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过加锁来设置 <code>CLS_INITIALIZING</code></p>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objc">monitor_locker_t lock(classInitLock);<br><span class="hljs-keyword">if</span> (!cls-&gt;isInitialized() &amp;&amp; !cls-&gt;isInitializing()) &#123;<br>    cls-&gt;setInitializing();<br>    reallyInitialize = <span class="hljs-literal">YES</span>;<br><br>    <span class="hljs-comment">// Grab a copy of the will-initialize funcs with the lock held.</span><br>    localWillInitializeFuncs.initFrom(willInitializeFuncs);<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">void</span> setInitializing() &#123;<br>    ASSERT(!isMetaClass());<br>    ISA()-&gt;setInfo(RW_INITIALIZING);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接下来标记当前类被当前所在线程独占（当被某一线程独占时，只能在当前线程向类发送消息，其他线程在独占结束之前只能等待），然后向当前类发送 <code>+initialize</code> 消息</p>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objc">_setThisThreadIsInitializingClass(cls);<br></code></pre></td></tr></table></figure>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">void</span> callInitialize(Class cls)<br>&#123;<br>    <span class="hljs-comment">// 通过 objc_msgSend 走消息转发流程。</span><br>    <span class="hljs-comment">// 意味着子类没有对应的方法实现时</span><br>    <span class="hljs-comment">// 会沿着继承链去尝试调用父类上的 initialize 方法</span><br>    ((<span class="hljs-keyword">void</span>(*)(Class, SEL))objc_msgSend)(cls, <span class="hljs-keyword">@selector</span>(initialize));<br>    <span class="hljs-keyword">asm</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>完成初始化：</p>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> lockAndFinishInitializing(Class cls, Class supercls)<br>&#123;<br>    monitor_locker_t lock(classInitLock);<br>    <span class="hljs-keyword">if</span> (!supercls  ||  supercls-&gt;isInitialized()) &#123;<br>        _finishInitializing(cls, supercls);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果父类未被初始化，会在父类初始化完成后再修改当前 cls 初始化状态标记位</span><br>        _finishInitializingAfter(cls, supercls);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数据结构 <code>PendingInitializeMap</code>:</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> PendingInitialize &#123;<br>    Class subclass;<br>    <span class="hljs-keyword">struct</span> PendingInitialize *next;<br><br>    PendingInitialize(Class cls) : subclass(cls), next(nullptr) &#123; &#125;<br>&#125; PendingInitialize;<br><br><span class="hljs-keyword">typedef</span> objc::DenseMap&lt;Class, PendingInitialize *&gt; PendingInitializeMap;<br><span class="hljs-keyword">static</span> PendingInitializeMap *pendingInitializeMap;<br></code></pre></td></tr></table></figure><p> <code>pendingInitializeMap</code> 是一个全局的字典结构，它负责维护 <code>+initialize</code> 调用的依赖，会在两个地方访问：</p><ol><li><p>父类未完成初始化时。父类的初始化会优先于当前类，这一设定是通过 <code>_finishInitializingAfter</code> 中如下的关键代码保证的：</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objc">PendingInitialize *pending = new PendingInitialize&#123;cls&#125;;<br>auto result = pendingInitializeMap-&gt;try_emplace(supercls, \<br>pending);<br><span class="hljs-keyword">if</span> (!result.second) &#123;<br>    pending-&gt;next = result.first-&gt;second;<br>    result.first-&gt;second = pending;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>父类已经初始化完成时，调用 <code>_finishInitializing</code>：</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> _finishInitializing(Class cls, Class supercls)<br>&#123;<br>    PendingInitialize *pending;<br><br>    classInitLock.assertLocked();<br>    ASSERT(!supercls  ||  supercls-&gt;isInitialized());<br><br>    <span class="hljs-keyword">if</span> (PrintInitializing) &#123;<br>        _objc_inform(<span class="hljs-string">&quot;INITIALIZE: thread %p: %s is \</span><br><span class="hljs-string">                    fully +initialized&quot;</span>,<br>                    objc_thread_self(), cls-&gt;nameForLogging());<br>    &#125;<br><br>    <span class="hljs-comment">// mark this class as fully +initialized</span><br>    cls-&gt;setInitialized();<br>    classInitLock.notifyAll();<br>    _setThisThreadIsNotInitializingClass(cls);<br>    <br>    <span class="hljs-keyword">if</span> (!pendingInitializeMap) <span class="hljs-keyword">return</span>;<br><br>    auto it = pendingInitializeMap-&gt;find(cls);<br>    <span class="hljs-keyword">if</span> (it == pendingInitializeMap-&gt;end()) <span class="hljs-keyword">return</span>;<br><br>    pending = it-&gt;second;<br>    pendingInitializeMap-&gt;erase(it);<br><br>    <span class="hljs-keyword">if</span> (pendingInitializeMap-&gt;size() == <span class="hljs-number">0</span>) &#123;<br>        delete pendingInitializeMap;<br>        pendingInitializeMap = <span class="hljs-literal">nil</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (pending) &#123;<br>        PendingInitialize *next = pending-&gt;next;<br>        <span class="hljs-keyword">if</span> (pending-&gt;subclass) <br>            _finishInitializing(pending-&gt;subclass, cls);<br>        delete pending;<br>        pending = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 在 <code>_finishInitializing</code> 函数中，设置 <code>RW_INITIALIZED</code> 标记并清除之前设置的 <code>RW_INITIALIZING</code>，设置当前类不再被当前线程独占，然后递归地将先前被阻塞的子类设置为初始化完成状态，由于初始化工作已完成，这里还清理了不再需要的内存占用</p></li></ol></li><li><p>在类初始化未完成之前（<code>RW_INITIALIZING</code>），后续在该线程上其他的 <code>+initialize</code> 调用都会被直接 <code>return</code>；在类已经完成初始化时（<code>RW_INITIALIZED</code>）直接 <code>return</code>，官方的注释也很详细：</p>  <details>  <summary>查看官方注释</summary>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">if</span> (...) &#123;...&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cls-&gt;isInitializing()) &#123;<br>    <span class="hljs-comment">// We couldn&#x27;t set INITIALIZING because INITIALIZING was already set.</span><br>    <span class="hljs-comment">// If this thread set it earlier, continue normally.</span><br>    <span class="hljs-comment">// If some other thread set it, block until initialize is done.</span><br>    <span class="hljs-comment">// It&#x27;s ok if INITIALIZING changes to INITIALIZED while we&#x27;re here, </span><br>    <span class="hljs-comment">//   because we safely check for INITIALIZED inside the lock </span><br>    <span class="hljs-comment">//   before blocking.</span><br>    <span class="hljs-keyword">if</span> (_thisThreadIsInitializingClass(cls)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!MultithreadedForkChild) &#123;<br>        waitForInitializeToComplete(cls);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// We&#x27;re on the child side of fork(), facing a class that</span><br>        <span class="hljs-comment">// was initializing by some other thread when fork() was called.</span><br>        _setThisThreadIsInitializingClass(cls);<br>        performForkChildInitialize(cls, supercls);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cls-&gt;isInitialized()) &#123;<br>    <span class="hljs-comment">// Set CLS_INITIALIZING failed because someone else already </span><br>    <span class="hljs-comment">//   initialized the class. Continue normally.</span><br>    <span class="hljs-comment">// NOTE this check must come AFTER the ISINITIALIZING case.</span><br>    <span class="hljs-comment">// Otherwise: Another thread is initializing this class. ISINITIALIZED </span><br>    <span class="hljs-comment">//   is false. Skip this clause. Then the other thread finishes </span><br>    <span class="hljs-comment">//   initialization and sets INITIALIZING=no and INITIALIZED=yes. </span><br>    <span class="hljs-comment">//   Skip the ISINITIALIZING clause. Die horribly.</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>  </details></li></ul></li><li>到这里已经梳理完了类的 <code>+initialize</code> 调用流程，验证了苹果 API 文档中关于 <code>+initialize</code> 的特性</li></ol><h2 id="load"><a href="#load" class="headerlink" title="load"></a><code>load</code></h2><blockquote><p><code>load</code> 方法相信都不陌生，用得最多的场景就是方法交换，而且大家也都知道 <code>load</code> 方法会先于 <code>main</code> 函数调用。接下来将对照源码来理解 <code>load</code> 方法具体的调用过程。</p></blockquote><p>还是刚刚的<a href="https://github.com/Navimark/RuntimeLoadInit">四世同堂工程</a>，添加符号断点 <code>+[KFCRootObject load]</code>，运行后的调用栈为：<br><img src="fc800951/7.png" alt=""><br>还是按照入栈顺序分析：</p><ol><li><p><code>_dyld_start</code>-&gt;<code>dyld::notifySingle(dyld_image_states, ImageLoader const*, ImageLoader::InitializerTimingList*)</code> -&gt; <code>load_images</code>，前两个栈记录是操作系统通过 <code>dyld</code> 加载程序时，<code>dyld</code> 的内部函数调用过程，<code>dyld</code> 负责给程序创建一个和操作系统绑定的运行环境，包括链接程序所用到的动态库（包括系统动态库）、绑定外部调用符号、rebase 基址，做完了环境准备工作后，通过 <code>load_images</code> 回调 runtime。我们增加一个符号断点：<code>load_images</code>，重新 run 起来：<br><img src="fc800951/8.png" alt=""></p><p> 定位到 <code>_objc_init</code> 的源码：</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">void</span> _objc_init(<span class="hljs-keyword">void</span>)<br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> initialized = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (initialized) <span class="hljs-keyword">return</span>;<br>    initialized = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-comment">// fixme defer initialization until an objc-using image is found?</span><br>    environ_init();<br>    tls_init();<br>    static_init();<br>    runtime_init();<br>    exception_init();<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __OBJC2__</span><br>    cache_t::init();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    _imp_implementationWithBlock_init();<br><br>    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __OBJC2__</span><br>    didCallDyldNotifyRegister = <span class="hljs-literal">true</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p> 链接库被初始化之前 <code>libSystem</code> 调用 <code>_objc_init</code> 进行初始化，在 <code>_objc_init</code> 中又通过 <code>_dyld_objc_notify_register</code> 注册了 <code>dyld</code> 的回调，在 <code>dyld</code> <a href="https://opensource.apple.com/source/dyld/dyld-832.7.1/include/mach-o/dyld_priv.h.auto.html">源码</a><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="找到对应版本的 dyld 源码：输入 lldb 命令：image list dyld，得到dyld所在路径为：/usr/lib/dyld，使用 MachOView 打开，在 LoadCommand 的 LC_SOURCE_VERSION 中找到源码 Version ，我这里是 832.7.1">[4]</span></a></sup> 中可以查看到 <code>_dyld_objc_notify_register</code> 的原型：</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">void</span> _dyld_objc_notify_register(_dyld_objc_notify_mapped    mapped,<br>                                _dyld_objc_notify_init      init,<br>                                _dyld_objc_notify_unmapped  unmapped);<br></code></pre></td></tr></table></figure><p> 通过注释可知，当某个镜像将被 <code>dyld</code> 初始化时，<code>dyld</code> 会通过 <code>init</code> 这个函数指针形参将该镜像信息回调给 objc runtime。来看看 <code>load_images</code>:</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">void</span> load_images(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *path __unused, <span class="hljs-keyword">const</span> <span class="hljs-keyword">struct</span> mach_header *mh)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!didInitialAttachCategories &amp;&amp; didCallDyldNotifyRegister) &#123;<br>        didInitialAttachCategories = <span class="hljs-literal">true</span>;<br>        loadAllCategories();<br>    &#125;<br><br>    <span class="hljs-comment">// Return without taking locks if there are no +load methods here.</span><br>    <span class="hljs-keyword">if</span> (!hasLoadMethods((<span class="hljs-keyword">const</span> headerType *)mh)) <span class="hljs-keyword">return</span>;<br><br>    recursive_mutex_locker_t lock(loadMethodLock);<br><br>    <span class="hljs-comment">// Discover load methods</span><br>    &#123;<br>        mutex_locker_t lock2(runtimeLock);<br>        prepare_load_methods((<span class="hljs-keyword">const</span> headerType *)mh);<br>    &#125;<br><br>    <span class="hljs-comment">// Call +load methods (without runtimeLock - re-entrant)</span><br>    call_load_methods();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>遍历所有链接进来的 Image 头信息链表，找到所有的 Category 方法，并附加到对应的类的方法列表上</li><li>通过查询 Image 的 Mach-O 结构，在 <code>__DATA,__objc_nlclslist</code> 和 <code>__DATA,__objc_nlcatlist</code> 中分别检查是否存在包含 <code>+load</code> 方法的类和包含 <code>+load</code> 方法的分类， 如果没有，跳过 <code>load_images</code> 接下来的步骤</li><li>准备 load 方法。先通过 <code>_getObjc2NonlazyClassList</code> 获取到所有包含 <code>+load</code> 的类（话说这里分别进行了两次重复的 Mach-O 结构的查找，也许可以合并为一次🤔），然后将这些类添加到 <code>loadable_classes</code> 数组中。如果某个类有父类，父类的 load 方法（如果有）将会先添加到 <code>loadable_classes</code> 里面，这是通过 <code>schedule_class_load</code> 的递归调用保证的。接下来对包含 <code>+load</code> 的分类进行类似的操作，将结果保存在 <code>loadable_categories</code> 数组中。</li><li>调用 <code>call_load_methods</code>，执行 +load 方法。<code>call_load_methods</code> 可能会触发其他镜像的映射(mapping)，其他的镜像映射时可能会有它自己的 <code>+load</code> 调用过程，所以 <code>call_load_methods</code> 可能会发生 Re-entrant。当 Re-entrant 发生时啥也不用做，因为按照我们刚刚的分析，其他镜像加载时执行到 <code>call_load_methods</code> 时，所包含 <code>+load</code> 方法的类和分类已经被添加到了全局的 <code>loadable_classes</code> 和 <code>loadable_categories</code> 中。</li><li>先开启一个 <code>autoreleasepool</code>，接下来会先在一个循环中不断调用先前找到的类的 <code>+load</code> 方法，且保证在一个镜像中，本类的 <code>+load</code> 总是比分类的 <code>+load</code> 先调用</li><li><code>call_class_loads</code> 方法，涉及到一个比较有意思的任务控制。先前我们知道 <code>loadable_classes</code> 数组保存的是 <code>struct loadable_class</code> 结构体，它指向通过 <code>realloc</code> 申请到的内存，在 <code>call_class_loads</code> 中首先用一个临时指针指向该内存区间，然后重置 <code>loadable_classes</code> 相关的全局变量，后续如果其他的 Image 被加载导致 <code>add_class_to_loadable_list</code> 被调用时 <code>loadable_classes</code> 数组会指向重新申请的内存空间，<code>+load</code> 方法会被继续添加到这个数组里面，视 <code>call_class_loads</code> 消耗的速度，<code>loadable_classes</code> 可能是重新申请内存(<code>loadable_classes == NULL</code> 时)，也可能是在原有内存区域扩大空间，这些堆空间最终都会在 <code>call_class_loads</code> 中被 <code>free</code>。回到 <code>call_class_loads</code> 函数，它顺序遍历上述临时指针指向的数组，取出 <code>load_method_t</code> 进行 <code>+load</code> 调用（注意是通过函数地址直接调用，没有走 <code>objc_msgSend</code> 流程），由于该数组中父类的 <code>+load</code> 在前面，所以父类的 <code>+load</code> 方法会被先调用</li><li>对分类的 <code>+load</code> 方法收集和本类的差不多，但是当分类的 Image 在本类的 Image 之前被加载运行时，存在额外的处理流程，所以分类的 <code>+load</code> 调用逻辑会有所不同。先遍历<code>loadable_categories</code>，如果类被首次加载过（Realized）就调用其 <code>+load</code> 方法，然后将该分类的从数组中移除，同时会将 Re-entrant 过程新增加的分类整理到一起，最后如果 <code>loadable_categories_used</code> 不为 0，返回 <code>true</code>，以便在 <code>call_load_methods</code> 中能够通过循环继续处理本次未处理完毕的分类 <code>+load</code> 方法</li></ol></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们通过源码分析 <code>+load</code> 和 <code>+initialize</code> 的调用时机以及它们各自的调用特点，总结如下：</p><ul><li><p><code>+load</code></p><ol><li>类的 <code>+load</code> 方法一定会被调用，而且是在 <code>+main</code> 函数之前被调用</li><li>父类的 <code>+load</code> 方法一定会先于子类的 <code>+load</code> 方法调用，而且在子类的 <code>+load</code> 中不需要添加 <code>[super load];</code></li><li>类的 <code>+load</code> 方法会先于分类的 <code>+load</code> 方法调用</li><li>由于动态链接库先于主程序二进制加载，所以动态链接库里面的 <code>+load</code> 方法会先于主程序的 <code>+load</code> 方法调用</li></ol></li><li><code>+initialize</code><ol><li><code>+initialize</code> 会在类首次收到消息之前调用</li><li>父类的 <code>+initialize</code> 会优先于子类的 <code>+initialize</code> 调用</li><li>runtime 会自动处理对继承链上的 <code>+initialize</code> 调用，所以重写时无需调用 <code>[super initialize];</code></li><li>相对于 <code>+load</code> ，<code>+initialize</code> 是普通方法，可以被交换；在多个分类中被实现时只会调用 Complie Sources 列表中最靠后的分类中的那个</li></ol></li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/LGCooci/objc4_debug/tree/master/objc4-818.2">https://github.com/LGCooci/objc4_debug/tree/master/objc4-818.2</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>尝试过在 <code>KFCRootObject.m</code> 的 <code>+ (void)initialize</code> 处添加断点，但运行时没有进来🤔，知道原因的大佬烦请留言赐教<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>x86_64 架构运行<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>找到对应版本的 <code>dyld</code> 源码：输入 <code>lldb</code> 命令：<code>image list dyld</code>，得到<code>dyld</code>所在路径为：<code>/usr/lib/dyld</code>，使用 MachOView 打开，在 LoadCommand 的 LC_SOURCE_VERSION 中找到源码 Version ，我这里是 <code>832.7.1</code><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>底层</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
      <tag>iOS</tag>
      
      <tag>Runtime</tag>
      
      <tag>Objective-C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给 Xcode 工程的 AppIcon 添加版本信息</title>
    <link href="/posts/4b4dbb8b.html"/>
    <url>/posts/4b4dbb8b.html</url>
    
    <content type="html"><![CDATA[<h1 id="需求由来"><a href="#需求由来" class="headerlink" title="需求由来"></a>需求由来</h1><p>日常开发迭代中，为了能让需求能够被及时验收、让问题 / bug 能得到及时验证，我们编写的代码需要持续地交付，为此我们搭建了 Jenkins 自动工具来交付版本。</p><p>有些时候我们会对同一个 App 并行开发不同的版本，随着不同功能的不同版本的同一 App 的交付（内部测试），产品同学和测试同学可能会搞不清楚自己手机上安装的到底是哪个版本、对应着哪个需求或问题要被验证，他们当然可以进入 App 的“关于 App”的页面查看版本信息，但是平添了操作步骤和相对应的时间成本，而且对于某些闪退问题的反馈，我们开发并不希望多启动一次 App 来破坏可能的沙盒/日志现场。</p><p>为了了却这一烦恼，我们打算结合当前在用的 Jenkins 将 <strong>App 的版本、代码节点位置、代码分支名</strong>直接展示在 AppIcon 上，以便不需要要打开 App 时也能知道这些信息。</p><h1 id="方案调研"><a href="#方案调研" class="headerlink" title="方案调研"></a>方案调研</h1><ol><li><p>介入时机</p><p> 交付给产品同学和测试同学的测试包是通过部署在垃圾桶<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mac Pro">[1]</span></a></sup>上的 Jenkins 构建出来并分发的，我们配置了版本号自增，每次编译都会生成不同的 build 号，所以基于 AppIcon 的修改需要在每次构建时动态生成的，所以在 Jenkins 构建时给 AppIcon 加上这些信息是最合适的，可以放到“构建”步骤中：<br> <img src="4b4dbb8b/1.png" alt=""></p></li><li><p>展示的信息</p><p> 需要的基本信息：App 版本、构建的分支名和 commit-hash，App 版本可以在 Info.plist 或 <code>project.pbxproj</code> 中获取，构建分支信息可以通过 git 命令获取，问题不大🤔</p></li><li><p>技术点</p><p> 预期流程是将上述基础参数动态添加到 AppIcon 上的，涉及到一些图片处理步骤，这方面待选的方案有 <a href="https://github.com/ImageMagick/ImageMagick"><code>ImageMagick</code></a>，其他方面看起来没有技术难点</p></li><li><p>开发语言</p><p> <code>Shell</code> 与系统结合紧密，与操作系统交互时有天然的优势，个人认为 <code>Shell</code> 编写的程序在篇幅短小时无可匹敌，但当篇幅过大时，阅读性和 debug-able 的能力急剧下降，对，其实就是我不会复杂的 <code>Shell</code> 🤦‍♂️。本次选择 <code>Python</code>，它比 Shell 更容易上手，我们可以更多地专注于业务层逻辑，如果需要轮子， <code>Python</code> 中应有尽有。对于图片处理，有知名库：<a href="https://github.com/python-pillow/Pillow"><code>Pillow</code></a>，似乎也可以不用 <code>ImageMagick</code></p></li></ol><h1 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h1><ol><li><p>定义外部接口</p><p> 虽然我们项目是通过 Jenkins 打包，但是这个功能不应该被划分为 Jenkins 流水线的一部分，应该是工程的一部分，跟随工程的迭代而完善。它的输入为外部传入的工程文件（<code>.pbxproj</code>）和目标 <code>Target</code> 名，输出即为加上了版本信息的 AppIcon 图片。最终通过命令行传参作为入口：</p> <figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    pathes = sys.argv[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> []<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pathes) != <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数个数错误&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li><p>接收参数</p><p> 接收外部传入的 target 名和工程文件路径后，对参数作简单校验：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">pbproj_filepath = os.path.abspath(pathes[<span class="hljs-number">0</span>])<br>target_name = pathes[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> Path(pbproj_filepath).exists():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FATAL:&#123;&#125; 不存在&quot;</span>.<span class="hljs-built_in">format</span>(pbproj_filepath))<br>    exit(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li><li><p>获取工程配置信息</p><p> 版本号、所使用的 AppIcon 的路径信息都存在于 <code>.pbxproj</code> 中，接下来使用 <a href="https://github.com/kronenthaler/mod-pbxproj"><code>mod-pbxproj</code></a> 解析 <code>.pbxproj</code>。</p><p> 新创建一个类:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectInfo</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, pbproject_path: <span class="hljs-built_in">str</span>, target_name: <span class="hljs-built_in">str</span></span>):<br>        self.pbproject_path = pbproject_path<br>        self.target_name = target_name<br>        self.project = XcodeProject.load(pbproject_path)<br>        self.build_configs = self.project.objects.get_configurations_on_targets(<br>            target_name=target_name)<br>        self.release_build_config = [<br>            b <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> self.build_configs <span class="hljs-keyword">if</span> b.name == <span class="hljs-string">&#x27;Release&#x27;</span>][-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__find_icon_img_folder</span>(<span class="hljs-params">self, icon_img_name: <span class="hljs-built_in">str</span>, target_folder: <span class="hljs-built_in">str</span></span>):<br>        icon_img_path = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">for</span> root, folder_list, _ <span class="hljs-keyword">in</span> os.walk(target_folder):<br>                <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> folder_list:<br>                    <span class="hljs-keyword">if</span> file == icon_img_name:<br>                        icon_img_path = os.path.join(root, file)<br>                        <span class="hljs-keyword">raise</span> Getoutofloop()<br>        <span class="hljs-keyword">except</span> Getoutofloop:<br>            <span class="hljs-keyword">pass</span><br><br>        <span class="hljs-keyword">return</span> icon_img_path<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__project_main_path</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> os.path.dirname(os.path.split(self.pbproject_path)[<span class="hljs-number">0</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_icon_image_folder</span>(<span class="hljs-params">self</span>):<br>        name = self.release_build_config.buildSettings[<span class="hljs-string">&#x27;ASSETCATALOG_COMPILER_APPICON_NAME&#x27;</span>]<br>        <span class="hljs-keyword">if</span> name:<br>            search_folder = self.__project_main_path()<br>            icon_img_name = name+<span class="hljs-string">&#x27;.appiconset&#x27;</span><br>            <span class="hljs-keyword">return</span> self.__find_icon_img_folder(icon_img_name, search_folder)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;FATAL: AppICON 路径未找到&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get_info_plist_path</span>(<span class="hljs-params">self</span>):<br>        info_plist_path = self.release_build_config.buildSettings[<span class="hljs-string">&#x27;INFOPLIST_FILE&#x27;</span>]<br>        <span class="hljs-keyword">if</span> info_plist_path:<br>            xcode_placeholder_path = <span class="hljs-string">&#x27;$(SRCROOT)&#x27;</span>  <span class="hljs-comment"># 可能在路径中并没有</span><br>            info_plist_path = info_plist_path.replace(<br>                xcode_placeholder_path, <span class="hljs-string">&#x27;&#x27;</span>)<br>            info_plist_path = info_plist_path <span class="hljs-keyword">if</span> info_plist_path[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">else</span> info_plist_path[<span class="hljs-number">1</span>:]<br>            info_plist_path = os.path.join(<br>                self.__project_main_path(), info_plist_path)<br>        <span class="hljs-keyword">return</span> info_plist_path<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_version_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 先从 project 获取，如果失败(失败定义：不全是 数字 和 &#x27;.&#x27; 组成)，从 plist 获取</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">valid_version</span>(<span class="hljs-params">main_version: <span class="hljs-built_in">str</span></span>):<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            如果由 . 和 数字组成，就是合法的；如果全部由数字组成，也是合法的</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> main_version <span class="hljs-keyword">and</span> main_version.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).isdigit()) <span class="hljs-keyword">or</span> main_version.isdigit()<br><br>        main_version = self.release_build_config.buildSettings[<span class="hljs-string">&#x27;CURRENT_PROJECT_VERSION&#x27;</span>]<br>        <span class="hljs-keyword">if</span> main_version <span class="hljs-keyword">and</span> valid_version(main_version):<br>            <span class="hljs-keyword">return</span> main_version<br>        <span class="hljs-keyword">else</span>:<br>            plist_path = self.__get_info_plist_path()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转向从 plist 读取版本号: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(plist_path))<br>            plist = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(plist_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> rbf:<br>                plist = plistlib.load(rbf)<br>            <span class="hljs-keyword">if</span> plist:<br>                <span class="hljs-keyword">return</span> plist[<span class="hljs-string">&#x27;CFBundleShortVersionString&#x27;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_git_branch_name</span>(<span class="hljs-params">self</span>):<br>        name = exe_command([<span class="hljs-string">&#x27;git&#x27;</span>, <span class="hljs-string">&#x27;symbolic-ref&#x27;</span>, <span class="hljs-string">&#x27;--short&#x27;</span>, <span class="hljs-string">&#x27;-q&#x27;</span>, <span class="hljs-string">&#x27;HEAD&#x27;</span>]).split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(name.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> os.environ.get(<span class="hljs-string">&#x27;GIT_BRANCH&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_git_last_cmt_id</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> exe_command([<span class="hljs-string">&#x27;git&#x27;</span>, <span class="hljs-string">&#x27;rev-parse&#x27;</span>, <span class="hljs-string">&#x27;--short&#x27;</span>, <span class="hljs-string">&#x27;HEAD&#x27;</span>])<br></code></pre></td></tr></table></figure><p> 在<code>ProjectInfo</code> 中预期能够拿到版本号、AppIcon 所在路径、branch 名、commit-hash。</p><ul><li><p>版本号</p><p>  使用 <code>mod-pbxproj</code> 初始化工程，然后拿到 <code>CURRENT_PROJECT_VERSION</code> 对应的版本号。这里有一个坑点，Xcode 从 v10 升级到 v11 后，默认从<code>$(MARKETING_VERSION)</code>和<code>$(CURRENT_PROJECT_VERSION)</code>获取主版本号，从旧版本格式的 <code>.pbxproj</code> 升级到 Xcode v11 后，Info.plist 中的<code>Bundle version</code> 甚至有可能为 <code>$(MARKETING_VERSION).xxx</code> ，所以这里做了一个兼容处理。事实上，如果是 Xcode v11 创建的工程版本号就比较清爽，当然对于我们这种旧版本 Xcode 创建的工程，也可以选择手动处理一次，将版本号改成新版本的样式。</p></li><li><p>AppIcon 路径</p><p>  拿到工程所使用的的 AppIcon 文件夹名字后，再遍历找到 AppIcon 文件夹的绝对路径，遍历时涉及到跳出双重循环的问题，这里找到了个人觉得比较 trick 的方式，即通过抛出一个已知的异常 <code>Getoutofloop</code> 来结束双重信息：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Getoutofloop</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>  而之所以需要遍历，是因为我从 <code>.pbxproj</code> 中找不到可以直接“取”出来用的路径，只能使用这种不严谨的方式，如果有更优雅的方式，请不吝指教。</p></li><li><p>branch 名和最后一次 commit-hash</p><p>  这种获取 <code>git</code> 相关信息的，使用命令行应该是最快捷的，所以封装了一个简单的执行 Shell 命令的函数 <code>exe_command</code>:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">exe_command</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    result = subprocess.run(<span class="hljs-built_in">list</span>, stdout=subprocess.PIPE)<br>    <span class="hljs-keyword">return</span> result.stdout.decode(<span class="hljs-string">&quot;utf-8&quot;</span>).strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>  获取分支名遇到的一个坑点：向 Jenkins 指定分支名后，被 pull 到本地的代码似乎是指向一个临时分支，通过 Git 命名并没能获取到分支名，所以这里通过获取 Jenkins 的环境变量 <code>GIT_BRANCH</code> 来获取分支名</p></li></ul></li><li><p>给图片加上自定义文字信息，封装在 <code>AddVersionInfo</code> 中：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddVersionInfo</span>():<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, img_folder: <span class="hljs-built_in">str</span>, version: <span class="hljs-built_in">str</span>, branch_name: <span class="hljs-built_in">str</span>, commit_id: <span class="hljs-built_in">str</span></span>):<br>        self.img_folder = img_folder<br>        self.version = version<br>        self.branch_name = branch_name<br>        self.commit_id = commit_id<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add_img_blur</span>(<span class="hljs-params">cls, img, blur_rect: <span class="hljs-built_in">tuple</span></span>):<br>        img = img.convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>        img.load()<br>        mask = Image.new(<span class="hljs-string">&#x27;L&#x27;</span>, img.size, <span class="hljs-number">0</span>)<br>        draw = ImageDraw.Draw(mask)<br>        <span class="hljs-comment"># 左上角点，右下角点</span><br>        draw.rectangle([blur_rect[:<span class="hljs-number">2</span>], img.size], fill=<span class="hljs-number">255</span>)<br>        height = img.size[<span class="hljs-number">0</span>]<br>        blurred = img.<span class="hljs-built_in">filter</span>(ImageFilter.GaussianBlur(height * <span class="hljs-number">0.06</span>))<br>        img.paste(blurred, mask=mask)<br>        <span class="hljs-keyword">return</span> img<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add_img_txt</span>(<span class="hljs-params">cls, img, draw, txt: <span class="hljs-built_in">str</span>, top_margins: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>):<br>        top_margin = top_margins[<span class="hljs-number">0</span>]<br>        myFont = ImageFont.truetype(<span class="hljs-string">&quot;SFNSMono.ttf&quot;</span>, <span class="hljs-built_in">int</span>(<span class="hljs-number">0.14</span> * img.size[<span class="hljs-number">0</span>]))<br>        txt_size = draw.textsize(txt, font=myFont)<br>        versionTxtO = ((img.size[<span class="hljs-number">0</span>] - txt_size[<span class="hljs-number">0</span>]) / <span class="hljs-number">2</span>, top_margin)<br>        draw.text(versionTxtO, txt, fill=<span class="hljs-string">&quot;black&quot;</span>, font=myFont)<br>        top_margins[<span class="hljs-number">0</span>] = top_margin + txt_size[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> img<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_single_img</span>(<span class="hljs-params">self, img_path: <span class="hljs-built_in">str</span></span>):<br>        img = Image.<span class="hljs-built_in">open</span>(img_path)<br>        blur_rect = (<span class="hljs-number">0</span>, <span class="hljs-built_in">int</span>(img.size[<span class="hljs-number">1</span>]*<span class="hljs-number">0.5</span>),<br>                    <span class="hljs-built_in">int</span>(img.size[<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(img.size[<span class="hljs-number">1</span>]*<span class="hljs-number">0.5</span>))<br>        img = AddVersionInfo.__add_img_blur(img, blur_rect)<br><br>        draw = ImageDraw.Draw(img)<br>        last_top_margin = img.size[<span class="hljs-number">1</span>]*<span class="hljs-number">0.5</span> + <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> txt <span class="hljs-keyword">in</span> [self.version, self.branch_name, self.commit_id]:<br>            margin_wrapper = [last_top_margin]<br>            img = AddVersionInfo.__add_img_txt(<br>                img, draw, txt, top_margins=margin_wrapper)<br>            last_top_margin = margin_wrapper[<span class="hljs-number">0</span>]<br>        img.save(img_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_version_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;版本号:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.version))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;分支:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.branch_name))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;上次提交:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.commit_id))<br>        <span class="hljs-keyword">for</span> root, _, file_list <span class="hljs-keyword">in</span> os.walk(self.img_folder):<br>            <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> file_list:<br>                full_path = os.path.join(root, file)<br>                <span class="hljs-keyword">if</span> os.path.isfile(full_path) <span class="hljs-keyword">and</span> imghdr.what(full_path) <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;png&#x27;</span>]:<br>                    self.add_single_img(full_path)<br></code></pre></td></tr></table></figure><p> 预期是给 <code>.appiconset</code> 中所有图片加上指定文字信息。先在图片的下半部分添加模糊效果，避免文字看不清，接着在模糊部分从上至下绘制文本，保存。由于图片大小不一，所以选择了纤细、清晰的系统字体，并且根据图片大小决定模糊程度和文字字号。</p></li><li><p>运行与部署</p><ul><li><p>加上依赖:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageFilter, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> imghdr<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> typing<br><span class="hljs-keyword">import</span> plistlib<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> pbxproj <span class="hljs-keyword">import</span> PBXNativeTarget<br><span class="hljs-keyword">from</span> pbxproj <span class="hljs-keyword">import</span> XcodeProject<br><span class="hljs-keyword">import</span> os<br></code></pre></td></tr></table></figure></li><li><p>完善入口：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>pathes = sys.argv[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> []<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pathes) != <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数个数错误&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    pbproj_filepath = os.path.abspath(pathes[<span class="hljs-number">0</span>])<br>    target_name = pathes[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> Path(pbproj_filepath).exists():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FATAL:&#123;&#125; 不存在&quot;</span>.<span class="hljs-built_in">format</span>(pbproj_filepath))<br>        exit(<span class="hljs-number">1</span>)<br>    pf = ProjectInfo(pbproj_filepath, target_name)<br>    avi = AddVersionInfo(pf.get_icon_image_folder(),<br>                        pf.get_version_info(),<br>                        pf.get_git_branch_name(),<br>                        pf.get_git_last_cmt_id())<br>    avi.add_version_info()<br></code></pre></td></tr></table></figure></li><li><p>部署<br>  在 Jenkins 的 <code>Execute shell</code> 中加上调用语句:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 ./ScriptsProvisoningfiles/add_logo.py ./MachOExploration.xcodeproj/project.pbxproj MachOExploration<br></code></pre></td></tr></table></figure><p>  然后再执行构建动作。</p></li></ul></li></ol><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>运行 Jenkins 的垃圾桶的算力充足，所以并没有考虑缓存，就每次构建内测包时都版本化处理 AppIcon。如果构建给 Apple，就去掉对 <code>add_logo.py</code> 的调用。也可以作为 Build Phrase 添加到 Xcode 中，实现 Xcode build 时自动执行，但是这时候就要考虑 AppIcon 的复用和缓存问题了。</p><p>目前脚本还不够智能，依赖的一大堆库只能手动安装，后续可以优化为自动检查和安装。</p><details><summary>完整脚本</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/local/bin/python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#</span><br><br>__doc__ = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># pip3 install Pillow --user</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageFilter, ImageDraw, ImageFont<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> imghdr<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><span class="hljs-keyword">import</span> typing<br><span class="hljs-keyword">import</span> plistlib<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> pbxproj <span class="hljs-keyword">import</span> PBXNativeTarget<br><span class="hljs-keyword">from</span> pbxproj <span class="hljs-keyword">import</span> XcodeProject<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddVersionInfo</span>():<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, img_folder: <span class="hljs-built_in">str</span>, version: <span class="hljs-built_in">str</span>, branch_name: <span class="hljs-built_in">str</span>, commit_id: <span class="hljs-built_in">str</span></span>):<br>        self.img_folder = img_folder<br>        self.version = version<br>        self.branch_name = branch_name<br>        self.commit_id = commit_id<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add_img_blur</span>(<span class="hljs-params">cls, img, blur_rect: <span class="hljs-built_in">tuple</span></span>):<br>        img = img.convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br>        img.load()<br>        mask = Image.new(<span class="hljs-string">&#x27;L&#x27;</span>, img.size, <span class="hljs-number">0</span>)<br>        draw = ImageDraw.Draw(mask)<br>        <span class="hljs-comment"># 左上角点，右下角点</span><br>        draw.rectangle([blur_rect[:<span class="hljs-number">2</span>], img.size], fill=<span class="hljs-number">255</span>)<br>        height = img.size[<span class="hljs-number">0</span>]<br>        blurred = img.<span class="hljs-built_in">filter</span>(ImageFilter.GaussianBlur(height * <span class="hljs-number">0.06</span>))<br>        img.paste(blurred, mask=mask)<br>        <span class="hljs-keyword">return</span> img<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add_img_txt</span>(<span class="hljs-params">cls, img, draw, txt: <span class="hljs-built_in">str</span>, top_margins: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>):<br>        top_margin = top_margins[<span class="hljs-number">0</span>]<br>        myFont = ImageFont.truetype(<span class="hljs-string">&quot;SFNSMono.ttf&quot;</span>, <span class="hljs-built_in">int</span>(<span class="hljs-number">0.14</span> * img.size[<span class="hljs-number">0</span>]))<br>        txt_size = draw.textsize(txt, font=myFont)<br>        versionTxtO = ((img.size[<span class="hljs-number">0</span>] - txt_size[<span class="hljs-number">0</span>]) / <span class="hljs-number">2</span>, top_margin)<br>        draw.text(versionTxtO, txt, fill=<span class="hljs-string">&quot;black&quot;</span>, font=myFont)<br>        top_margins[<span class="hljs-number">0</span>] = top_margin + txt_size[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> img<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_single_img</span>(<span class="hljs-params">self, img_path: <span class="hljs-built_in">str</span></span>):<br>        img = Image.<span class="hljs-built_in">open</span>(img_path)<br>        blur_rect = (<span class="hljs-number">0</span>, <span class="hljs-built_in">int</span>(img.size[<span class="hljs-number">1</span>]*<span class="hljs-number">0.5</span>),<br>                     <span class="hljs-built_in">int</span>(img.size[<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(img.size[<span class="hljs-number">1</span>]*<span class="hljs-number">0.5</span>))<br>        img = AddVersionInfo.__add_img_blur(img, blur_rect)<br><br>        draw = ImageDraw.Draw(img)<br>        last_top_margin = img.size[<span class="hljs-number">1</span>]*<span class="hljs-number">0.5</span> + <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> txt <span class="hljs-keyword">in</span> [self.version, self.branch_name, self.commit_id]:<br>            margin_wrapper = [last_top_margin]<br>            img = AddVersionInfo.__add_img_txt(<br>                img, draw, txt, top_margins=margin_wrapper)<br>            last_top_margin = margin_wrapper[<span class="hljs-number">0</span>]<br>        img.save(img_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_version_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;版本号:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.version))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;分支:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.branch_name))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;上次提交:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.commit_id))<br>        <span class="hljs-keyword">for</span> root, _, file_list <span class="hljs-keyword">in</span> os.walk(self.img_folder):<br>            <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> file_list:<br>                full_path = os.path.join(root, file)<br>                <span class="hljs-keyword">if</span> os.path.isfile(full_path) <span class="hljs-keyword">and</span> imghdr.what(full_path) <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;png&#x27;</span>]:<br>                    self.add_single_img(full_path)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exe_command</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    result = subprocess.run(<span class="hljs-built_in">list</span>, stdout=subprocess.PIPE)<br>    <span class="hljs-keyword">return</span> result.stdout.decode(<span class="hljs-string">&quot;utf-8&quot;</span>).strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Getoutofloop</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectInfo</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, pbproject_path: <span class="hljs-built_in">str</span>, target_name: <span class="hljs-built_in">str</span></span>):<br>        self.pbproject_path = pbproject_path<br>        self.target_name = target_name<br>        self.project = XcodeProject.load(pbproject_path)<br>        self.build_configs = self.project.objects.get_configurations_on_targets(<br>            target_name=target_name)<br>        self.release_build_config = [<br>            b <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> self.build_configs <span class="hljs-keyword">if</span> b.name == <span class="hljs-string">&#x27;Release&#x27;</span>][-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__find_icon_img_folder</span>(<span class="hljs-params">self, icon_img_name: <span class="hljs-built_in">str</span>, target_folder: <span class="hljs-built_in">str</span></span>):<br>        icon_img_path = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">for</span> root, folder_list, _ <span class="hljs-keyword">in</span> os.walk(target_folder):<br>                <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> folder_list:<br>                    <span class="hljs-keyword">if</span> file == icon_img_name:<br>                        icon_img_path = os.path.join(root, file)<br>                        <span class="hljs-keyword">raise</span> Getoutofloop()<br>        <span class="hljs-keyword">except</span> Getoutofloop:<br>            <span class="hljs-keyword">pass</span><br><br>        <span class="hljs-keyword">return</span> icon_img_path<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__project_main_path</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> os.path.dirname(os.path.split(self.pbproject_path)[<span class="hljs-number">0</span>])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_icon_image_folder</span>(<span class="hljs-params">self</span>):<br>        name = self.release_build_config.buildSettings[<span class="hljs-string">&#x27;ASSETCATALOG_COMPILER_APPICON_NAME&#x27;</span>]<br>        <span class="hljs-keyword">if</span> name:<br>            search_folder = self.__project_main_path()<br>            icon_img_name = name+<span class="hljs-string">&#x27;.appiconset&#x27;</span><br>            <span class="hljs-keyword">return</span> self.__find_icon_img_folder(icon_img_name, search_folder)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;FATAL: AppICON 路径未找到&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__get_info_plist_path</span>(<span class="hljs-params">self</span>):<br>        info_plist_path = self.release_build_config.buildSettings[<span class="hljs-string">&#x27;INFOPLIST_FILE&#x27;</span>]<br>        <span class="hljs-keyword">if</span> info_plist_path:<br>            xcode_placeholder_path = <span class="hljs-string">&#x27;$(SRCROOT)&#x27;</span>  <span class="hljs-comment"># 可能在路径中并没有</span><br>            info_plist_path = info_plist_path.replace(<br>                xcode_placeholder_path, <span class="hljs-string">&#x27;&#x27;</span>)<br>            info_plist_path = info_plist_path <span class="hljs-keyword">if</span> info_plist_path[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">else</span> info_plist_path[<span class="hljs-number">1</span>:]<br>            info_plist_path = os.path.join(<br>                self.__project_main_path(), info_plist_path)<br>        <span class="hljs-keyword">return</span> info_plist_path<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_version_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 先从 project 获取，如果失败(失败定义：不全是 数字 和 &#x27;.&#x27; 组成)，从 plist 获取</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">valid_version</span>(<span class="hljs-params">main_version: <span class="hljs-built_in">str</span></span>):<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            如果由 . 和 数字组成，就是合法的；如果全部由数字组成，也是合法的</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> main_version <span class="hljs-keyword">and</span> main_version.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).isdigit()) <span class="hljs-keyword">or</span> main_version.isdigit()<br>        <span class="hljs-comment"># 主包的主工程版本号读取</span><br>        main_version = self.release_build_config.buildSettings[<span class="hljs-string">&#x27;MARKETING_VERSION&#x27;</span>]<br>        <span class="hljs-keyword">if</span> main_version <span class="hljs-keyword">and</span> valid_version(main_version):<br>            plist_path = self.__get_info_plist_path()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转向从 plist 读取版本号: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(plist_path))<br>            plist = <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(plist_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> rbf:<br>                plist = plistlib.load(rbf)<br>            <span class="hljs-keyword">if</span> plist:<br>                <span class="hljs-keyword">return</span> main_version+<span class="hljs-string">&#x27;.&#x27;</span>+plist[<span class="hljs-string">&#x27;CFBundleVersion&#x27;</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_git_branch_name</span>(<span class="hljs-params">self</span>):<br>        name = exe_command([<span class="hljs-string">&#x27;git&#x27;</span>, <span class="hljs-string">&#x27;symbolic-ref&#x27;</span>, <span class="hljs-string">&#x27;--short&#x27;</span>, <span class="hljs-string">&#x27;-q&#x27;</span>, <span class="hljs-string">&#x27;HEAD&#x27;</span>]).split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(name.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> os.environ.get(<span class="hljs-string">&#x27;GIT_BRANCH&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_git_last_cmt_id</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> exe_command([<span class="hljs-string">&#x27;git&#x27;</span>, <span class="hljs-string">&#x27;rev-parse&#x27;</span>, <span class="hljs-string">&#x27;--short&#x27;</span>, <span class="hljs-string">&#x27;HEAD&#x27;</span>])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    pathes = sys.argv[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> []<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pathes) != <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数个数错误&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        pbproj_filepath = os.path.abspath(pathes[<span class="hljs-number">0</span>])<br>        target_name = pathes[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> Path(pbproj_filepath).exists():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FATAL:&#123;&#125; 不存在&quot;</span>.<span class="hljs-built_in">format</span>(pbproj_filepath))<br>            exit(<span class="hljs-number">1</span>)<br>        pf = ProjectInfo(pbproj_filepath, target_name)<br>        avi = AddVersionInfo(pf.get_icon_image_folder(),<br>                             pf.get_version_info(),<br>                             pf.get_git_branch_name(),<br>                             pf.get_git_last_cmt_id())<br>        avi.add_version_info()<br></code></pre></td></tr></table></figure></details><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Mac Pro<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>iOS</tag>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
      <tag>Xcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fishhook 原理及其源码阅读</title>
    <link href="/posts/349e475.html"/>
    <url>/posts/349e475.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>通过前面的两篇<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Mach-O 文件结构详解和Mach-O 加载时的动态链接">[1]</span></a></sup>文章，大概上弄清楚了 Mach-O 的基本结构和加载过程，接下来将尽可能详细地分析 [fishhook] 源码。</p></blockquote><h1 id="fishhook"><a href="#fishhook" class="headerlink" title="fishhook"></a>fishhook</h1><p>fishhook 是一个非常简单的库，在 iOS 系统的模拟器或真机上，它能对 Mach-O 二进制文件动态地进行符号的重绑定，可以用来跟踪或调试来自系统库里面的函数运行情况。对于来自动态库里面的函数，Mach-O 二进制中只是在运行时将其真实地址链接进来，fishhook 利用这个链接机制进行工作，所以它只能对动态链接的函数才起作用，对在编译时就确定了函数地址的函数不起作用。</p><h1 id="fishhook-原理"><a href="#fishhook-原理" class="headerlink" title="fishhook 原理"></a>fishhook 原理</h1><p>GitHub 官方页面的这张图可以概括原理：<br>    <img src="349e475/fish-hook-detail.jpg" alt="原理图"><br>官方文档的翻译：</p><blockquote><p><code>dyld</code> 通过更新 Mach-O 二进制文件 __DATA 段特定 Section 中的指针来绑定懒加载符号和非懒加载符号。 fishhook 通过确定 <code>rebind_symbols</code> 中的每个符号名字的更新位置来重新绑定这些符号，然后写回相应的替换符号。</p><p>对于给定的 image，<code>__DATA</code> 段包含的可能与动态符号绑定相关的 Setcion 有两个：<code>__nl_symbol_ptr</code> 和 <code>__la_symbol_ptr</code>。 <code>__nl_symbol_ptr</code> 是指向非延迟绑定符号的指针数组（这些指针在加载库时就被绑定），而 <code>__la_symbol_ptr</code> 是引入函数符号的指针数组，在第一次被调用时这些数组通常填充着名为 <code>dyld_stub_binder</code> 的程序（也可以告诉 <code>dyld</code> 在启动时就绑定这些符号）。为了在这些 Section 之中找到与特定位置相对应的符号名称，我们必须跳跃在一些中间层上间接寻址。对于这两个关联的 Section ，Section 标题（定义自 <code>&lt;mach-o/loader.h&gt;</code> 中 section struct）提供了到间接符号表（Indirect Symbol）的偏移量（在 <code>reserved1</code> 字段中）。间接符号表位于二进制文件的 <code>__LINKEDIT</code> 段中，它只是符号表中的索引数组，其索引顺序与非懒加载和懒加载符号数组中的符号顺序相同。因此，对于给定的 <code>nl_symbol_ptr</code> 类型 section  ，该 section 中符号表第一个地址对应索引为 <code>indirect_symbol_table[nl_symbol_ptr-&gt; reserved1]</code><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="indirect_symbol_table[nl_symbol_ptr-&gt;reserved1] 等同于 indirect_symtab + section-&gt;reserved1，都是说明当前 section 第一个符号在 Indirect Symbol 中的位置">[2]</span></a></sup>。符号表本身是 <code>nlist</code> 数组（请参见 <code>&lt;mach-o/nlist.h&gt;</code>），每个 <code>nlist</code> 都包含一个指向字符串表的索引，该索引位置刚好存储了 <code>nlist</code> 实际的符号名。因此，对于每个<strong>nl_symbol_ptr和</strong>la_symbol_ptr中的符号指针，我们都可以找到对应的符号，然后找到对应的字符串以与请求的符号名称进行比较，如果存在匹配项，则用 <code>replacement</code> 替换该部分的指针内容。</p></blockquote><h1 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h1><p>我建了一个 <a href="https://github.com/Navimark/FISHHOOKDEMO">demo 工程</a>，加了一些便于调试的代码。fishhook 的代码非常简洁，只有两个文件，我们先看<code>.h</code>文件。其中包含一组宏定义:<br><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(FISHHOOK_EXPORT)</span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> FISHHOOK_VISIBILITY __attribute__((visibility(<span class="hljs-string">&quot;hidden&quot;</span>)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> FISHHOOK_VISIBILITY __attribute__((visibility(<span class="hljs-string">&quot;default&quot;</span>)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><br>这是控制符号对外可见性，当使用 <code>__attribute__((visibility(&quot;default&quot;)))</code> 时所修饰的符号对外默认可见，而使用 <code>__attribute__((visibility(&quot;hidden&quot;)))</code> 时对外隐藏该符号。该机制是为了避免符号冲突，尤其是对于动态链接库，不必要可见的符号都应该设置为<code>hidden</code>。</p><ul><li><p><code>rebind_symbols</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">rebind_symbols</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rebinding rebindings[], <span class="hljs-type">size_t</span> rebindings_nel)</span> &#123;<br>  <span class="hljs-type">int</span> retval = prepend_rebindings(&amp;_rebindings_head, rebindings, rebindings_nel);<br>  <span class="hljs-keyword">if</span> (retval &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> retval;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!_rebindings_head-&gt;next) &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    _dyld_register_func_for_add_image 被调用时，</span><br><span class="hljs-comment">    已经被 dyld 加载的 image 会立刻回调，</span><br><span class="hljs-comment">    后续被 dyld 新加载的 image 也会触发回调</span><br><span class="hljs-comment">  */</span><br>    _dyld_register_func_for_add_image(_rebind_symbols_for_image);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-type">uint32_t</span> c = _dyld_image_count();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> i = <span class="hljs-number">0</span>; i &lt; c; i++) &#123;<br>      _rebind_symbols_for_image(_dyld_get_image_header(i), \<br>      _dyld_get_image_vmaddr_slide(i));<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> retval;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先创建了一个静态指针指向的链表数据结构，后来添加的数据会插入到头部，保证后来添加的数据优先被处理。<br>随后流程被转向 <code>rebind_symbols_for_image</code> 函数</p></li><li><p><code>rebind_symbols_for_image</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">rebind_symbols_for_image</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rebindings_entry *rebindings,</span><br><span class="hljs-params">                                       <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> mach_header *header,</span><br><span class="hljs-params">                                       <span class="hljs-type">intptr_t</span> slide)</span> &#123;<br>    Dl_info info;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">       向 dyld 查询 header 指向的地址是否存在于某一个 image 里面。</span><br><span class="hljs-comment">       如果存在，返回非 0；info 中存放具体信息</span><br><span class="hljs-comment">       如果返回为 0 表示不存在</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (dladdr(header, &amp;info) == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 如果 pathname 以 /private/var 开头，可以认为就是 execute 这个 image</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname = info.dli_fname;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(pathname) &gt; <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-type">char</span> subPathname[<span class="hljs-number">9</span>] = &#123;<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>        <span class="hljs-type">char</span> target[<span class="hljs-number">9</span>] = <span class="hljs-string">&quot;/private&quot;</span>;<br>        <span class="hljs-built_in">strncpy</span>(subPathname, pathname, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(subPathname, target)) &#123;<br>            isMainImage = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">segment_command_t</span> *cur_seg_cmd;<br>    <span class="hljs-type">segment_command_t</span> *linkedit_segment = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">symtab_command</span>* <span class="hljs-title">symtab_cmd</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dysymtab_command</span>* <span class="hljs-title">dysymtab_cmd</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">/* 通过遍历找到 Load Commnads 中 LC_SEGMENT_64.info（）、LC_SYMTAB(规定</span><br><span class="hljs-comment">                了 symbol table 和 string table 在文件中的位置与大小)、LC_DYSYMTAB，</span><br><span class="hljs-comment">                    并用指针分别指向他们</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">uintptr_t</span> cur = (<span class="hljs-type">uintptr_t</span>)header + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">mach_header_t</span>);<br>    <span class="hljs-keyword">for</span> (uint i = <span class="hljs-number">0</span>; i &lt; header-&gt;ncmds; i++, cur += cur_seg_cmd-&gt;cmdsize) &#123;<br>      cur_seg_cmd = (<span class="hljs-type">segment_command_t</span> *)cur;<br>      <span class="hljs-keyword">if</span> (cur_seg_cmd-&gt;cmd == LC_SEGMENT_ARCH_DEPENDENT) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cur_seg_cmd-&gt;segname, SEG_LINKEDIT) == <span class="hljs-number">0</span>) &#123;<br>          linkedit_segment = cur_seg_cmd;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur_seg_cmd-&gt;cmd == LC_SYMTAB) &#123;<br>        symtab_cmd = (<span class="hljs-keyword">struct</span> symtab_command*)cur_seg_cmd;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur_seg_cmd-&gt;cmd == LC_DYSYMTAB) &#123;<br>        dysymtab_cmd = (<span class="hljs-keyword">struct</span> dysymtab_command*)cur_seg_cmd;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!symtab_cmd || !dysymtab_cmd || !linkedit_segment ||<br>        !dysymtab_cmd-&gt;nindirectsyms) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* Find base symbol/string table addresses</span><br><span class="hljs-comment">     ASLR 地址 + linkedit 描述的 segment 被加载到内存后的地址 - linkedit 在文件中的偏移 =</span><br><span class="hljs-comment">                        文件开始位置在内存中的地址（file Offset 为 0 的地方）的值</span><br><span class="hljs-comment">     如果 16 进制查看（ p/x linkedit_base）其值，会发现和 header 指针相同</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">uintptr_t</span> linkedit_base = (<span class="hljs-type">uintptr_t</span>)slide + linkedit_segment-&gt;vmaddr - \ <br>       linkedit_segment-&gt;fileoff;<br>    <span class="hljs-comment">/* 得到 LC_SYMTAB 在内存中的地址。体现了 Mach-O 的某一处相对于文件偏移的位置，</span><br><span class="hljs-comment">      是如何对应到运行时的内存地址</span><br><span class="hljs-comment">     symbol table 是一个 nlist_64 结构体数组，所以指向结构体数组指针</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">nlist_t</span> *symtab = (<span class="hljs-type">nlist_t</span> *)(linkedit_base + symtab_cmd-&gt;symoff);<br>    <span class="hljs-comment">//  strtab 以 &#x27;\0&#x27; 分割的，列出了所有可见字符串</span><br>    <span class="hljs-comment">// string table 就是 ASCII 组成的数组，所以使用 char* 描述</span><br>    <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">char</span> *)(linkedit_base + symtab_cmd-&gt;stroff);<br>    <br>    <br>    <span class="hljs-comment">// Get indirect symbol table (array of uint32_t indices into symbol table)</span><br>    <span class="hljs-comment">// Dynamic Symbol Table (Indirect Symbols) 在内存中的地址</span><br>    <span class="hljs-type">uint32_t</span> *indirect_symtab = (<span class="hljs-type">uint32_t</span> *)(linkedit_base + \ <br>      dysymtab_cmd-&gt;indirectsymoff);<br><br>    cur = (<span class="hljs-type">uintptr_t</span>)header + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">mach_header_t</span>);<br>    <span class="hljs-comment">// 每遍历一个，序号 i ++，cur 指向下一个 load command 的头部</span><br>    <span class="hljs-keyword">for</span> (uint i = <span class="hljs-number">0</span>; i &lt; header-&gt;ncmds; i++, cur += cur_seg_cmd-&gt;cmdsize) &#123;<br>      cur_seg_cmd = (<span class="hljs-type">segment_command_t</span> *)cur;<br>      <span class="hljs-keyword">if</span> (cur_seg_cmd-&gt;cmd == LC_SEGMENT_ARCH_DEPENDENT) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(cur_seg_cmd-&gt;segname, SEG_DATA) != <span class="hljs-number">0</span> &amp;&amp;<br>            <span class="hljs-built_in">strcmp</span>(cur_seg_cmd-&gt;segname, SEG_DATA_CONST) != <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">continue</span>;<br>        &#125;<br>          <span class="hljs-comment">/* segment.name 为 __DATA 或 __DATA_CONST，因为动态链接库的符号的 stub 就在里面指定。</span><br><span class="hljs-comment">           __TEXT.__stubs 的这里不用管，因为当某一个延迟绑定的函数被调用时，</span><br><span class="hljs-comment">           一定会被转 __DATA_CONST和__DATA的 __got 或 __la_symbol_ptr区域</span><br><span class="hljs-comment">           </span><br><span class="hljs-comment">           非延迟绑定的符号(来自于 __DATA_CONST.__got) 也能被重新绑定，</span><br><span class="hljs-comment">           因为它和延迟绑定的符号工作机制相同，只是绑定时机不同</span><br><span class="hljs-comment">           */</span><br>        <span class="hljs-keyword">for</span> (uint j = <span class="hljs-number">0</span>; j &lt; cur_seg_cmd-&gt;nsects; j++) &#123;<br>          <span class="hljs-type">section_t</span> *sect =<br>            (<span class="hljs-type">section_t</span> *)(cur + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">segment_command_t</span>)) + j;<br>            <span class="hljs-comment">/* 遍历 __DATA 和 __DATA_CONST 的每一个 section，</span><br><span class="hljs-comment">                找到延迟绑定和非延迟绑定符号所在的 section，然后琢磨着偷梁换柱</span><br><span class="hljs-comment">                */</span><br>          <span class="hljs-keyword">if</span> ((sect-&gt;flags &amp; SECTION_TYPE) == S_LAZY_SYMBOL_POINTERS) &#123;<br>              <span class="hljs-keyword">if</span> (isMainImage) &#123;<br>                  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;section.name=%s,reserved1=%d\n\n&quot;</span>,\ <br>                  sect-&gt;sectname,sect-&gt;reserved1);<br>              &#125;<br>            perform_rebinding_with_section(rebindings, sect, slide, \ <br>              symtab, strtab, indirect_symtab);<br>          &#125;<br>          <span class="hljs-keyword">if</span> ((sect-&gt;flags &amp; SECTION_TYPE) == S_NON_LAZY_SYMBOL_POINTERS) &#123;<br>              <span class="hljs-keyword">if</span> (isMainImage) &#123;<br>                  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;section.name=%s,reserved1=%d\n\n&quot;</span>,\ <br>                  sect-&gt;sectname,sect-&gt;reserved1);<br>              &#125;<br>            perform_rebinding_with_section(rebindings, sect, \ <br>            slide, symtab, strtab, indirect_symtab);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一步是将所有 <code>image</code> 的懒加载符号表、非懒加载符号表、字符串表、间接符号表的入口位置找到，然后准备调动<code>perform_rebinding_with_section</code> 进行真正的绑定逻辑。<br>这个函数每一个 <code>image</code> 都会被调用，为了专注于当前二进制所在的 <code>image</code>，我添加了一个静态变量辅助断点:<code>static bool isMainImage = false;</code>，个人认为比较难以理解的行都加上了详细的注释。</p></li><li><p><code>perform_rebinding_with_section</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">perform_rebinding_with_section</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> rebindings_entry *rebindings,</span><br><span class="hljs-params">                                             <span class="hljs-type">section_t</span> *section,</span><br><span class="hljs-params">                                             <span class="hljs-type">intptr_t</span> slide,</span><br><span class="hljs-params">                                             <span class="hljs-type">nlist_t</span> *symtab,</span><br><span class="hljs-params">                                             <span class="hljs-type">char</span> *strtab,</span><br><span class="hljs-params">                                             <span class="hljs-type">uint32_t</span> *indirect_symtab)</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">bool</span> isDataConst = <span class="hljs-built_in">strcmp</span>(section-&gt;segname, SEG_DATA_CONST) == <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/* __DATA 和 __DATA_CONST 的延迟和非延迟绑定 section 的 reserved1 字段</span><br><span class="hljs-comment">    section.name = __got, reserved1=31; section.name = __la_symbol_ptr, reserved1 = 34</span><br><span class="hljs-comment">     通过在间接跳转表中偏移 section-&gt;reserved1，找到当前 section （可能为__got 或 </span><br><span class="hljs-comment">        __la_symbol_ptr）第一个符号表在间接跳转表中的位置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">uint32_t</span> *indirect_symbol_indices = indirect_symtab + section-&gt;reserved1;<br>    <span class="hljs-keyword">if</span> (isMainImage) &#123;<span class="hljs-comment">// FISHIHOOkDEMO</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got U!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/** 1. 二级指针，指向当前 section 的头部</span><br><span class="hljs-comment">    2. 当前 Section 是 __DATA 类型 Section，懒加载（或非懒加载）符号表里面的每一项的值是一个地址，</span><br><span class="hljs-comment">        虽然初始值可能不相同，但最终的预期都是指向各自的真实函数的地址</span><br><span class="hljs-comment">    3. 对于我们来说，需要修改的是指针指向的指针的值，所以此处直接申明为二级指针</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">void</span> **indirect_symbol_bindings = (<span class="hljs-type">void</span> **)((<span class="hljs-type">uintptr_t</span>)slide + section-&gt;addr);<br>    <span class="hljs-type">vm_prot_t</span> oldProtection = VM_PROT_READ;<br>    <span class="hljs-keyword">if</span> (isDataConst) &#123;<br>      <span class="hljs-comment">/* 对于 __DATA_CONST，需要修改内存权限，暂时修改为可读可写，</span><br><span class="hljs-comment">          以便接下来能够将 replacement 地址写入</span><br><span class="hljs-comment">      */</span><br>      oldProtection = get_protection(rebindings);<br>      mprotect(indirect_symbol_bindings, section-&gt;size, PROT_READ | PROT_WRITE);<br>    &#125;<br>    <span class="hljs-comment">/* 名字为 __got 或 __la_symbol_ptr 的 Section 就是存放一系列函数地址的列表，</span><br><span class="hljs-comment">      所以将 sizeof(void *) 作为循环步进长度</span><br><span class="hljs-comment">      */</span><br>    <span class="hljs-keyword">for</span> (uint i = <span class="hljs-number">0</span>; i &lt; section-&gt;size / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span> *); i++) &#123;<br>        <span class="hljs-comment">/* 相当于是取 indirect_symbol_indices 指向地址偏移 (sizeof(uint32_t *) * i) 处的值，</span><br><span class="hljs-comment">                    这是一个索引，可以在 symbol table 中找到具体的 symbol 结构（nlist_64）</span><br><span class="hljs-comment">         */</span><br>      <span class="hljs-type">uint32_t</span> symtab_index = indirect_symbol_indices[i];<br>      <span class="hljs-keyword">if</span> (symtab_index == INDIRECT_SYMBOL_ABS || \ <br>          symtab_index == INDIRECT_SYMBOL_LOCAL ||<br>          symtab_index == (INDIRECT_SYMBOL_LOCAL   | INDIRECT_SYMBOL_ABS)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-comment">/* 在 symbol table （nlist_64） 中得到当前符号在字符串表中的偏移，</span><br><span class="hljs-comment">          并在字符串表中取到当前符号的名字（字符串）</span><br><span class="hljs-comment">      */</span><br>      <span class="hljs-type">uint32_t</span> strtab_offset = symtab[symtab_index].n_un.n_strx;<br>      <span class="hljs-type">char</span> *symbol_name = strtab + strtab_offset;<br>        <span class="hljs-comment">/* 字符串长度为 0 或者为 1 时，第 0 或第 1 个位置肯定是 &#x27;\0&#x27;，</span><br><span class="hljs-comment">          任意值与它 &amp;&amp; 运算时一定为 false。为 false 时即字符串说明长度小于等于 1</span><br><span class="hljs-comment">         */</span><br>      <span class="hljs-type">bool</span> symbol_name_longer_than_1 = symbol_name[<span class="hljs-number">0</span>] &amp;&amp; symbol_name[<span class="hljs-number">1</span>];<br>      <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rebindings_entry</span> *<span class="hljs-title">cur</span> =</span> rebindings;<br>      <span class="hljs-keyword">while</span> (cur) &#123; <span class="hljs-comment">// 典型的链表遍历</span><br>        <span class="hljs-keyword">for</span> (uint j = <span class="hljs-number">0</span>; j &lt; cur-&gt;rebindings_nel; j++) &#123;<br>            <span class="hljs-comment">/* 比较当前遍历的字符串是否和待替换的相同</span><br><span class="hljs-comment">             `[]`的优先级高于`&amp;`，所以 `&amp;symbol_name[1]` 取的是去掉</span><br><span class="hljs-comment">              第一个字符后的字符串（字符串总是以&#x27;\0&#x27;为终止条件），即去掉编译器在函数前面添加的&quot;_&quot;</span><br><span class="hljs-comment">             这也是为什么要求字符串长度大于 1 的原因</span><br><span class="hljs-comment">             */</span><br>          <span class="hljs-keyword">if</span> (symbol_name_longer_than_1 &amp;&amp;<br>              <span class="hljs-built_in">strcmp</span>(&amp;symbol_name[<span class="hljs-number">1</span>], cur-&gt;rebindings[j].name) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cur-&gt;rebindings[j].replaced != <span class="hljs-literal">NULL</span> &amp;&amp;<br>                indirect_symbol_bindings[i] != cur-&gt;rebindings[j].replacement) &#123;<br>                <span class="hljs-comment">/* indirect_symbol_bindings[i] 存放的是系统原来的实现函数的指针：</span><br><span class="hljs-comment">                      对于懒加载符号，如果在这之前已经被绑定过，</span><br><span class="hljs-comment">                        indirect_symbol_bindings[i] 就是该符号真实地址；</span><br><span class="hljs-comment">                      如果没有被绑定过，</span><br><span class="hljs-comment">                        indirect_symbol_bindings[i] 就指向 __TEXT.__stub_helper 中</span><br><span class="hljs-comment">                 不管怎么样，系统原来的实现地址（也可能是间接地址），</span><br><span class="hljs-comment">                  会被存入 replaced 指针指向的空间中</span><br><span class="hljs-comment">                 replaced 是一个二级指针，值为二级指针的地址，初始时指向的内容为 0x00</span><br><span class="hljs-comment">                 二级指针的目的：为了和 indirect_symbol_bindings 的结构保持一致，</span><br><span class="hljs-comment">                        以便在首次调用时能够借助 __TEXT.__stub_helper 将符号的真实地址写回来</span><br><span class="hljs-comment">                 */</span><br>              *(cur-&gt;rebindings[j].replaced) = indirect_symbol_bindings[i];<br>            &#125;<br>              <span class="hljs-comment">/* 新的函数地址写入到了当前 Section 的符号表项目中，</span><br><span class="hljs-comment">                以后在调用时读取符号表的此项目 Data 时，读取的就是 replacement 的地址</span><br><span class="hljs-comment">               */</span><br>            indirect_symbol_bindings[i] = cur-&gt;rebindings[j].replacement;<br>              <span class="hljs-comment">// 如果找到了，对符号表 Section 中的下一个符号进行检查</span><br>            <span class="hljs-keyword">goto</span> symbol_loop;<br>          &#125;<br>        &#125;<br>        cur = cur-&gt;next;<br>      &#125;<br>    symbol_loop:;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isDataConst) &#123;<br>        <span class="hljs-comment">// __DATA_CONST 类型的 Section 内存写入完成后，恢复成原来的内存权限</span><br>      <span class="hljs-type">int</span> protection = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> (oldProtection &amp; VM_PROT_READ) &#123;<br>        protection |= PROT_READ;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (oldProtection &amp; VM_PROT_WRITE) &#123;<br>        protection |= PROT_WRITE;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (oldProtection &amp; VM_PROT_EXECUTE) &#123;<br>        protection |= PROT_EXEC;<br>      &#125;<br>      mprotect(indirect_symbol_bindings, section-&gt;size, protection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一步是核心逻辑，我带着“为什么”去理解每一行，并做了详细的记录，其中有很多涉及到 <code>c</code> 语言中指针类型的运用，也有和 Mach-O 中各数据结构相关的，需要对照着头文件去一步一步理解。当然，如有理解不到位的，还是非常希望得到大佬的指正。</p></li></ul><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>这是 Mach-O 系列文章的第三篇。Mach-O 连接着应用程序和操作系统，通过它能够熟悉操作系统对应用程序的加载和处理过程，而在这些过程中往往隐藏着魔法，比如目前热门的“二进制重排提升启动速度”、“通过 zsource 保留二进制组件化后源码调试能力”、“符号表被 strip 后的重建”、“ALSR 与 PIC、PIE的原理与应用”、“解析崩溃日志 .crash” 等技术点和其解决方案，如果我们熟悉了底层的原理后，在回头去看这些技术方案肯定会事半功倍，甚至能够提出更好的解决方案。</p><p>在这之前，我对汇编一窍不通，而且看到汇编就想跳过，但是在前段的学习过程中，我尝试让自己热爱汇编，对照 MachOView 逐行单步调试去理解符号的绑定流程，不懂的就去查，慢慢地，我能看懂了一些汇编代码，体会到了汇编代码操作地址和数据的魅力，也终于弄懂了符号绑定的流程。到后来，我对汇编没有了抗拒感，虽然也还是有很多看不懂，但心态变得积极，非常渴望去弄清楚。我相信一件事情，只要“热爱”了、动手去做了，肯定就能成！</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://navimark.github.io/posts/a58100d4.html">Mach-O 文件结构详解</a>和<a href="https://navimark.github.io/posts/a5ddcb7c.html">Mach-O 加载时的动态链接</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><code>indirect_symbol_table[nl_symbol_ptr-&gt;reserved1]</code> 等同于 <code>indirect_symtab + section-&gt;reserved1</code>，都是说明当前 section 第一个符号在 Indirect Symbol 中的位置<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Mach-O</category>
      
      <category>底层</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
      <tag>Mach-O</tag>
      
      <tag>加载方式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mach-O 加载时的动态链接</title>
    <link href="/posts/a5ddcb7c.html"/>
    <url>/posts/a5ddcb7c.html</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://navimark.github.io/posts/a58100d4.html">Mach-O 文件结构详解</a>中分析了 Mach-O 的构成，介绍了部分 <code>Segment</code> 和 <code>Section</code> 的结构和其作用，相当于是静态分析。这篇文章将分析 Mach-O 加载时动态链接过程，加深自己的理解。</p></blockquote><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><p>iOS App 的启动过程大概分为这几个步骤：</p><ol><li>内核初始化部分，负责将 App 的 Mach-O Header 映射到内存中进行处理然后调用 <code>dyld</code> </li><li><code>dyld</code> 负责将 App 处理为一个可以运行的状态，通过添加 <code>DYLD_PRINT_STATISTICS</code> 环境变量可以查看各个阶段，包括：<ul><li>加载 Mach-O 的依赖库。所依赖的库信息在 Mach-O 的 <code>Load Commands</code> 中可以看到</li><li>Fix-ups，地址修正。当所依赖的动态链接库加载完成后，它们彼此间独立，该阶段负责将它们绑定起来。其中 Fix-ups 包括两部分：<ol><li><code>Rebasing</code>：将 App 可行文件中指向内部的指针进行指向修正</li><li><code>Binding</code>：修复 App 可执行文件中指向外部的指针</li></ol></li><li>ObjC 环境配置。该阶段进行<code>Class</code>、<code>Category</code>的注册和<code>SEL</code>的分配。</li><li>initializer 。<code>+load</code> 在该阶段执行</li></ul></li><li>进入 <code>main()</code> 和 <code>UIApplicationDelegate</code> 回调状态执行阶段，展示自定义 UI</li></ol><h2 id="符号绑定（Binding）"><a href="#符号绑定（Binding）" class="headerlink" title="符号绑定（Binding）"></a>符号绑定（Binding）</h2><p>  Mach-O 加载时，符号分成了懒加载符号和非懒加载符号，非懒加载符号在 <code>dyld</code> 加载 Mach-O 时就会绑定真实地址；对于来自于系统动态链接库或者独立于 Main Execute Binary（Mach-O） 之外的懒加载符号，只在在它们第一次被调用时才会绑定真实地址，后续调用时将直接使用真实地址。</p><p>  Demo 二进制 <a href="https://github.com/Navimark/MachOExploration/blob/master/HelloWorld/HelloWorld">HelloWorld</a> 中调用了来自于系统动态库的 <code>NSLog</code>，下面将通过该二进制及其源码来分析符号的绑定过程。</p><p>  下面会先使用 MachOView 静态查看相关的 Section 和 Segment 静态分析，然后单步动态调试验证。</p><h4 id="1-TEXT-stubs"><a href="#1-TEXT-stubs" class="headerlink" title="1. __TEXT,__stubs"></a>1. <code>__TEXT,__stubs</code></h4><p>  <code>__TEXT</code> 段存放的是代码指令，其中 <code>__TEXT,__stubs</code> 存放的是当前 <code>Image（镜像）</code> 外部符号的桩点。下图是 <code>HelloWorld</code> 的 <code>__TEXT,__stubs</code> 部分：<br>    <img src="a5ddcb7c/1.png" alt="__stubs"><br>  其中 Data 字段是机器码，可以按照 AArch64 指令集的编码规则<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="ARM64 汇编——寄存器和指令">[1]</span></a></sup>翻译成汇编代码，使用 Hopper Disassembler 打开二进制（注意不要勾选 Mach-O AArch64 Options 的 Resolve Lazy Bindings 选项），定位到 <code>NSLog</code>：</p>  <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="a5ddcb7c/2.png" alt="NSLog1"></div><div class="group-image-wrap"><img src="a5ddcb7c/3.png" alt="NSLog2"></div><div class="group-image-wrap"><img src="a5ddcb7c/4.png" alt="NSLog3"></div></div></div><p>  Hopper 右边 Instruction Encoding 区域的 16 进制串对应当前选中的汇编命令，三条命令组合起来的 16 进制串 <code>1F2003D510D7005800021FD6</code> 刚好就是 MachOView 中 <code>NSLog</code> 的 Data 值。这三行指令让跳转到 <code>0x100008008</code> 去执行，<code>0x100008008</code> 减去 VM(<code>(LC_SEGMENT_64),__PAGEZERO.VMSize</code>) 的初始偏移值：<code>0x100000000</code>(4294967296) ，得到 <code>0x000008008</code>，它对应 Mach-O 中 <code>__DATA.__la_symbol_ptr</code> 的起始位置。<br>    <img src="a5ddcb7c/5.png" alt="__stubs"><br>  由于 <code>__TEXT</code> 是只读的，为了能够在 Mach-O 经过了 ASLR 和 PIE 后仍然能够正确地定位外部符号的地址，完成动态链接，<code>__TEXT,__stubs</code> 充当了跳板作用，当有人要调用 stub 符号时，它便将调用流程转向了一个可写区域 <code>__DATA.__la_symbol_ptr</code>，而该区域将存放真正的符号地址</p><h4 id="2-DATA-la-symbol-ptr"><a href="#2-DATA-la-symbol-ptr" class="headerlink" title="2. __DATA.__la_symbol_ptr"></a>2. <code>__DATA.__la_symbol_ptr</code></h4><p>  <code>__la_symbol_ptr</code> 存放 lazy-binding 的函数指针信息，在 Hopper 中双击 <code>NSLog</code> 的地址 <code>0x100008008</code>，将会跳转到：<br>    <img src="a5ddcb7c/6.png" alt="__stubs"><br>  是一个交叉引用地址，指向 <code>0x00000001000065cc</code>，而该地址落在 <code>__TEXT.__stub_helper</code> 中，且该处的 Data 为 <code>50000018</code>：<br>    <img src="a5ddcb7c/7.png" alt="__stubs"><br>  对应的汇编代码会将流程转向 <code>__TEXT.__stub_helper</code> 的头部<br>    <img src="a5ddcb7c/8.png" alt="__stubs"></p><h4 id="3-TEXT-stub-helper"><a href="#3-TEXT-stub-helper" class="headerlink" title="3. __TEXT.__stub_helper"></a>3. <code>__TEXT.__stub_helper</code></h4><p>  <code>__TEXT.__stub_helper</code> 区域是一段汇编代码，这段代码不仅会找到要调用符号真正的地址并跳转到地址执行，而且会将该地址写回对应的 <code>__DATA.__la_symbol_ptr</code>，实现“缓存”。</p><h4 id="NSLog-的绑定过程"><a href="#NSLog-的绑定过程" class="headerlink" title="NSLog 的绑定过程"></a><code>NSLog</code> 的绑定过程</h4><ul><li>新建一个 <a href="https://github.com/Navimark/MachOExploration/blob/master/HelloWorld/ViewController.m">demo</a> ，主要代码如下：  <figure class="highlight objc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs objc">- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;<br>  [<span class="hljs-keyword">super</span> viewDidLoad];<br>  <span class="hljs-comment">// Do any additional setup after loading the view.</span><br>  <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1&quot;</span>);<br>  <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>在两个 <code>NSLog</code> 处分别下断点，设置 Debug Workflow 为 Always Show Disassembly，然后选择 arm64 真机运行，如图：<br><img src="a5ddcb7c/9.png" alt="__stubs"><br>Xcode 提示当前位置为 <code>symbol stub for NSLog</code> </li><li>得到 ALSR 偏移：<code>0x102ea0000</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">(lldb) image list HelloWorld<br>  [  0] 1F21C492-D5E8-3B0B-B239-E0E691E7D64F 0x0000000102ea0000 /Users/chenzheng/Library/Developer/Xcode/DerivedData/MachOExploration-gyejyvbqloguepctiipvnexsjqsv/Build/Products/Debug-iphoneos/HelloWorld.app/HelloWorld<br></code></pre></td></tr></table></figure></li><li><p>执行 lldb step into 命令<code>stepi</code>，如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">HelloWorld</span>`NSLog:<br>-&gt;  <span class="hljs-number">0x102ea6568</span> &lt;+<span class="hljs-number">0</span>&gt;: <span class="hljs-keyword">nop</span>    <br>    <span class="hljs-number">0x102ea656c</span> &lt;+<span class="hljs-number">4</span>&gt;: <span class="hljs-keyword">ldr</span>    x16, <span class="hljs-number">#0x1a9c</span>   <span class="hljs-comment">; (void *)0x0000000102ea6610</span><br>    <span class="hljs-number">0x102ea6570</span> &lt;+<span class="hljs-number">8</span>&gt;: <span class="hljs-keyword">br</span>     x16<br></code></pre></td></tr></table></figure><p>按住 Control 键点 Step Over 达到 <code>ldr</code> 所在行，该行取 (<code>pc + 0x1a9c</code>) 处的地址（经过计算为 <code>0x0000000102ea8008</code>），存入 <code>x16</code>，该地址指向 <code>__DATA.__la_symbol_ptr</code> 中偏移为 <code>0x0</code> 的位置，由 MachOView 可知该处即是 <code>_NSLog</code> 的位置，对应，如下图：<br><img src="a5ddcb7c/10.png" alt="__stubs"></p><h4 id="真实地址的所在"><a href="#真实地址的所在" class="headerlink" title="真实地址的所在"></a>真实地址的所在</h4><ul><li>在 <code>0x0000000102ea6610</code> 处下断点:<code>br set -a 0x0000000102ea6610</code>，然后继续执行，如下：<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs armasm">-&gt;  <span class="hljs-number">0x102ea6610</span>: <span class="hljs-keyword">ldr</span>    w16, <span class="hljs-number">0x102ea6618</span><br>  <span class="hljs-number">0x102ea6614</span>: <span class="hljs-keyword">b</span>      <span class="hljs-number">0x102ea65f8</span><br>  <span class="hljs-number">0x102ea6618</span>: udf    <span class="hljs-number">#0x0</span><br>  <span class="hljs-number">0x102ea661c</span>: <span class="hljs-keyword">ldr</span>    w16, <span class="hljs-number">0x102ea6624</span><br>  <span class="hljs-number">0x102ea6620</span>: <span class="hljs-keyword">b</span>      <span class="hljs-number">0x102ea65f8</span><br>  <span class="hljs-number">0x102ea6624</span>: udf    <span class="hljs-number">#0xd</span><br>  <span class="hljs-number">0x102ea6628</span>: <span class="hljs-keyword">ldr</span>    w16, <span class="hljs-number">0x102ea6630</span><br>  <span class="hljs-number">0x102ea662c</span>: <span class="hljs-keyword">b</span>      <span class="hljs-number">0x102ea65f8</span><br></code></pre></td></tr></table></figure>结合第一行和第三行，<code>0x102ea6610</code> 处的 <code>ldr</code> 指令实际是取文件 <code>0x6618</code> 处指示的立即数 <code>0x00000000</code> 存入 <code>x16</code> 中，这个 <code>0x00000000</code> 是一个偏移值，描述的是距离Dynamic Loader Info 中 Lazy Binding Info 起始地址的偏移，从下图可以看出，偏移后位置为 <code>0x0000c2a8 + 0x00000000</code><br><img src="a5ddcb7c/11.png" alt="__stubs"><br>其中 <code>dylib(1)</code> 表示该符号处于当前文件第三个 LC_LOAD_DYLIB 中，即 <code>libSystem.B.dylib</code> 中；segment(2) 和 offset(8) 表示将找到的真实地址写入当前文件架构的第 2 个 segment 偏移为 8 的地方。从 MachOView 中可以看到，第二个 segment 即为 __DATA，偏移 8 的位置刚好是 <code>_NSLog</code> 的符号<div class="group-image-container"><div class="group-image-row"></div><div class="group-image-row"><div class="group-image-wrap"><img src="a5ddcb7c/12.png" alt="NSLog1"></div><div class="group-image-wrap"><img src="a5ddcb7c/13.png" alt="NSLog2"></div><div class="group-image-wrap"><img src="a5ddcb7c/14.png" alt="NSLog3"></div></div></div></li></ul></li><li><p>绑定与执行<br>设置断点 <code>br set -a 0x102ea65f8</code> 继续执行，如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">0x102ea65f8</span>: <span class="hljs-keyword">adr</span>    x17, <span class="hljs-number">#0x2fb8</span>  <span class="hljs-comment">; _dyld_private</span><br><span class="hljs-number">0x102ea65fc</span>: <span class="hljs-keyword">nop</span>    <br><span class="hljs-number">0x102ea6600</span>: stp    x16, x17, [<span class="hljs-built_in">sp</span>, #-<span class="hljs-number">0x10</span>]!<br><span class="hljs-number">0x102ea6604</span>: <span class="hljs-keyword">nop</span>    <br><span class="hljs-number">0x102ea6608</span>: <span class="hljs-keyword">ldr</span>    x16, <span class="hljs-number">#0x19f8</span>  <span class="hljs-comment">; (void *)0x00000001b51bc80c: dyld_stub_binder</span><br><span class="hljs-number">0x102ea660c</span>: <span class="hljs-keyword">br</span>     x16<br><span class="hljs-number">0x102ea6610</span>: <span class="hljs-keyword">ldr</span>    w16, <span class="hljs-number">0x102ea6618</span><br><span class="hljs-number">0x102ea6614</span>: <span class="hljs-keyword">b</span>      <span class="hljs-number">0x102ea65f8</span><br></code></pre></td></tr></table></figure><p><code>dyld_stub_binder</code> 和真实地址查找有关，在此处下断点：<code>br set -a 0x00000001b51bc80c</code> 后继续执行，进入到 <code>dyld</code> 内部，单步执行到 <code>_dyld_fast_stub_entry</code> 所在行，如图：<br>  <img src="a5ddcb7c/15.png" alt="NSLog1"></p><p>在这一行的前两行:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">0x1b51bc83c</span> &lt;+<span class="hljs-number">48</span>&gt;:  <span class="hljs-keyword">ldr</span> x0, [x29, <span class="hljs-number">#0x18</span>] <br><span class="hljs-number">0x1b51bc840</span> &lt;+<span class="hljs-number">52</span>&gt;:  <span class="hljs-keyword">ldr</span> x1, [x29, <span class="hljs-number">#0x10</span>]<br></code></pre></td></tr></table></figure><p>将 <code>x29</code> 分别偏移 <code>0x18</code> 和 <code>0x10</code> 处的地址对应的值取出来放到 <code>x0</code>、<code>x1</code>，作为参数传给了 <code>_dyld_fast_stub_entry</code>，<code>_dyld_fast_stub_entry</code> 中将完成符号地址的查找。<code>x1</code> 中就是上述提到的偏移量, 而 <code>x0</code> 是一个<code>_dyld_private</code>指针:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">(lldb) register <span class="hljs-built_in">read</span> x1<br>      x1 = 0x0000000000000000<br>(lldb) register <span class="hljs-built_in">read</span> x0<br>      x0 = 0x0000000102ea95b0  _dyld_private<br></code></pre></td></tr></table></figure></li><li><code>_dyld_fast_stub_entry</code><br>这是 <code>dyld</code> 中的一个函数，我们下载一套和系统中正在使用的 <code>dyld</code> 最接近的源码，尝试分析其功能。<br>在 lldb 中执行 <code>image list dyld</code>，得到 <code>dyld</code> 的路径<code>/Users/chenzheng/Library/Developer/Xcode/iOS DeviceSupport/12.4 (16G77)/Symbols/usr/lib/dyld</code>，将其拖入到 MachOView 中，定位到 <code>LC_SOURCE_VERSION</code>，看到 Version 为 650.3.4，可惜 <a href="https://opensource.apple.com/tarballs/dyld/">dyld 源码页面</a>并没有找到匹配的版本，所以下载了 655 版本。打开 dyld 工程后定位到 <code>_dyld_fast_stub_entry</code>:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> __i386__ || __x86_64__ || __arm__ || __arm64__</span><br>__attribute__((visibility(<span class="hljs-string">&quot;hidden&quot;</span>))) <br><span class="hljs-type">void</span>* _dyld_fast_stub_entry(<span class="hljs-type">void</span>* loadercache, <span class="hljs-type">long</span> lazyinfo)<br>&#123;<br>  DYLD_NO_LOCK_THIS_BLOCK;<br>    <span class="hljs-type">static</span> <span class="hljs-type">void</span>* (*p)(<span class="hljs-type">void</span>*, <span class="hljs-type">long</span>) = <span class="hljs-literal">NULL</span>;<br>  <br>  <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)<br>      <span class="hljs-comment">// 如果缓存位置为空，从全局的 `函数名-函数指针` 数组中找到对应的</span><br>      <span class="hljs-comment">// 函数指针 ((void*)dyld::fastBindLazySymbol)，然后将形参透传过去并执行</span><br>      <span class="hljs-comment">// 然后返回执行的结果，此结果应该就是符号对应的真实地址</span><br>      _dyld_func_lookup(<span class="hljs-string">&quot;__dyld_fast_stub_entry&quot;</span>, (<span class="hljs-type">void</span>**)&amp;p);<br>  <span class="hljs-keyword">return</span> p(loadercache, lazyinfo);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure>好奇一下 <code>dyld::fastBindLazySymbol</code> 的实现：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uintptr_t</span> <span class="hljs-title function_">fastBindLazySymbol</span><span class="hljs-params">(ImageLoader** imageLoaderCache, \</span><br><span class="hljs-params"> <span class="hljs-type">uintptr_t</span> lazyBindingInfoOffset)</span><br>&#123;<br>  <span class="hljs-type">uintptr_t</span> result = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// get image </span><br>  <span class="hljs-keyword">if</span> ( *imageLoaderCache == <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// save in cache</span><br>    *imageLoaderCache = dyld::findMappedRange((<span class="hljs-type">uintptr_t</span>)imageLoaderCache);<br>    <span class="hljs-keyword">if</span> ( *imageLoaderCache == <span class="hljs-literal">NULL</span> ) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> SUPPORT_ACCELERATE_TABLES</span><br>    <span class="hljs-keyword">if</span> ( sAllCacheImagesProxy != <span class="hljs-literal">NULL</span> ) &#123;<br>      <span class="hljs-type">const</span> mach_header* mh;<br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span>* path;<br>      <span class="hljs-type">unsigned</span> index;<br>      <span class="hljs-keyword">if</span> ( sAllCacheImagesProxy-&gt;addressInCache(imageLoaderCache, &amp;mh, \<br>        &amp;path, &amp;index) ) &#123;<br>        result = sAllCacheImagesProxy-&gt;bindLazy(lazyBindingInfoOffset, \<br>         gLinkContext, mh, index);<br>        <span class="hljs-keyword">if</span> ( result == <span class="hljs-number">0</span> ) &#123;<br>          halt(<span class="hljs-string">&quot;dyld: lazy symbol binding failed for image in dyld shared\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span>* message = <span class="hljs-string">&quot;fast lazy binding from unknown image&quot;</span>;<br>      dyld::<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;dyld: %s\n&quot;</span>, message);<br>      halt(message);<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-comment">// bind lazy pointer and return it</span><br>  try &#123;<br>    result = (*imageLoaderCache)-&gt;doBindFastLazySymbol( \ <br>            (<span class="hljs-type">uint32_t</span>)lazyBindingInfoOffset, gLinkContext, \<br>            (dyld::gLibSystemHelpers != <span class="hljs-literal">NULL</span>) ? \<br>            dyld::gLibSystemHelpers-&gt;acquireGlobalDyldLock : <span class="hljs-literal">NULL</span>,<br>(dyld::gLibSystemHelpers != <span class="hljs-literal">NULL</span>) ? \<br>              dyld::gLibSystemHelpers-&gt;releaseGlobalDyldLock : <span class="hljs-literal">NULL</span>);<br>  &#125;<br>  catch (<span class="hljs-type">const</span> <span class="hljs-type">char</span>* message) &#123;<br>    dyld::<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;dyld: lazy symbol binding failed: %s\n&quot;</span>, message);<br>    halt(message);<br>  &#125;<br><br>  <span class="hljs-comment">// return target address to glue which jumps to it with real parameters restored</span><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure>大致是根据传入的 <code>lazyBindingInfoOffset</code> 和 <code>gLinkContext</code> 找到真实的地址，然后返回。</li><li><p>再单步一次执行完 <code>_dyld_fast_stub_entry</code>，得到其返回值（存在在x0中），打印 x0 ，得到的 <code>0x00000001b61d7620</code> 正是 <code>NSLog</code> 在 Foundation 框架中的地址：<br><img src="a5ddcb7c/16.png" alt="NSLog1"></p></li><li><p>第二次执行<br>单步执行，应该会停在第二个 <code>NSLog</code> 的地方：<br><img src="a5ddcb7c/17.png" alt="NSLog1"><br>设置断点 <code>br set -a 0x102ea6568</code>，然后执行，在断点位置已经有提示，存入 <code>x16</code> 的地址已经是上述 <code>NSLog</code> 的地址 <code>0x00000001b61d7620</code>，经过验证，<code>__DATA.__la_symbol_ptr</code> 偏移 <code>0x00</code> 处的值已经被赋值为了 <code>0x00000001b61d7620</code><br><img src="a5ddcb7c/18.png" alt="NSLog1"></p></li></ul><h4 id="dyld-stub-binder？"><a href="#dyld-stub-binder？" class="headerlink" title="dyld_stub_binder？"></a><code>dyld_stub_binder</code>？</h4><p>  <code>__TEXT.__stub_helper</code> 中本是用来帮助处理符号的延迟绑定的一段代码，里面引用了同样不在当前 Mach-O 中的符号 <code>dyld_stub_binder</code>，好像有问题🤔<br>  其实 <code>dyld_stub_binder</code> 存在于 <code>__DATA.__got</code> 区域，是非延迟绑定的符号，它在 Mach-O 加载完成后立即可用，可以用来辅助定位延迟绑定符号的地址。</p><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><p>  上述 <code>viewDidLoad</code> 对应的汇编代码:<br>  <img src="a5ddcb7c/19.png" alt="NSLog1"><br>  第一次 <code>bl imp_stubs_NSLog</code> 时将跳转到 <code>NSLog</code> 的桩点，这一段汇编代码将从 <code>__DATA.__la_symbol_ptr</code> 中读取地址并跳转执行，而 <code>__DATA.__la_symbol_ptr</code> 中此时的地址指向 <code>__TEXT.__stub_helper</code> 并最终被引导到 <code>__TEXT.__stub_helper</code> 的头部执行；在 <code>__TEXT.__stub_helper</code> 中调用非延迟绑定的 <code>dyld_stub_binder</code> ，在其中通过 <code>_dyld_fast_stub_entry</code> 拿到真实的地址，调用 <code>_dyld_fast_stub_entry</code> 时传入了从 Dynamic Loader Info 中取到的当前待绑定符号的 Lazy Binding Info ，以便在找到真实地址后能够写回 <code>__DATA.__la_symbol_ptr</code> 中，下次 <code>bl imp_stubs_NSLog</code> 时将直接调用</p><p>  延迟绑定技术很好地处理好了代码复用和使用效率问题，整个过程只有在自己亲自动手跟进一番才会有深刻的理解</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jianshu.com/p/2f4a5f74ac7a">ARM64 汇编——寄存器和指令</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Mach-O</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
      <tag>Mach-O</tag>
      
      <tag>加载方式</tag>
      
      <tag>lldb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给 GitHub Pages 博客绑定免费的个人域名</title>
    <link href="/posts/f5d9b671.html"/>
    <url>/posts/f5d9b671.html</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>🎉🎉咱也有顶级域名了！</p>          </div><p>本文将记录 GitHub Pages 绑定域名的过程</p><h1 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h1><p><a href="https://www.freenom.com/">Freenom</a> 是世界上第一个也是唯一的免费域名提供商，但是这家好像是不允许来自大陆的注册和续期了，而且新注册的也需要科学上网才行，所以下面的操作需要首先“云游”到外国，并且在填写注册所需的各种资料时要表现得像一个真人，以免被 Freenom 误判为机器人而申请失败。</p><ol><li>首先开启全局代理。一开始是打算为 <code>freenom.com</code> 制定规则，避免xxxx，后来担心里面的 js、啥啥啥的有问题，就开全局了</li><li>打开 Chrome 浏览器，新创建一个无痕窗口访问 <code>https://www.freenom.com</code>，输入意向的<strong>完整</strong>域名后点击 Check Availability，如果可用将如图展示：<br> <img src="f5d9b671/1.png" alt="图片"></li><li>点击 Checkout 后可以选择生效期，在 Period 中选择 <code>12 Months @ FREE</code> 然后 Continue<br> <img src="f5d9b671/2.png" alt="图片"></li><li>接下来填写邮箱地址（这个地址将成为 <code>Freenom</code> 账号登录名），既然已经云游到国外了，这里最好是填国外的邮箱服务商的邮箱地址吧，如 gmail.com 。填好后点击 Verify My Email Adress，然后到邮箱中去点击验证链接<br> <img src="f5d9b671/3.png" alt="图片"></li><li>点击验证链接后，需要填入地址信息，这里的地址需要“云游”服务器的 IP 地址所在的地址。<br> <img src="f5d9b671/4.png" alt="图片"><ol><li>访问<a class="btn" href="https://ip.sb"  title="IP 查询" target="_blank">ip.sb</a>查询到“云游” IP 所在地，然后去 Google Maps 搜索到所在地的地址信息。如果 IP 在美国，建议从<a href="http://www.shenfendaquan.com/Index/index/us_top_1000_company">这里</a>获取需要的信息</li><li>逐一填写上述得到的地址信息，填写密码</li><li>提交。不出意外的话，点击 Freenom 首页 -&gt; Services -&gt; My Domains 就能看到注册的域名了<br> <img src="f5d9b671/5.png" alt="图片"><br> <img src="f5d9b671/6.png" alt="图片"></li></ol></li></ol><div class="note note-success">            <ul><li>只能在域名到期前 14 天续费（<a href="http://www.freenom.com/zh/freeandpaiddomains.html">免费更新的</a>），建议设置提醒事件，避免来年忘记续费时间点</li><li>后期可以给 <code>freenom.com</code> 和 <code>*.freenom.com</code> 新添加 PAC 规则，让它们被转发:  <figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs js">||freenom.<span class="hljs-property">com</span>^<br>||*freenom.<span class="hljs-property">com</span>^<br></code></pre></td></tr></table></figure></li></ul>          </div><h1 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h1><p>进入域名列表后，依次点击选定域名的 Manage Domins -&gt; Manage Freenom DNS，然后填入如下规则<br><img src="f5d9b671/9.png" alt="图片"><br>其中 IP 地址的由来：<a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">Managing a custom domain for your GitHub Pages site</a></p><h1 id="GitHub-Pages-设置"><a href="#GitHub-Pages-设置" class="headerlink" title="GitHub Pages 设置"></a>GitHub Pages 设置</h1><ol><li>进入 GitHub 上托管 Pages 仓库的 Setting 页面，找到 GitHub Pages 设置区域，在 Custom domain 中填入域名，注意不需要 http(s) 前缀，然后点保存。保存完毕后仓库的根目录下会新增加一个 <code>CNAME</code> 文件，内容为 <code>alphabyte.tk</code>，这个 <code>CNAME</code> 指导 github 是否要定向到 <code>alphabyte.tk</code></li><li>随着 DNS 服务器的递归索引的建立，等上几分钟或者几个小时，通过 <code>https://alphabyte.tk/</code> 或 <code>https://www.alphabyte.tk/</code> 就能访问到博客啦。可以在命令行执行 <code>dig alphabyte.tk</code> 命令来检测 DNS 解析是否生效。</li></ol><h1 id="Hexo-设置"><a href="#Hexo-设置" class="headerlink" title="Hexo 设置"></a>Hexo 设置</h1><p>由于每次发表文章部署 Pages 时，Pages 主页的内容都是被全量清除并覆盖的，<code>CNAME</code> 文件也将被清除，所以肯定需要让 hexo 能够管理这个 <code>CNAME</code> 文件的，所以还需要对 hexo 进行一些处理：在 hexo 主题的 source 目录下创建一个 <code>CNAME</code> 文本文件，内容为 <code>alphabyte.tk</code>，然后在 <code>_config.yml</code> 中设置<code>CNAME</code> 跳过渲染 <code>skip_render: CNAME</code>，这样每次部署博客时，<code>CNAME</code> 将会被拷贝到网站根目录。</p><h1 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h1><ol><li>Freenom 的 DNS 解析服务在大陆访问的延迟比较高，可以考虑接入其他更专业的第三方 DNS 服务商</li><li>由于有了顶级私有域名，现在可以定制专属 404 页面了</li><li>提交给百度收录</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客装修</category>
      
    </categories>
    
    
    <tags>
      
      <tag>装修</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastlane Match 如何重置证书/描述文件</title>
    <link href="/posts/feb5cc21.html"/>
    <url>/posts/feb5cc21.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://docs.fastlane.tools/actions/match/">fastlane match</a> 有多香咱就不赘述了，尤其是团队开发和做 CI 时，在开发证书和测试设备管理这两方面使用 fastlane match 能节省不少时间和精力。不过有时候我们会碰到需要重新生成描述文件或重置证书的情况，比如接入 Apple Sign In 功能时，需要在证书中增加对应的能力，必须要更新描述文件时；用于生成原开发证书的本地私钥丢失，不得不重新生成整套证书时。此时 fastlane match 官网并没有明确告诉如何应对，但通过 fastlane match 的工作原理，我们还是可以总结出最佳实践的。<br><div class="note note-info">            <p>本文假设读者已经在使用 fastlane match，已经会 fastlane match 的基本使用。如果您对 fastlane match 有使用上的问题也欢迎留言交流</p>          </div><br>下面分两种情况介绍步骤，一种是需要重置证书，一种是需要重置<code>mobileprovision</code>。</p><h1 id="重置证书"><a href="#重置证书" class="headerlink" title="重置证书"></a>重置证书</h1><ol><li>删除 ITC 后台中需要被重置的证书，包括 <code>development</code> 和 <code>distribution</code> 类型的。注意，此步骤不影响已上线的 App 和通过 TestFlight 分发的 App，但是会影响已发布的测试版本 App，插线 Debug 版的和 AdHoc 版本的 App 在联网时将启动即闪退</li><li>删除 ITC 后台中需要被重置证书对应的描述文件。（不是必须的，但如果不删除的话，fastlane match 接下来重新生成的描述文件名将自动带上数字后缀，强迫症患者看了会很难受）</li><li>在本地存放描述文件的文件夹（<code>~/Library/MobileDevice/Provisioning Profiles</code>）中删除对应的描述文件。不是必须的，非洁癖患者可以跳过</li><li>在 fastlane match 所管理的存放证书和描述文件的 git 仓库中，删除需要被重置的证书和描述文件，然后手动 <code>commit</code> 和 <code>push</code></li><li>在本地钥匙串中删除需要被重置的证书，证书和私钥都删除</li><li>执行 <code>fastlane match development</code>  (注意不要添加<code>--readonly</code>参数)以重置开发证书，当 fastlane match 检测到 Git 仓库没有副本时将尝试登陆 ITC ，期间会要求输入有权限操作证书的开发者账号信息，如果 ITC 也没有将会重新生成。之后分别使用<code>appstore</code>和<code>adhoc</code> 参数重置 AdHoc 和 AppStore 证书。</li></ol><h1 id="重置描述文件"><a href="#重置描述文件" class="headerlink" title="重置描述文件"></a>重置描述文件</h1><ol><li>删除 ITC 后台中需要被重置的描述文件</li><li>在 fastlane match 所管理的存放证书和描述文件的 git 仓库中，删除需要被重置的描述文件，然后手动 <code>commit</code> 和 <code>push</code></li><li>在本地存放描述文件的文件夹（<code>~/Library/MobileDevice/Provisioning Profiles</code>）中删除需要被重置的描述文件。(不是必须的，非洁癖患者可以跳过)</li><li>执行 <code>fastlane match development</code>  (注意不要添加<code>--readonly</code>参数)以重置开发证书，当 fastlane match 检测到 Git 仓库没有副本时将尝试登陆 ITC ，期间会要求输入有权限操作证书的开发者账号信息，如果 ITC 也没有将会重新生成。之后使用<code>adhoc</code> 参数重置 AdHoc 描述文件</li></ol>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastlane</tag>
      
      <tag>工具</tag>
      
      <tag>match</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mach-O 文件结构解析</title>
    <link href="/posts/a58100d4.html"/>
    <url>/posts/a58100d4.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>Mach-O 文件是通往系统底层的基础，如果要深入理解 App 的启动加载原理，又或是想做深层次的 App 优化，熟悉 Mach-O 是非常必要的。</p>          </div><p>Mach-O (Mach Object)是一种 iOS 和 MacOS 上的原生二进制文件，类似于 Windows 里面的 PE 和 Linux 里面的 ELF，弄清楚 Mach-O 的结构和加载可以从根本上理解以下技术点：</p><ol><li><a href="https://github.com/facebook/fishhook">fishhook</a> 原理</li><li>二进制重排加快 App 启动速度</li><li>常量字符串所属模块甚至所属函数的查找</li><li>闪退后，使用 <code>.crash</code> 文件与 <code>dSYM</code> 进行符号恢复</li></ol><p>常接触的 Mach-O 文件有：</p><ol><li>编译产生的目标文件： 目标文件<code>.o</code> </li><li>静态/动态库文件： <code>.a</code>、<code>.dylib</code>、<code>.framework</code></li><li>可执行文件：如 .app 包里面的二进制文件</li><li><code>dSYM</code> 文件</li></ol><p><strong>本文将从可执行类型的 64-bit Mach-O 文件来展开</strong>。来源参考：</p><ol><li>头文件：<code>Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/mach-o/loader.h</code></li><li><a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/MachOOverview.html">苹果文档</a></li></ol><h1 id="文件描述"><a href="#文件描述" class="headerlink" title="文件描述"></a>文件描述</h1><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Mach-O 可以按照所包含的架构分类，如<code>arm64</code>、<code>armv7</code>、<code>x86_64</code>，一个 Mach-O 文件可以包含不止一个架构，该 Mach-O 将被称为通用二进制格式，即 <code>FAT</code> 二进制 ，通用二进制文件的结构和单架构的只有组织方式上有一些区别，根据苹果官网的一张老图，64-bit Mach-O 的主要组成：<br><img src="a58100d4/16c8a23a6de8960e.png" alt="Mach-O 结构1"></p><ol><li><code>Header</code>: 位于文件的开始部分，包含二进制的标记信息：类型架构、CPU 类型、文件类型、加载命令的个数等，表明自身的文件属性，方便操作系统内核知道接下来能用什么方式来加载和处理该文件。其中文件类型有目标文件、可执行文件、动态库、动态链接器、<code>dSYM</code> 等。</li><li><code>Load Commands</code>: 紧跟在 <code>Header</code> 的后面，它描述了 <code>segment</code>（段）、符号表、系统动态链接库等的加载，每一个<code>Load Commands</code>都包含有命令类型、占用空间大小、名字等基本信息，不同的数据类型使用不同的加载命令表示。这是和加载（内存映射）相关的区域，操作系统内核为了提高加载效率减少页内碎片，要求每一个段被映射到虚拟内存后所占空间需要按照 <code>PAGESIZE</code> 进行对齐。</li><li><code>Data</code>: 这部分主要存放我们的程序指令和程序所用到的变量、类、方法等，另外还有和装载内存映射相关的 Rebase、Binding、符号表、字符串表等信息。</li></ol><h4 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h4><p>整个文件的结构大致为：<br><img src="a58100d4/WX20200518-151703@2x.png" alt="Mach-O 结构2"></p><h1 id="Mach-O-结构"><a href="#Mach-O-结构" class="headerlink" title="Mach-O 结构"></a>Mach-O 结构</h1><p>和 Mach-O 结构相关的数据结构在<code>&lt;mach-o/loader.h&gt;</code> 和 <code>&lt;mach-o/fat.h&gt;</code>中可以找到，其中 64-bit 的 Header 结构：<br><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mach_header_64</span> &#123;</span><br><span class="hljs-type">uint32_t</span>magic;      <span class="hljs-comment">/* 魔数，操作系统加载器将根据这个字段决定后续如何识别和加载该二进制 */</span><br><span class="hljs-type">cpu_type_t</span>cputype;<span class="hljs-comment">/* CPU 类型标识*/</span><br><span class="hljs-type">cpu_subtype_t</span>cpusubtype;<span class="hljs-comment">/* CPU 子类型标识 */</span><br><span class="hljs-type">uint32_t</span>filetype;<span class="hljs-comment">/* 文件类型 */</span><br><span class="hljs-type">uint32_t</span>ncmds;<span class="hljs-comment">/* 加载命令的数量 */</span><br><span class="hljs-type">uint32_t</span>sizeofcmds;<span class="hljs-comment">/* Load Commands 在文件中占据空间大小*/</span><br>    <span class="hljs-comment">/** 描述文件在编译、链接过程中的信息，比较重要的标志位有</span><br><span class="hljs-comment">     * MH_DYLDLINK: 该文件需要交给 dyld 处理，无法被静态链接</span><br><span class="hljs-comment">     * MH_PIE: 只在可执行的 Mach-O 中出现，表明操作系统将对主程序启用</span><br><span class="hljs-comment">     *          地址空间布局随机化</span><br><span class="hljs-comment">     * MH_TWOLEVEL: 表明当前文件使用了两级命名空间</span><br><span class="hljs-comment">    */</span><br><span class="hljs-type">uint32_t</span>flags;<br><span class="hljs-type">uint32_t</span>reserved;<span class="hljs-comment">/* reserved */</span><br>&#125;;<br></code></pre></td></tr></table></figure><br>紧接在 Header 后面的是 Load Commands，其中 <code>LC_SEGMENT_64</code> 数据结构如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">segment_command_64</span> &#123;</span><br><span class="hljs-type">uint32_t</span>cmd;<span class="hljs-comment">/* 表示将这个64位的段映射到进程地址空间的命令 */</span><br>    <span class="hljs-comment">/** 一个 command 在文件中所占空间大小。 </span><br><span class="hljs-comment">     * 操作系统会根据 cmd 的类型来使用相应的 segment_command 数据类型来承接当前 segment，</span><br><span class="hljs-comment">     * 而 Mach-O 是基于二进制字节流存储的，</span><br><span class="hljs-comment"> * 所以 cmdsize 其实就是不同的 segment_command 数据类型所占空间的大小</span><br><span class="hljs-comment">    */</span><br><span class="hljs-type">uint32_t</span>cmdsize;<br><span class="hljs-type">char</span>segname[<span class="hljs-number">16</span>];<span class="hljs-comment">/* 段名字，一般是两个下划线开头后跟大写字母 */</span><br><span class="hljs-type">uint64_t</span>vmaddr;<span class="hljs-comment">/* 段被映射到虚拟内存空间后的起始地址， ASLR 就在这里起作用*/</span><br><span class="hljs-type">uint64_t</span>vmsize;<span class="hljs-comment">/* 段被映射到虚拟内存空间后的大小，这个大小一定是 PAGESIZE 的整数倍 */</span><br><span class="hljs-type">uint64_t</span>fileoff;<span class="hljs-comment">/* 段在文件中的偏移 */</span><br><span class="hljs-type">uint64_t</span>filesize;<span class="hljs-comment">/* 段在文件中的所占空间大小 */</span><br><span class="hljs-type">vm_prot_t</span>maxprot;<span class="hljs-comment">/* 最高级别内存保护标识 */</span><br><span class="hljs-type">vm_prot_t</span>initprot;<span class="hljs-comment">/* 段所在页原始内存保护标识 */</span><br><span class="hljs-type">uint32_t</span>nsects;<span class="hljs-comment">/* section 数量，有的段没有 section */</span><br><span class="hljs-type">uint32_t</span>flags;<span class="hljs-comment">/* flags */</span><br>&#125;;<br></code></pre></td></tr></table></figure></p><p>常见的加载命令<code>cmd</code></p><div class="table-container"><table><thead><tr><th>command 类型</th><th>解释</th></tr></thead><tbody><tr><td><code>LC_SEGMENT_64</code></td><td>将当前段中的数据加载并映射到内存</td></tr><tr><td><code>LC_CODE_SIGNATURE</code></td><td>获取应用的签名信息</td></tr><tr><td><code>LC_UUID</code></td><td>当前文件的唯一标识，可与 dSYM 做匹配用做符号还原</td></tr><tr><td><code>LC_LOAD_DYLIB</code></td><td>需要加载的动态库</td></tr><tr><td><code>LC_LOAD_DYLINKER</code></td><td>用来加载动态库的程序，一般指明 <code>/usr/lib/dyld</code></td></tr><tr><td><code>LC_MAIN</code></td><td>主程序的入口</td></tr><tr><td><code>LC_VERSION_MIN_IPHONEOS</code></td><td>二进制要求的最低操作系统版本</td></tr><tr><td><code>LC_DYLD_INFO_ONLY</code></td><td>描述重定向地址、弱引用地址、懒加载绑定等的偏移值信息</td></tr></tbody></table></div><p>其中 <code>LC_SEGMENT_64</code> 的子类型有：</p><ul><li><code>__PAGEZERO</code>: 操作系统给当前程序预留的虚拟的“保护空间”，64-bit OS 的该空间大小为 4GB，该区域对于当前程序来说不可读不可写不可执行，即所有代码和数据的加载、执行、写入操作都只能在这 4GB 空间以后的地址上进行，否则将引发异常</li><li><code>__TEXT</code>: 保存程序的代码、OC 相关的类和方法信息、包含在双引号中的常量字符串信息，另外 <code>__TEXT</code> 还预留了动态动态链接库的符号修正信息(__stub)</li><li><code>__DATA</code>: 程序的数据段，可读可写</li><li><code>__LINKEDIT</code>: 包含动态链接相关的所有信息，之前提到的重定向地址、弱引用地址、懒加载绑定信息的索引都存储在这里</li></ul><p>一个 Mach-O 二进制程序的 <code>__DATA</code> 和 <code>__TEXT</code> 段在更细的维度上会被分成不同的 section，这么设计的目的应该是为了提高内存使用效率。在同一个段的同一个 section 中可以使用相同的权限控制，例如对于 <code>__TEXT</code> 段包含代码和常量，是 readonly 的，对于动态链接库来说，操作系统内核在加载这部分数据到内存时，只需要加载一份就可以被所有的进程按需共享；而且由于是只读的，相对于可写可读的<code>__DATA</code>段，操作系统内核不用考虑是否因为数据污染而需要重新加载一个干净的 page；当内核需要收回部分内存时，对于 <code>__TEXT</code> 的页，可以直接标记为丢弃，而不用考虑是否要将变化后的数据保存起来。<br>这也暗示着我们写代码时尽量将不会发生变化的全局变量申明为 <code>const</code> 让其保存在只读区域，能提高内存访问效率，尤其是对于内存区域可能会被共享的动态库</p><h1 id="结构验证"><a href="#结构验证" class="headerlink" title="结构验证"></a>结构验证</h1><p>为了加深理解，下面将通过代码和 MachOView 来探索一个 <a href="https://github.com/Navimark/MachOExploration/blob/master/HelloWorld/HelloWorld">Demo Mach-O</a> 的 Header 和 Load Commands</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>用 Xcode 新建一个 Mac Command Line 程序，名为 MachOExploration，然后再添加一个 iOS Single View App 类型的 target，名为 HelloWorld，然后在 TARGETS -&gt; HelloWorld 的 Build Phases 中新建一个脚本<code>New Run Script Phases</code>，将 Shell 修改为 <code>/usr/bin/python3</code>，然后添加如下脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><br>product_dir = os.environ[<span class="hljs-string">&quot;BUILT_PRODUCTS_DIR&quot;</span>]<br>executeable_path = os.environ[<span class="hljs-string">&quot;EXECUTABLE_PATH&quot;</span>] <br>executeable_abs_path = os.path.join(product_dir,executeable_path)<br>executeable_name = os.environ[<span class="hljs-string">&quot;EXECUTABLE_NAME&quot;</span>]<br>project_dir = os.environ[<span class="hljs-string">&quot;PROJECT_DIR&quot;</span>]<br>des_exe_path = os.path.join(project_dir,executeable_name)<br><br>shutil.copy2(executeable_abs_path, des_exe_path)<br></code></pre></td></tr></table></figure><br>这样运行 HelloWord 工程后，将会有一个二进制文件被复制到工程中，方便后续分析</p><h4 id="读取-Header"><a href="#读取-Header" class="headerlink" title="读取 Header"></a>读取 Header</h4><p>读取文件时，为了合理利用内存，选择使用文件指针来操作文件而不是一次性将文件载入内存：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint32_t</span> magic1;<br>NSString *machoFilePath = @<span class="hljs-string">&quot;path/to/mach-o/file&quot;</span>;<br>FILE *fp = fopen(machoFilePath.UTF8String, <span class="hljs-string">&quot;r&quot;</span>);<br></code></pre></td></tr></table></figure><br>由前面的分析可知，主要是基于文件的偏移和大小来得到指定数据，所以定义一个工具函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">load_bytes</span><span class="hljs-params">(FILE *fp, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> size)</span> <br>&#123;<br>    <span class="hljs-type">void</span> *buf = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, size);<br>    <span class="hljs-keyword">if</span>(!buf) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    fseek(fp, offset, SEEK_SET);<br>    fread(buf, size, <span class="hljs-number">1</span>, fp);<br>    <span class="hljs-keyword">return</span> buf;<br>&#125;<br></code></pre></td></tr></table></figure></p><ul><li>读取 Header<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint32_t</span> *magic = load_bytes(fp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint32_t</span>));<br>NSLog(@<span class="hljs-string">&quot;%X&quot;</span>,*magic);<br><span class="hljs-built_in">free</span>(magic);<br></code></pre></td></tr></table></figure>得到魔数为 <code>FEEDFACF</code>，即 64-bit Mach-O，且不需要大小端转换，接下来使用 <code>struct mach_header_64</code> 类型加载 Header 信息：<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">void</span> load_header_64(FILE *fp)<br>&#123;<br>    <span class="hljs-keyword">struct</span> mach_header_64 *header = load_bytes(fp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> mach_header_64));<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;magic:%X&quot;</span>,header-&gt;magic);   <span class="hljs-comment">// FEEDFACF</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;cputype:%d&quot;</span>,header-&gt;cputype); <span class="hljs-comment">// 16777228 = CPU_TYPE_ARM64;</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;cpusubtype:%d&quot;</span>,header-&gt;cpusubtype); <span class="hljs-comment">// 0 = CPU_SUBTYPE_VAX_ALL;</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;filetype:%d&quot;</span>,header-&gt;filetype); <span class="hljs-comment">// 2 = MH_EXECUTE;</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;ncmds:%d&quot;</span>,header-&gt;ncmds); <span class="hljs-comment">// 21</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;sizeofcmds:%d&quot;</span>,header-&gt;sizeofcmds); <span class="hljs-comment">// 2704</span><br><span class="hljs-comment">/// 2097285 = (flags &amp; MH_TWOLEVEL) | (flags &amp; MH_PIE) |</span><br>    <span class="hljs-comment">///           (flags &amp; MH_DYLDLINK) | (flags &amp; MH_NOUNDEFS)</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;flags:%d&quot;</span>,header-&gt;flags); <span class="hljs-comment">// 2097285</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;reserved:%d&quot;</span>,header-&gt;reserved); <span class="hljs-comment">// 0</span><br>    free(header);<br>&#125;<br></code></pre></td></tr></table></figure>上述宏定义可以在 <code>iPhoneOS.sdk/usr/include/mach-o/loader.h</code> 和 <code>MacOSX.sdk/usr/include/mach/machine.h</code> 查到<br>将 <a href="https://github.com/Navimark/MachOExploration/blob/master/HelloWorld/HelloWorld">Demo Mach-O</a> 拖入到 MachOView 中可以验证：<br><img src="a58100d4/header-mach-oviewer.png" alt="图片"></li></ul><h4 id="读取-Load-Commands"><a href="#读取-Load-Commands" class="headerlink" title="读取 Load Commands"></a>读取 Load Commands</h4><p>Load Commands 紧跟在 Header 的后面，所有的 Load Commands 都“继承”自同一个基结构体，先用这个基结构体去套取数据以得到 load command 的类型，然后选用合适的类型读取完整的数据<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 基结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">load_command</span> &#123;</span><br><span class="hljs-type">uint32_t</span> cmd;<span class="hljs-comment">/* type of load command */</span><br><span class="hljs-type">uint32_t</span> cmdsize;<span class="hljs-comment">/* total size of command in bytes */</span><br>&#125;;<br></code></pre></td></tr></table></figure><br>读取代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objc">uint32_t ncmds = header-&gt;ncmds;<br><br><span class="hljs-comment">// 加载 Load Commands</span><br>uint32_t lc_offset = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> mach_header_64);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSInteger</span> i = <span class="hljs-number">0</span>; i != ncmds; ++i) &#123;<br><span class="hljs-keyword">struct</span> load_command *lc_base = load_bytes(fp,lc_offset,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> load_command));<br>load_commands_handler(lc_base, fp, lc_offset);<br>lc_offset += lc_base-&gt;cmdsize;<br>free(lc_base);<br>&#125;<br></code></pre></td></tr></table></figure><br>读取到的基结构后，使用完成的结构体套取完整数据：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">void</span> segment_64_load_handler(FILE *fp, uint32_t offset)<br>&#123;<br>    <span class="hljs-keyword">struct</span> segment_command_64 *sc_64 = load_bytes(fp, offset, <br>                                        <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> segment_command_64));<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;cmd:%d&quot;</span>,sc_64-&gt;cmd);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;cmdsize:%d&quot;</span>,sc_64-&gt;cmdsize);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;segname:%s&quot;</span>,sc_64-&gt;segname);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;vmaddr:%llu&quot;</span>,sc_64-&gt;vmaddr);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;vmsize:%llu&quot;</span>,sc_64-&gt;vmsize);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;fileoff:%llu&quot;</span>,sc_64-&gt;fileoff);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;filesize:%llu&quot;</span>,sc_64-&gt;filesize);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;maxprot:%d&quot;</span>,sc_64-&gt;maxprot);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;initprot:%d&quot;</span>,sc_64-&gt;initprot);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;nsects:%d&quot;</span>,sc_64-&gt;nsects);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;flags:%d&quot;</span>,sc_64-&gt;flags);<br>    free(sc_64);<br>&#125;<br><br><span class="hljs-keyword">void</span> dyld_info_command_handler(FILE *fp, uint32_t offset)<br>&#123;<br>    <span class="hljs-keyword">struct</span> dyld_info_command *dyld_c = load_bytes(fp, offset, <br>                                        <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> dyld_info_command));<br><span class="hljs-comment">// 使用 %d 打印会溢出</span><br>    <span class="hljs-comment">// 2147483682 = (0x22 | LC_REQ_DYLD) = (0x22 | 0x80000000) = LC_DYLD_INFO_ONLY</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;cmd:%@&quot;</span>,@(dyld_c-&gt;cmd)); <br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;cmdsize:%d&quot;</span>,dyld_c-&gt;cmdsize);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;rebase_off:%d&quot;</span>,dyld_c-&gt;rebase_off);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;rebase_size:%d&quot;</span>,dyld_c-&gt;rebase_size);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;bind_off:%d&quot;</span>,dyld_c-&gt;bind_off);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;bind_size:%d&quot;</span>,dyld_c-&gt;bind_size);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;weak_bind_off:%d&quot;</span>,dyld_c-&gt;weak_bind_off);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;weak_bind_size:%d&quot;</span>,dyld_c-&gt;weak_bind_size);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;lazy_bind_off:%d&quot;</span>,dyld_c-&gt;lazy_bind_off);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;lazy_bind_size:%d&quot;</span>,dyld_c-&gt;lazy_bind_size);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;export_off:%d&quot;</span>,dyld_c-&gt;export_off);<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;export_size:%d&quot;</span>,dyld_c-&gt;export_size);<br>free(dyld_c);<br>&#125;<br><br><span class="hljs-keyword">void</span> load_commands_handler(<span class="hljs-keyword">struct</span> load_command *lc_base, FILE *fp, uint32_t offset)<br>&#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;--------------------------------&quot;</span>);<br>    uint32_t cmd = lc_base-&gt;cmd;<br>    <span class="hljs-keyword">switch</span> (cmd) &#123;<br>        <span class="hljs-keyword">case</span> LC_SEGMENT_64:<br>            segment_64_load_handler(fp, offset);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> LC_DYLD_INFO_ONLY:<br>            dyld_info_command_handler(fp, offset);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>完整代码<a href="https://github.com/Navimark/MachOExploration/blob/master/MachOExploration/main.m">在这里</a>，后续基本上都是这种模式，根据偏移值和定义来获取数据，这里不再继续解析了。</p><h1 id="一点感触"><a href="#一点感触" class="headerlink" title="一点感触"></a>一点感触</h1><p>读取 Mach-O 文件的精髓是偏移 + <code>struct</code>，<code>struct</code> 真是访问字节流内容的神器：</p><ul><li>在探索 oc 底层结构时，打印 <code>Class</code> 类型的 <code>isa</code> 指针时，由于某些原因（暂时未知）不能直接 lldb po 出来，这时可以<a href="[iOS底层原理之六：isa指针实现之ISA_MASK](https://www.jianshu.com/p/8275a6f15bfc">定义一个和类对象一样结构的结构体来套取 <code>isa</code> 指针</a>)。</li><li><a href="https://navimark.github.io/2020/05/16/cong-hui-bian-li-jie-block-de-nei-cun-jie-gou/">oc 的 <code>block</code> 转成 c++ 代码后</a>，有一个代表 block 的基本结构的类型 <code>struct __block_impl</code>:  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__block_impl</span> &#123;<br><span class="hljs-type">void</span> *isa;<br><span class="hljs-type">int</span> Flags;<br><span class="hljs-type">int</span> Reserved;<br><span class="hljs-type">void</span> *FuncPtr;<br>&#125;;<br></code></pre></td></tr></table></figure>  还有代表当前完整内存结构的 block <code>struct __main_block_impl_0</code>(名字可能不一样)，这两个是包含关系：  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__main_block_impl_0</span> &#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__block_impl</span> impl;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__main_block_desc_0</span>* Desc;<br>__Block_byref_age_0 *age; <span class="hljs-comment">// block 捕获的变量，封装成了结构体</span><br>__main_block_impl_0(<span class="hljs-type">void</span> *fp, <span class="hljs-keyword">struct</span> __main_block_desc_0 *desc, <br>                       __Block_byref_age_0 *_age, <span class="hljs-type">int</span> flags=<span class="hljs-number">0</span>) : <br>                                           <span class="hljs-built_in">age</span>(_age-&gt;__forwarding) &#123;<br>impl.isa = &amp;_NSConcreteStackBlock;<br>impl.Flags = flags;<br>impl.FuncPtr = fp;<br>Desc = desc;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>  对于一块具体的 block 内存来说无论是通过 <code>struct __block_impl *</code> 还是 <code>struct __main_block_impl_0 *</code> 都是可以合法访问的，区别是当涉及到基本 block 属性的操作时使用 <code>struct __block_impl *</code> ，当涉及到具体 block 属性操作时使用 <code>struct __main_block_impl_0 *</code>，最大化地精炼和减少额外开销</li><li><a href="https://mp.weixin.qq.com/s/9-o5iA1-lQ3s1iwIBcXLuQ">一个基于汇编的中心重定向框架</a>中讲到，为了在汇编层面上精确无误地访问之前构建的两页内存中的数据，设计了特殊的结构体，通过该结构体套取特定偏移位置的数据，设计非常巧妙</li></ul>]]></content>
    
    
    <categories>
      
      <category>Mach-O</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
      <tag>Mach-O</tag>
      
      <tag>iOS</tag>
      
      <tag>Objective-C</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从汇编理解 Block 的内存结构</title>
    <link href="/posts/a3f46529.html"/>
    <url>/posts/a3f46529.html</url>
    
    <content type="html"><![CDATA[<p>❓ 在断点调试 iOS 程序碰到 block 作为函数的形参时，如果想知道该 block 本身的函数签名信息和函数体地址时，有哪些办法？<br>🤪 当然是在源码里面直接查看 block 的声明和调用了！<br>❗️ 但如果源码不可见呢？在分析第三方闭源库或友商 App 的某些逻辑实现时，就只有汇编代码可用</p><p>☕️ 本文将通过汇编代码入手探讨 block 的内存结构，并尝试还原 block 的函数签名信息和函数体真实地址</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><div class="note note-warning">            <p>如果拿真实案例来做分析，势必会有一系列繁琐的前期准备步骤，而且一时也想不起来有哪些友商 App 刚好可以做 demo，所以本文将使用本地环境做模拟，并直接从最关键的步骤开始</p>          </div><ol><li><p>打开 Xcode，新建一个 <code>Single View App</code>，将下面的代码贴入 <code>ViewController.m</code> 中，准备好证书和 64bit 真机。</p> <figure class="highlight objc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs objc"><span class="hljs-meta">#import <span class="hljs-string">&quot;ViewController.h&quot;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span>(^HHBlock)(<span class="hljs-built_in">NSString</span> *,<span class="hljs-built_in">NSInteger</span> );<br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> ()</span><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">ViewController</span></span><br><br>- (<span class="hljs-keyword">void</span>)viewDidLoad <br>&#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br>    <span class="hljs-keyword">void</span> (^testBlock)(<span class="hljs-built_in">NSString</span> *, <span class="hljs-built_in">NSInteger</span> ) = ^(<span class="hljs-built_in">NSString</span> *var1, <span class="hljs-built_in">NSInteger</span> var2)&#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;var1 = %@, var2 = %@&quot;</span>, var1, @(var2));<br>    &#125;;<br>    [<span class="hljs-keyword">self</span> doBlockTest:testBlock];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)doBlockTest:(HHBlock)block<br>&#123;<br>    block(<span class="hljs-string">@&quot;v1&quot;</span>,<span class="hljs-number">10086</span>); <br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure></li><li>为了尽量模拟真实环境也为了去掉汇编中不必要的指令，在 Xcode 的 Scheme 中将 <code>Run -&gt; Build Configuration</code> 修改为 Release ；然后在 <code>[self doBlockTest:testBlock];</code> 这行下断点</li><li>点 <code>Run</code>，等运行到断点位置后，勾选 Xcode 菜单 <code>Debug -&gt; Debug Workflow -&gt; Always Show Disassembly</code> 打开汇编指令视图：<br> <img src="a3f46529/1.png" alt=""></li></ol><h2 id="调用前的分析"><a href="#调用前的分析" class="headerlink" title="调用前的分析"></a>调用前的分析</h2><blockquote><p>从现在开始，我们假装忘记了刚刚写的源码，尝试从汇编代码中得到 block 的基本信息。</p></blockquote><ol><li><p>从第 14 行开始分析：<br> L14. <code>nop</code>: 空指令，什么也不做，猜测是和内存对齐有关<br> L15. <code>ldr    x1, #0x3260</code>: 将 <code>#0x3260</code> 指向的内存数据加载到寄存器 <code>x1</code> 中<br> L16. <code>adr    x2, #0x1dfc</code>: 将 <code>#0x1dfc</code> 指向的内存数据加载到寄存器 <code>x2</code> 中<br> L17. 同第 14 行<br> L18. <code>mov    x0, x19</code>: 将 19 号寄存器的值复制到 0 号寄存器<br> L19. <code>bl</code>: 调用 <code>0x100582540</code> 处的函数，即 <code>objc_msgSend</code> 的调用</p></li><li><p>按住 <code>Control</code> 键，通过点 <code>Step info</code> 单步执行到第 19 行。<code>objc_msgSend</code> 原型为<code>objc_msgSend(id self, SEL op,...)</code>，本例中有三个参数，按照约定这三个参数将依次放在<code>x0</code>、<code>x1</code>、<code>x2</code> 中。所以 <code>x0</code> 为 <code>ViewController</code> 实例，<code>x1</code> 为 selector，<code>x2</code> 为 block 结构体指针。读取寄存器和打印 <code>x0</code> 可验证：<br> <img src="a3f46529/2.png" alt=""><br> <img src="a3f46529/3.png" alt=""></p></li></ol><h2 id="block-类型形参的分析"><a href="#block-类型形参的分析" class="headerlink" title="block 类型形参的分析"></a>block 类型形参的分析</h2><div class="note note-danger">            <p>前面的更多是汇编基础的回顾，现在即将进入重点</p>          </div><ol><li><p>点 <code>Step over</code> 进入到真正被调用函数，如图：<br> <img src="a3f46529/4.png" alt=""><br> 按照刚刚的分析，<code>x2</code> 里面就是这个 block 形参，直接 <code>po</code>该形参是没有函数体地址和函数签名等信息的：<br> <img src="a3f46529/5.png" alt=""></p></li><li><p>尝试还原 block 信息，按行分析：<br> L3. <code>ldr    x3, [x2, #0x10]</code>: 将 <code>x2</code> 指向的内容加上 16 个字节偏移后的地址，加载到<code>x3</code>中<br> L4. <code>adr    x1, #0x1d94</code>: 将 <code>#0x1d94</code> 指向的内容加载到 <code>x1</code><br> L5. 同上<br> L6. <code>mov    w2, #0x2766</code>: 将 <code>#0x2766</code> 复制到 <code>w2</code> 的低 32 位上。<code>0x2766</code> 也就是十进制的 <code>10086</code><br> L7. <code>br     x3</code>: 跳转到 <code>x3</code> 指向的地址上执行</p></li><li><p>根据上下文，第 2 行中的 <code>x2</code> 中就是 block 形参指针（<code>0x0000000100584090</code>），在第 3 行中，取了该指针指向内容并偏移 <code>0x10</code> 处的地址 P 赋值给了 <code>x3</code>，在第 7 行中执行了 <code>x3</code> 指向的内容（也是一个地址），说明 P 是一个函数（函数指针）可被执行，这正是 block 的特性。参考 <a href="https://navimark.github.io/2020/05/08/you-block-de-nei-cun-bu-ju-yan-sheng-er-lai-de-mian-shi-ti/">由 block 的内存布局衍生而来的面试题</a></p></li><li><p>根据 <a href="http://clang.llvm.org/docs/Block-ABI-Apple.html">llvm 官网对 block 实施标准的描述</a>：</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">struct</span> Block_literal_1 &#123;<br>    <span class="hljs-keyword">void</span> *isa; <span class="hljs-comment">// initialized to &amp;_NSConcreteStackBlock or &amp;_NSConcreteGlobalBlock</span><br>    <span class="hljs-keyword">int</span> flags;<br>    <span class="hljs-keyword">int</span> reserved;<br>    <span class="hljs-keyword">void</span> (*invoke)(<span class="hljs-keyword">void</span> *, ...);<br>    <span class="hljs-keyword">struct</span> Block_descriptor_1 &#123;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> reserved;         <span class="hljs-comment">// NULL</span><br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> size;         <span class="hljs-comment">// sizeof(struct Block_literal_1)</span><br>        <span class="hljs-comment">// optional helper functions</span><br>        <span class="hljs-keyword">void</span> (*copy_helper)(<span class="hljs-keyword">void</span> *dst, <span class="hljs-keyword">void</span> *src);     <span class="hljs-comment">// IFF (1&lt;&lt;25)</span><br>        <span class="hljs-keyword">void</span> (*dispose_helper)(<span class="hljs-keyword">void</span> *src);             <span class="hljs-comment">// IFF (1&lt;&lt;25)</span><br>        <span class="hljs-comment">// required ABI.2010.3.16</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *signature;                         <span class="hljs-comment">// IFF (1&lt;&lt;30)</span><br>    &#125; *descriptor;<br>    <span class="hljs-comment">// imported variables</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>  block 结构体指针偏移 <code>sizeof(void *) + sizeof(int) + sizeof(reserved)</code> 后就是真正函数体 <code>invoke</code> 的地址。在 64bit 系统上指针类型和 <code>int</code> 类型分别占用 8 个字节和 4 个字节，考虑到结构体内存对齐，真正的函数体的偏移量为： 8 + 8 = 0x10，即 16 个字节，<code>invoke</code>  的地址为： <code>结构体指针地址 + offset(16 字节)</code> 。<br>  接下来我们读取这个函数体地址，首先打印 block 结构体指针指向的内容：<br>  <img src="a3f46529/6.png" alt=""></p><p> 结构体内容开始于 <code>0x00000001b365a288</code>，函数体 <code>invoke</code> 地址开始于 16 字节后，占用 8 个字节，所以其地址为：<code>0x00000001005822b4</code>，我们在这里下一个断点：<code>br s -a 0x00000001005822b4</code>，等会验证下是不是刚好断在 block 的实现里面</p></li><li><p>获取 block 的函数签名<br> 函数签名在 <code>Block_descriptor_1</code> 类型结构体 <code>descriptor</code> 的 <code>signature</code> 成员变量上，我们目标是通过 <code>signature</code> 得到 <code>NSMethodSignature</code> 实例，进而得到 <code>invoke</code> 详细的函数签名信息。<code>descriptor</code> 的偏移量： <code>offset(*invoke) + sizeof(*invoke)</code>，所以 <code>descriptor</code> 的地址为 <code>0x0000000100584070</code>。另外根据文档，并不是所有 block 都存在这个 <code>signature</code> 变量，需要通过 <code>flags</code> 与 block 中定义的枚举掩码进行 <code>&amp;</code> 操作来判断，枚举掩码定义：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>    <span class="hljs-comment">// Set to true on blocks that have captures (and thus are not true</span><br>    <span class="hljs-comment">// global blocks) but are known not to escape for various other</span><br>    <span class="hljs-comment">// reasons. For backward compatibility with old runtimes, whenever</span><br>    <span class="hljs-comment">// BLOCK_IS_NOESCAPE is set, BLOCK_IS_GLOBAL is set too. Copying a</span><br>    <span class="hljs-comment">// non-escaping block returns the original block and releasing such a</span><br>    <span class="hljs-comment">// block is a no-op, which is exactly how global blocks are handled.</span><br>    BLOCK_IS_NOESCAPE      =  (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">23</span>),<br><br>    BLOCK_HAS_COPY_DISPOSE =  (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">25</span>),<br>    BLOCK_HAS_CTOR =          (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">26</span>), <span class="hljs-comment">// helpers have C++ code</span><br>    BLOCK_IS_GLOBAL =         (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">28</span>),<br>    BLOCK_HAS_STRET =         (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">29</span>), <span class="hljs-comment">// IFF BLOCK_HAS_SIGNATURE</span><br>    BLOCK_HAS_SIGNATURE =     (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>),<br>&#125;;<br></code></pre></td></tr></table></figure><p> 按照刚刚的方法，尝试获取 <code>flags</code> 的值：<br> <img src="a3f46529/7.png" alt=""></p><p> <code>flags</code> 的值为 <code>0x50000000</code>，判断后发现存在 <code>signature</code>:<br> <img src="a3f46529/8.png" alt=""></p><p> <code>signature</code> 近在咫尺！但是仔细看 block 文档的定义，排在 <code>signature</code> 前面的两个函数指针 <code>copy_helper</code> 和 <code>dispose_helper</code> 有这句注释：<code>optional helper functions</code>，看来还需要判断这两个指针是否存在：<br> <img src="a3f46529/9.png" alt=""></p><p> 嗯，不存在，所以 <code>signature</code> 的偏移量:<code>offset(long int) + offset(long int)</code>，长度 <code>sizeof(char *)</code>，接着打印 <code>descriptor</code> 的内容：<br> <img src="a3f46529/10.png" alt=""></p><p> 所以 <code>signature</code> 的值为 <code>0x0000000100583382</code>，打印看看是什么:<br>  <img src="a3f46529/11.png" alt=""></p><p> 眼熟的 Type Encodings 字符串，转换成 <code>NSMethodSignature</code> 的实例看看：<br> <img src="a3f46529/12.png" alt=""></p><p> 这个 block 函数体没有返回值（<code>v</code>-&gt;<code>void</code>），接收 3 个参数，第一个是 block ——这是所有 block 函数体的潜规则（将上述源码编译为 C++ 的就能知道），后续两个的参数依次为：<code>@</code>(<code>NSString *</code>) 和 <code>q</code>(<code>long long</code>)，和源码一致。</p></li><li>函数体地址正确性验证<br> 还记得第 4 步在 <code>0x00000001005822b4</code> 设置的断点吗？点 <code>Continue</code> 或 lldb 输入 <code>c</code>，让程序继续执行，结果在 <code>0x00000001005822b4</code> 处被断住了：<img src="a3f46529/13.png" alt=""><br>而且断住的位置在 <code>ViewController.m:19</code>，查看源码发现刚好就是 block 的实现：<img src="a3f46529/14.png" alt=""></li></ol><p>PS：本人汇编初学，若发现理解不到位或者错误的地方，望指教！</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://juejin.im/post/5cadeda55188251ad87b0eed">arm64 架构之入栈/出栈操作</a></li><li><a href="http://clang.llvm.org/docs/Block-ABI-Apple.html">Clang 11 documentation - Block Implementation Specification</a></li><li><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">Type Encodings 对照表</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>iOS</tag>
      
      <tag>LLDB</tag>
      
      <tag>block</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>由 block 的内存布局衍生而来的面试题</title>
    <link href="/posts/80ce330f.html"/>
    <url>/posts/80ce330f.html</url>
    
    <content type="html"><![CDATA[<p>今天在群里看到大佬们在讨论一个面试题，问如下代码在 32bit 和 64bit 系统上分别报什么错误：<br><figure class="highlight objc"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs objc"><span class="hljs-meta">#import <span class="hljs-string">&lt;Foundation/Foundation.h&gt;</span></span><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    <span class="hljs-keyword">void</span> (^block)(<span class="hljs-keyword">void</span>) = <span class="hljs-literal">nil</span>;<br>    block();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>虽然有大佬一下子说出了答案，但我仍然一脸懵逼，后来经人提醒，这个考察 block 在内存中的结构，于是赶紧做了如下实验终于弄懂了为什么。</p><ul><li>实验<br>将以上代码保存为 <code>block_test.m</code> ，在命令行编译成 C++:<code>clang -rewrite-objc -fobjc-arc block_test.m</code>，打开同一目录下生成的<code>block_test.cpp</code>文件，截取如下关键代码：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 注释①</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">__block_impl</span> &#123;<br>  <span class="hljs-type">void</span> *isa;<br>  <span class="hljs-type">int</span> Flags;<br>  <span class="hljs-type">int</span> Reserved;<br>  <span class="hljs-type">void</span> *FuncPtr;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">void</span> (*block)(<span class="hljs-type">void</span>) = __null;<br>    <span class="hljs-comment">// 注释 ②</span><br>    ((<span class="hljs-built_in">void</span> (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>解释：</p><ol><li>注释①所在的结构体是 block 在内存中的数据结构。</li><li>注释②是一个函数调用语句，可以简化成：<code>((__block_impl *)block)-&gt;FuncPtr(block)</code>，即调用 <code>__block_impl</code> 类型指针指向的结构体中 <code>FuncPtr</code> 指向的函数，由于该结构体指针指向的内容为 null，因此 <code>FuncPtr</code>指向的位置显然不是一个函数，所以该指针指向的位置会发生一个<code>EXC_BAD_ACCESS</code> 错误。</li><li><code>FuncPtr</code> 指向的位置是多少呢？根据上述<code>__block_impl</code>中各成员变量的排列可知 <code>FuncPtr</code> 的偏移是 <code>sizeof(void *) + sizeof(int) + sizeof(int)</code>，另外还需要考虑结构体内存对齐，参考<a href="https://www.jianshu.com/p/3294668e2d8c">这个链接</a>，所以在 32bit 系统中，偏移：<code>4 + 4 + 4 = 0x0C</code>；64bit 系统中，偏移：<code>8 + 8 = 0x10</code></li></ol></li><li><p>结论：</p><ul><li>答案：在 32bit 系统中报错：<code>EXC_BAD_ACCESS(address = 0x0C)</code>，在 64bit 系统中报错<code>EXC_BAD_ACCESS(address = 0x10)</code></li><li>block 本质是一个结构体，在探究 block 相关的问题时，转换成 <code>C++</code> 代码后往往就可以一目了然，比如<a href="https://www.jianshu.com/p/4e9d3ef9a199">weakSelf 为什么可以解决循环引用</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>底层</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
      <tag>iOS</tag>
      
      <tag>Objective-C</tag>
      
      <tag>block</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何快速更换 App icon</title>
    <link href="/posts/c097b069.html"/>
    <url>/posts/c097b069.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>每逢重大节日，App icon 就要跟一波“潮流”做一次更换，节日过后再换回普通。如何保证这两次切换流程丝滑顺畅呢？</p></blockquote><p>应用内需要更换的 icon 包括两处，一个是 App 主 icon，默认放在 <code>xcassets</code> 里面，另一个就是 App 内部页面所使用的 icon。</p><h1 id="App-主-icon-更换"><a href="#App-主-icon-更换" class="headerlink" title="App 主 icon 更换"></a>App 主 icon 更换</h1><p>苹果这边需要的 icon 实在太多了，如果像我们 App 一样支持 iPad 那么大大小小的 icon 就需要 18 张，就算让设计师同学给到所有需要的尺寸我们自己在 <code>.xcassets</code>  一一对应起来也是超级麻烦，如果我们只需要提供一张高清图（1024x1024 pixel）剩下的能通过工具自动对应起来该多好啊！</p><p>研究<code>xcassets</code>结构后发现，AppIcon 类型的图片是一个后缀名为 <code>appiconset</code> 的文件夹，该文件夹里面除了有 APP 需要的各种尺寸的 <code>png</code> 图片外，还有一个 <code>Contents.json</code> 文件，形如：<br><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;images&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;size&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20x20&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;idiom&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;iphone&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filename&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IOS_40-2.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scale&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2x&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;size&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;83.5x83.5&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;idiom&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ipad&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filename&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IOS_167.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scale&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2x&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;size&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1024x1024&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;idiom&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ios-marketing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filename&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IOS_1024.png&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;scale&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1x&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;info&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;author&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;xcode&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><br>描述了了各种尺寸的图片如何与文件夹中的 <code>png</code> 图片对应，我们按照此规律便可以写一个更换 AppIcon 的工具。</p><p>之前确实听说过有自动生成这种 icon 的工具 App 但我没有使用过，要为如此一个小功能下载一个 App 我觉得太不环保了。还是自己写一个脚本实现比较低碳。下面是 python 程序和注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/local/bin/python3</span><br><span class="hljs-comment"># _*_ coding:utf-8 _*_</span><br><br>__doc__=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输入：一个 1024*1024 的 png 图片</span><br><span class="hljs-string">    输出： AppIconxxxxx.appiconset 目录，包含 iPhone 和 iPad 所需的 App Icons</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> os,sys<br><span class="hljs-keyword">import</span> imghdr<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> random,shutil<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image,ImageFile<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileSet</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,filename,scale</span>):<br>        self.filename = filename<br>        self.scale = scale<br>    <br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fileset</span>(<span class="hljs-params">cls,scale,size,prefix</span>):<br>        filename = <span class="hljs-string">&quot;&#123;&#125;.&#123;&#125;.&#123;&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(size,scale,prefix)<br>        file_set = FileSet(filename,scale)<br>        <span class="hljs-keyword">return</span> file_set<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageSet</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,size,idiom,filesets</span>):<br>        self.size = size    <span class="hljs-comment"># 单边</span><br>        self.idiom = idiom  <br>        self.filesets = filesets    <span class="hljs-comment"># 数组，包含文件名，一个 size 可能有多个 scale，所有会有多个文件 set</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">json_desc</span>(<span class="hljs-params">self</span>):<br>        descs = []<br>        <span class="hljs-keyword">for</span> fileset <span class="hljs-keyword">in</span> self.filesets:<br>            json_dict = &#123;<span class="hljs-string">&quot;size&quot;</span>:<span class="hljs-string">&quot;&#123;&#125;x&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.size,self.size),<br>                        <span class="hljs-string">&quot;idiom&quot;</span>:self.idiom,<br>                        <span class="hljs-string">&quot;filename&quot;</span>:fileset.filename,<br>                        <span class="hljs-string">&quot;scale&quot;</span>:<span class="hljs-string">&quot;&#123;&#125;x&quot;</span>.<span class="hljs-built_in">format</span>(fileset.scale)&#125;<br>            descs.append(json_dict)<br>        <span class="hljs-keyword">return</span> descs<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">iPhone_set</span>(<span class="hljs-params">cls,size,filesets</span>):<br>        <span class="hljs-keyword">return</span> ImageSet(size,<span class="hljs-string">&#x27;iphone&#x27;</span>,filesets)<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">iPad_set</span>(<span class="hljs-params">cls,size,filesets</span>):<br>        <span class="hljs-keyword">return</span> ImageSet(size,<span class="hljs-string">&#x27;ipad&#x27;</span>,filesets)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">market_set</span>(<span class="hljs-params">cls,file_prefix=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>        size = <span class="hljs-number">1024</span><br>        <span class="hljs-keyword">return</span> ImageSet(size,idiom=<span class="hljs-string">&#x27;ios-marketing&#x27;</span>,filesets=[FileSet.fileset(<span class="hljs-number">1</span>,size,file_prefix)])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_img_sets</span>(<span class="hljs-params">iPad=<span class="hljs-literal">False</span>,iPhone=<span class="hljs-literal">False</span>,file_prefix=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    img_sets = []<br>    <span class="hljs-keyword">if</span> iPad:<br>        <span class="hljs-keyword">for</span> size <span class="hljs-keyword">in</span> [<span class="hljs-number">20</span>,<span class="hljs-number">29</span>,<span class="hljs-number">40</span>,<span class="hljs-number">76</span>]:<br>            file_sets = [FileSet.fileset(<span class="hljs-number">2</span>,size,file_prefix),FileSet.fileset(<span class="hljs-number">1</span>,size,file_prefix)]<br>            one_set = ImageSet.iPad_set(size,file_sets)<br>            img_sets.append(one_set)<br>        img_sets.append(ImageSet.iPad_set(<span class="hljs-number">83.5</span>,[FileSet.fileset(<span class="hljs-number">2</span>,<span class="hljs-number">83.5</span>,file_prefix)]))        <br>    <span class="hljs-keyword">if</span> iPhone:<br>        <span class="hljs-keyword">for</span> size <span class="hljs-keyword">in</span> [<span class="hljs-number">20</span>,<span class="hljs-number">29</span>,<span class="hljs-number">40</span>,<span class="hljs-number">60</span>]:<br>            file_sets = [FileSet.fileset(<span class="hljs-number">2</span>,size,file_prefix),FileSet.fileset(<span class="hljs-number">3</span>,size,file_prefix)]<br>            one_set = ImageSet.iPhone_set(size,file_sets)<br>            img_sets.append(one_set)<br>    img_sets.append(ImageSet.market_set(file_prefix))<br>    <span class="hljs-keyword">return</span> img_sets<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_appicon_set</span>(<span class="hljs-params">imgobj,t_path=<span class="hljs-string">&#x27;&#x27;</span>,iPad=<span class="hljs-literal">False</span>,iPhone=<span class="hljs-literal">True</span></span>):<br>    rand_str = <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">20000</span>,<span class="hljs-number">2147483648</span>))<br>    t_folder_path = os.path.join(t_path,<span class="hljs-string">&quot;AppIcon&quot;</span>+ rand_str +<span class="hljs-string">&quot;.appiconset&quot;</span>)<br>    os.makedirs(t_folder_path)<br>    img_sets = get_img_sets(iPad=iPad,iPhone=iPhone,file_prefix=rand_str)<br>    contents = &#123;<span class="hljs-string">&quot;info&quot;</span>:&#123;<span class="hljs-string">&quot;version&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;author&quot;</span>:<span class="hljs-string">&quot;xcode&quot;</span>&#125;&#125;<br>    images = []<br>    <span class="hljs-keyword">for</span> single_set <span class="hljs-keyword">in</span> img_sets:<br>        <span class="hljs-keyword">for</span> fileset <span class="hljs-keyword">in</span> single_set.filesets:<br>            scale_size = (<span class="hljs-built_in">int</span>(single_set.size * fileset.scale), <span class="hljs-built_in">int</span>(single_set.size * fileset.scale))<br>            img_obj = imgobj.resize(scale_size,Image.ANTIALIAS)<br>            real_path = os.path.join(t_folder_path,fileset.filename)<br>            img_obj.save(real_path)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;保存文件&#123;&#125;,\t路径:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(scale_size,real_path))<br>        images += single_set.json_desc()<br>    contents[<span class="hljs-string">&quot;images&quot;</span>] = images<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(t_folder_path,<span class="hljs-string">&quot;Contents.json&quot;</span>),<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> wf:<br>        wf.write(json.dumps(contents,indent=<span class="hljs-number">4</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    argvs = sys.argv[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) == <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> argvs:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fatal: 要求两个参数，第一个是图片路径，第二个是目标目录&quot;</span>)<br>        sys.exit(-<span class="hljs-number">1</span>)<br><br>    o_img_path,t_path = argvs<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(o_img_path) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> imghdr.what(o_img_path) <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;png&#x27;</span>]:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fatal: 图片路径不存在或者非 png 格式图片&quot;</span>)<br>        sys.exit(-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(t_path):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fatal: 目标路径不存在或者非目录&quot;</span>)<br>        sys.exit(-<span class="hljs-number">1</span>)<br><br>    o_img = Image.<span class="hljs-built_in">open</span>(o_img_path)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1024</span>,<span class="hljs-number">1024</span>) != o_img.size :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Fatal: 图片非 1024x1024 pixel 尺寸&quot;</span>)<br>        sys.exit(-<span class="hljs-number">1</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">碰到设计师犯糊，将肉眼看不见但确实带有 Alpha 通道的图片提供给我们，直到我们在提交 App Store 的那一刻苹果报错说带有 Alpha 通道，然后我们又要重新走一遍流程🐶。</span><br><span class="hljs-string">下面会检查该 1024*1024 的图片是否存在 alpha 通道，若存在，移除之</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> o_img.getbands()[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;A&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Info: 包含 alpha 通道，准备移除...&quot;</span>)<br>    o_img = o_img.convert(<span class="hljs-string">&quot;RGB&quot;</span>)<br><br>    create_appicon_set(o_img,t_path=t_path,iPad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>假设该程序保存为<code>appicon_generator.py</code>，选择一个目录在终端打开，然后执行命令：<code>$ python3 /path/to/appicon_generator.py /iconimg/path/1024x1024.png /path/to/output</code>，将在 <code>/path/to/output</code> 目录生成一个 <code>AppIconxxxxx.appiconset</code> （<code>xxxxx</code> 是随机数字，增加辨识度避免撞车）目录，将该目录拖动到 <code>.xcassets</code> 文件夹里面，然后在 Xcode 的 Targets -&gt; General -&gt; App Icons and Launch Images 中选择刚刚生成的 AppIcon 即可</p><h1 id="App-内部-icon-更换"><a href="#App-内部-icon-更换" class="headerlink" title="App 内部 icon 更换"></a>App 内部 icon 更换</h1><p>这里没啥好说的，一般出现在“设置”、“关于 XXX” 里面，替换即可</p><h1 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h1><blockquote><p> Git 的每次提交应该只做一件事！</p></blockquote><p>我们更换了 App Icons 和其他需要替换的 icon 后，立即 git 提交一次，本次提交只做一件事，就是切换 icon。等到需要将 icon 还原时，直接 <code>git revert</code> 本次提交，方便快速切换回来</p>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>Python</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
